Source: splint
Section: devel
Priority: optional
Maintainer: Debian QA Group <packages@qa.debian.org>
Build-Depends: autotools-dev, debhelper (>= 10), libfl-dev
Build-Conflicts: bison, bison++
Standards-Version: 3.9.8
Homepage: http://www.splint.org/
Vcs-Git: https://anonscm.debian.org/git/collab-maint/splint.git
Vcs-Browser: https://anonscm.debian.org/cgit/collab-maint/splint.git

Package: splint
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, splint-data (= ${source:Version})
Suggests: splint-doc-html
Description: tool for statically checking C programs for bugs
 splint is an annotation-assisted lightweight static checker.  It is a tool for
 statically checking C programs for security vulnerabilities and coding
 mistakes.  If additional effort is invested in adding annotations to programs,
 splint can perform stronger checking.
 .
 splint does many of the traditional lint checks including unused declarations,
 type inconsistencies, use before definition, unreachable code, ignored return
 values, execution paths with no return, likely infinite loops, and fall
 through cases.  Problems detected by Splint include:
 .
  * Dereferencing a possibly null pointer
  * Using or returning storage that is undefined or not properly defined
  * Type mismatches, with greater precision and flexibility than by C compilers
  * Memory management errors like use of dangling references and memory leaks
  * Inconsistent (with specified interface) global variable modification or use
  * Problematic control flow such as likely infinite loops etc.
  * Buffer overflow vulnerabilities
  * Dangerous macro implementations or invocations
  * Violations of customized naming conventions

Package: splint-data
Architecture: all
Multi-Arch: foreign
Depends: ${misc:Depends}
Breaks: splint (<< 3.1.2.dfsg-1)
Replaces: splint (<< 3.1.2.dfsg-1)
Description: tool for statically checking C programs for bugs - data files
 splint is an annotation-assisted lightweight static checker.  It is a tool for
 statically checking C programs for security vulnerabilities and coding
 mistakes.  If additional effort is invested in adding annotations to programs,
 splint can perform stronger checking.
 .
 splint does many of the traditional lint checks including unused declarations,
 type inconsistencies, use before definition, unreachable code, ignored return
 values, execution paths with no return, likely infinite loops, and fall
 through cases.  Problems detected by Splint include:
 .
  * Dereferencing a possibly null pointer
  * Using or returning storage that is undefined or not properly defined
  * Type mismatches, with greater precision and flexibility than by C compilers
  * Memory management errors like use of dangling references and memory leaks
  * Inconsistent (with specified interface) global variable modification or use
  * Problematic control flow such as likely infinite loops etc.
  * Buffer overflow vulnerabilities
  * Dangerous macro implementations or invocations
  * Violations of customized naming conventions
 .
 This package contains the data files that are necessary to use splint.

Package: splint-doc-html
Section: doc
Architecture: all
Multi-Arch: foreign
Depends: ${misc:Depends}
Suggests: splint
Conflicts: splint-doc
Replaces: splint-doc
Description: tool for statically checking C programs for bugs - HTML documentation
 splint is an annotation-assisted lightweight static checker.  It is a tool for
 statically checking C programs for security vulnerabilities and coding
 mistakes.  If additional effort is invested in adding annotations to programs,
 splint can perform stronger checking.
 .
 splint does many of the traditional lint checks including unused declarations,
 type inconsistencies, use before definition, unreachable code, ignored return
 values, execution paths with no return, likely infinite loops, and fall
 through cases.  Problems detected by Splint include:
 .
  * Dereferencing a possibly null pointer
  * Using or returning storage that is undefined or not properly defined
  * Type mismatches, with greater precision and flexibility than by C compilers
  * Memory management errors like use of dangling references and memory leaks
  * Inconsistent (with specified interface) global variable modification or use
  * Problematic control flow such as likely infinite loops etc.
  * Buffer overflow vulnerabilities
  * Dangerous macro implementations or invocations
  * Violations of customized naming conventions
 .
 This package contains the manual (HTML documentation) for splint.
