From: Carlos Maddela <e7appew@gmail.com>
Date: Thu, 23 Mar 2017 03:20:24 +1100
Subject: Cherry-pick unreleased upstream fix for Debian Bug #369264.

Description: Cherry-pick unreleased upstream fix for Debian Bug #369264,
 in order to handle C99-style mixing of statements and declarations.
 .
 Update grammar with changes from Jake Holland (JHolland at
 FASTSOFT.COM). Also removed '#line' items from the generated bison
 files.
Author: Jake Holland <JHolland at FASTSOFT.COM>
Bug: https://sourceforge.net/p/splint/bugs/3/
Bug-Debian: https://bugs.debian.org/369264
Applied-Upstream: https://github.com/ravenexp/splint/commit/4cae47a0819a2ebb5a607f409fc68e75af548c5d
 https://github.com/ravenexp/splint/commit/47834140f5bf05369780a13f2422e7a4a8af27c1
 https://github.com/ravenexp/splint/commit/2abc30a4fd61b5bf9b5fcbb98ac4332b82315c20
 https://github.com/ravenexp/splint/commit/772d178a48544870da2faa9d333abb77f3143b1b
 https://github.com/ravenexp/splint/commit/ed804178d1e95388bf9d88c40b03459914d78e4d
 https://github.com/ravenexp/splint/commit/d96fa052c99dae1c3c5c8ebae1d538289fa3c192
 https://github.com/ravenexp/splint/commit/fc0b19a3a9a2cef95587f83e0487fc3337f3bbd8
 https://github.com/ravenexp/splint/commit/542122cd9172c7540bdaafe8528713be9a189867
 https://github.com/ravenexp/splint/commit/d4b769964e091e4cb808c62906faa938951c0ca0
 https://github.com/ravenexp/splint/commit/42fec1f8e9e8e646e2ff7df37b3043f577c65659
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
---
 src/Headers/cgrammar_tokens.h |    4 +-
 src/Headers/llgrammar_gen.h   |    4 +-
 src/Headers/llgrammar_gen2.h  |    4 +-
 src/Headers/signature_gen.h   |    4 +-
 src/Makefile.am               |    2 +-
 src/cgrammar.c.der            | 4755 ++++++++++++++++++++---------------------
 src/cgrammar.y                |   26 +-
 src/llgrammar.c.der           |  742 +++----
 src/signature.c.der           |   88 +-
 9 files changed, 2810 insertions(+), 2819 deletions(-)

diff --git a/src/Headers/cgrammar_tokens.h b/src/Headers/cgrammar_tokens.h
index 7d1edd9..8c8bfc1 100644
--- a/src/Headers/cgrammar_tokens.h
+++ b/src/Headers/cgrammar_tokens.h
@@ -494,7 +494,7 @@
 
 #if ! defined cgrammar_YYSTYPE && ! defined cgrammar_YYSTYPE_IS_DECLARED
 typedef union cgrammar_YYSTYPE
-#line 81 "cgrammar.y"
+
 {
   lltok tok;
   int count;
@@ -545,7 +545,7 @@ typedef union cgrammar_YYSTYPE
   /* drl */  
 }
 /* Line 1489 of yacc.c.  */
-#line 491 "cgrammar.tab.h"
+
 	cgrammar_YYSTYPE;
 # define yystype cgrammar_YYSTYPE /* obsolescent; will be withdrawn */
 # define cgrammar_YYSTYPE_IS_DECLARED 1
diff --git a/src/Headers/llgrammar_gen.h b/src/Headers/llgrammar_gen.h
index 7544a9e..ebf616e 100644
--- a/src/Headers/llgrammar_gen.h
+++ b/src/Headers/llgrammar_gen.h
@@ -374,7 +374,7 @@
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 72 "llgrammar.y"
+
 {
   ltoken ltok;  /* a leaf is also an ltoken */
   qual typequal;
@@ -442,7 +442,7 @@ typedef union YYSTYPE
   /*@-redef@*/
 }
 /* Line 1489 of yacc.c.  */
-#line 388 "llgrammar.tab.h"
+
 	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
diff --git a/src/Headers/llgrammar_gen2.h b/src/Headers/llgrammar_gen2.h
index 7544a9e..ebf616e 100644
--- a/src/Headers/llgrammar_gen2.h
+++ b/src/Headers/llgrammar_gen2.h
@@ -374,7 +374,7 @@
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 72 "llgrammar.y"
+
 {
   ltoken ltok;  /* a leaf is also an ltoken */
   qual typequal;
@@ -442,7 +442,7 @@ typedef union YYSTYPE
   /*@-redef@*/
 }
 /* Line 1489 of yacc.c.  */
-#line 388 "llgrammar.tab.h"
+
 	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
diff --git a/src/Headers/signature_gen.h b/src/Headers/signature_gen.h
index d7e5242..604bb9b 100644
--- a/src/Headers/signature_gen.h
+++ b/src/Headers/signature_gen.h
@@ -196,7 +196,7 @@
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 71 "signature.y"
+
 {
   ltoken ltok;  /* a leaf is also an ltoken */
   unsigned int count;
@@ -209,7 +209,7 @@ typedef union YYSTYPE
   /*@-redef@*/ /*@-matchfields@*/ 
 }
 /* Line 1489 of yacc.c.  */
-#line 155 "signature.tab.h"
+
 	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
diff --git a/src/Makefile.am b/src/Makefile.am
index 2323a16..f431cbf 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -318,7 +318,7 @@ Headers/cgrammar_tokens.h cgrammar.c: cgrammar.c.der cgrammar.y bison.head bison
 	  $(CP) cgrammar.c.der cgrammar.c; \
 	else \
 	  echo '* Making cgrammar.c'; \
-          echo '*      Note: Expect 157 shift/reduce conflicts and 123 reduce/reduce conflicts. (see cgrammar.y for explanation)'; \
+          echo '*      Note: Expect 159 shift/reduce conflicts and 123 reduce/reduce conflicts. (see cgrammar.y for explanation)'; \
 	  $(BISON) $(YFLAGS) cgrammar.y; \
 	  $(CAT) bison.head cgrammar.tab.c bison.reset | $(SED) 's/YYSTYPE/cgrammar_YYSTYPE/g' | $(SED) 's/lsllex/cgrammar_lsllex/g' > cgrammar.c; \
 	  $(CP) cgrammar.c cgrammar.c.der; \
diff --git a/src/cgrammar.c.der b/src/cgrammar.c.der
index e4cdac4..e38a136 100644
--- a/src/cgrammar.c.der
+++ b/src/cgrammar.c.der
@@ -520,7 +520,7 @@
 
 
 /* Copy the first part of user declarations.  */
-#line 24 "cgrammar.y"
+
 
 /*
 **
@@ -597,7 +597,7 @@ extern void yyerror (char *);
 
 #if ! defined cgrammar_YYSTYPE && ! defined cgrammar_YYSTYPE_IS_DECLARED
 typedef union cgrammar_YYSTYPE
-#line 81 "cgrammar.y"
+
 {
   lltok tok;
   int count;
@@ -648,7 +648,7 @@ typedef union cgrammar_YYSTYPE
   /* drl */  
 }
 /* Line 187 of yacc.c.  */
-#line 594 "cgrammar.tab.c"
+
 	cgrammar_YYSTYPE;
 # define yystype cgrammar_YYSTYPE /* obsolescent; will be withdrawn */
 # define cgrammar_YYSTYPE_IS_DECLARED 1
@@ -661,7 +661,7 @@ typedef union cgrammar_YYSTYPE
 
 
 /* Line 216 of yacc.c.  */
-#line 607 "cgrammar.tab.c"
+
 
 #ifdef short
 # undef short
@@ -876,14 +876,14 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  262
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   6819
+#define YYLAST   6730
 
 /* YYNTOKENS -- Number of terminals.  */
 #define YYNTOKENS  197
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  276
+#define YYNNTS  278
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  719
+#define YYNRULES  721
 /* YYNRULES -- Number of states.  */
 #define YYNSTATES  1264
 
@@ -1007,42 +1007,43 @@ static const yytype_uint16 yyprhs[] =
     1644,  1646,  1648,  1650,  1652,  1656,  1658,  1660,  1662,  1665,
     1668,  1669,  1672,  1673,  1678,  1679,  1686,  1687,  1691,  1692,
     1698,  1702,  1705,  1709,  1710,  1711,  1712,  1713,  1714,  1716,
-    1719,  1722,  1726,  1729,  1733,  1737,  1742,  1745,  1748,  1752,
-    1756,  1761,  1763,  1766,  1768,  1771,  1773,  1777,  1779,  1784,
-    1786,  1789,  1791,  1794,  1796,  1799,  1801,  1806,  1809,  1810,
-    1816,  1817,  1824,  1829,  1834,  1835,  1836,  1847,  1849,  1850,
-    1855,  1857,  1859,  1861,  1863,  1865,  1868,  1870,  1874,  1876,
-    1881,  1885,  1890,  1897,  1903,  1909,  1912,  1915,  1917,  1920,
-    1923,  1926,  1929,  1932,  1935,  1938,  1941,  1943,  1945,  1950,
-    1952,  1956,  1960,  1964,  1966,  1970,  1974,  1976,  1980,  1984,
-    1986,  1990,  1994,  1998,  2002,  2004,  2008,  2012,  2014,  2018,
-    2020,  2024,  2026,  2030,  2032,  2036,  2038,  2042,  2044,  2045,
-    2046,  2053,  2054,  2055,  2063,  2065,  2069,  2073,  2077,  2081,
-    2085,  2089,  2093,  2097,  2101,  2105,  2109,  2111,  2112,  2114,
-    2117,  2125,  2128,  2131,  2139,  2146,  2149,  2153,  2156,  2160,
-    2163,  2167,  2171,  2175,  2179,  2182,  2186,  2187,  2189,  2190,
-    2192,  2194,  2196,  2198,  2200,  2202,  2204,  2206,  2208,  2213
+    1719,  1721,  1724,  1726,  1729,  1732,  1736,  1739,  1743,  1746,
+    1749,  1753,  1757,  1762,  1764,  1767,  1769,  1772,  1774,  1778,
+    1780,  1785,  1787,  1790,  1792,  1795,  1797,  1800,  1802,  1807,
+    1810,  1811,  1817,  1818,  1825,  1830,  1835,  1836,  1837,  1848,
+    1850,  1851,  1856,  1858,  1860,  1862,  1864,  1866,  1869,  1871,
+    1875,  1877,  1882,  1886,  1891,  1898,  1904,  1910,  1913,  1916,
+    1918,  1921,  1924,  1927,  1930,  1933,  1936,  1939,  1942,  1944,
+    1946,  1951,  1953,  1957,  1961,  1965,  1967,  1971,  1975,  1977,
+    1981,  1985,  1987,  1991,  1995,  1999,  2003,  2005,  2009,  2013,
+    2015,  2019,  2021,  2025,  2027,  2031,  2033,  2037,  2039,  2043,
+    2045,  2046,  2047,  2054,  2055,  2056,  2064,  2066,  2070,  2074,
+    2078,  2082,  2086,  2090,  2094,  2098,  2102,  2106,  2110,  2112,
+    2113,  2115,  2118,  2126,  2129,  2132,  2140,  2147,  2150,  2154,
+    2157,  2161,  2164,  2168,  2172,  2176,  2180,  2183,  2187,  2188,
+    2190,  2191,  2193,  2195,  2197,  2199,  2201,  2203,  2205,  2207,
+    2209,  2214
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int16 yyrhs[] =
 {
      198,     0,    -1,    -1,   199,    -1,   200,    -1,   199,   200,
-      -1,   261,   468,    -1,   201,    -1,   202,    -1,   212,    -1,
+      -1,   261,   470,    -1,   201,    -1,   202,    -1,   212,    -1,
      215,    -1,   303,    -1,    18,    -1,     1,    -1,    77,   347,
-     361,   371,   361,   468,   312,    91,    -1,    77,   347,   361,
-     371,   361,    23,   312,   319,   318,   468,    91,    -1,    -1,
-      78,   203,   204,   468,    91,    -1,   205,    -1,   347,   361,
-     205,    -1,   209,    -1,   375,   209,    -1,   471,    -1,   312,
+     361,   371,   361,   470,   312,    91,    -1,    77,   347,   361,
+     371,   361,    23,   312,   319,   318,   470,    91,    -1,    -1,
+      78,   203,   204,   470,    91,    -1,   205,    -1,   347,   361,
+     205,    -1,   209,    -1,   375,   209,    -1,   473,    -1,   312,
       24,   361,   371,   312,    25,    -1,   206,    26,    27,    -1,
      206,    26,   312,   302,    27,   361,    -1,    -1,   206,   313,
       24,    25,   207,   233,    -1,    -1,   206,   313,    24,   372,
-      25,   208,   233,    -1,   471,    -1,   312,    24,   361,   205,
+      25,   208,   233,    -1,   473,    -1,   312,    24,   361,   205,
      312,    25,    -1,   209,    26,    27,    -1,   209,    26,   312,
      302,    27,   361,    -1,    -1,   209,   313,    24,    25,   210,
      234,    -1,    -1,   209,   313,    24,   372,    25,   211,   234,
-      -1,    -1,    -1,    79,   471,    24,   372,    25,   213,   234,
-     214,   468,    91,    -1,    92,   403,    95,    -1,    93,   389,
+      -1,    -1,    -1,    79,   473,    24,   372,    25,   213,   234,
+     214,   470,    91,    -1,    92,   403,    95,    -1,    93,   389,
       95,    -1,    94,   390,    95,    -1,    92,    95,    -1,   256,
       -1,   218,    23,   221,    -1,    -1,   230,   219,    22,   222,
       -1,    -1,     5,   220,    22,   222,    -1,   218,    -1,   218,
@@ -1050,44 +1051,44 @@ static const yytype_int16 yyrhs[] =
      223,   224,    -1,   225,    -1,   228,   227,   228,    -1,   184,
       -1,   185,    -1,    53,    -1,    52,    -1,    54,    -1,   229,
       -1,   231,    24,   228,    25,    -1,    24,   228,   232,   228,
-      25,    -1,   230,    -1,   192,    -1,   470,    -1,   189,    -1,
+      25,    -1,   230,    -1,   192,    -1,   472,    -1,   189,    -1,
      230,    26,    27,    -1,   230,    26,   192,    27,    -1,    34,
-     230,    -1,    24,   230,    25,    -1,   230,    28,   471,    -1,
-     230,    45,   471,    -1,   226,    -1,    33,    -1,    32,    -1,
+     230,    -1,    24,   230,    25,    -1,   230,    28,   473,    -1,
+     230,    45,   473,    -1,   226,    -1,    33,    -1,    32,    -1,
       -1,   235,   233,    -1,    -1,   236,   234,    -1,   237,    -1,
      241,    -1,   240,    -1,   325,    -1,   328,    -1,   247,    -1,
      238,    -1,   242,    -1,   240,    -1,   326,    -1,   330,    -1,
-     248,    -1,   238,    91,    -1,    -1,    74,   239,   249,   468,
+     248,    -1,   238,    91,    -1,    -1,    74,   239,   249,   470,
       -1,    76,    -1,   242,    91,    -1,    -1,    75,   243,   262,
       -1,   245,    -1,   245,    40,   244,    -1,   189,    -1,   247,
-      -1,    -1,   248,    91,    -1,    73,   244,   442,    -1,    73,
+      -1,    -1,   248,    91,    -1,    73,   244,   444,    -1,    73,
      244,    -1,   250,    -1,   249,    21,   250,    -1,   251,   252,
-      -1,    -1,   253,   251,    -1,   470,    -1,   189,    -1,   303,
+      -1,    -1,   253,   251,    -1,   472,    -1,   189,    -1,   303,
       -1,    89,    -1,    90,    -1,   121,    -1,   122,    -1,   135,
       -1,    80,    -1,    81,    -1,    82,    -1,    83,    -1,    84,
       -1,    85,    -1,    86,    -1,   371,    -1,   347,   361,   371,
-      -1,    -1,    19,   258,   420,    -1,    -1,    -1,   259,   424,
-     260,   413,    -1,   216,   257,    -1,   265,   468,    -1,   468,
-      -1,   470,    -1,   189,    -1,   190,    -1,   263,    26,    27,
+      -1,    -1,    19,   258,   422,    -1,    -1,    -1,   259,   426,
+     260,   413,    -1,   216,   257,    -1,   265,   470,    -1,   470,
+      -1,   472,    -1,   189,    -1,   190,    -1,   263,    26,    27,
       -1,   263,    26,   264,    27,    -1,    34,   263,    -1,    24,
-     263,    25,    -1,   263,    28,   471,    -1,   263,    45,   471,
-      -1,   263,    -1,   442,    -1,   263,    -1,   265,    21,   263,
-      -1,   470,    -1,   189,    -1,   266,    26,    27,    -1,   266,
+     263,    25,    -1,   263,    28,   473,    -1,   263,    45,   473,
+      -1,   263,    -1,   444,    -1,   263,    -1,   265,    21,   263,
+      -1,   472,    -1,   189,    -1,   266,    26,    27,    -1,   266,
       26,   264,    27,    -1,    34,   266,    -1,    24,   266,    25,
-      -1,   266,    28,   471,    -1,   266,    45,   471,    -1,    -1,
-     268,    -1,   266,    -1,   268,    21,   266,    -1,   470,    -1,
-     189,    -1,   442,    -1,    24,   300,    25,    -1,   190,    -1,
+      -1,   266,    28,   473,    -1,   266,    45,   473,    -1,    -1,
+     268,    -1,   266,    -1,   268,    21,   266,    -1,   472,    -1,
+     189,    -1,   444,    -1,    24,   300,    25,    -1,   190,    -1,
      116,    -1,    -1,    24,   270,   413,    25,    -1,   269,    -1,
      271,    26,   300,    27,    -1,   271,    24,    25,    -1,   271,
       24,   272,    25,    -1,    71,    24,   299,    21,   383,    25,
-      -1,   271,   361,    28,   471,   312,    -1,   271,   361,    45,
-     471,   312,    -1,   271,    48,    -1,   271,    49,    -1,    24,
-     383,    25,    19,   425,   469,    20,    -1,   299,    -1,   272,
+      -1,   271,   361,    28,   473,   312,    -1,   271,   361,    45,
+     473,   312,    -1,   271,    48,    -1,   271,    49,    -1,    24,
+     383,    25,    19,   427,   471,    20,    -1,   299,    -1,   272,
       21,   299,    -1,   271,    -1,    48,   273,    -1,    49,   273,
       -1,    29,   281,    -1,    34,   281,    -1,    33,   281,    -1,
       32,   281,    -1,    31,   281,    -1,    30,   281,    -1,   278,
-     276,   279,    -1,   275,    -1,   274,    28,   471,    -1,   274,
-      26,   300,    27,    -1,   471,    -1,    47,   312,    24,   383,
+     276,   279,    -1,   275,    -1,   274,    28,   473,    -1,   274,
+      26,   300,    27,    -1,   473,    -1,    47,   312,    24,   383,
      361,    21,   274,    25,   312,    -1,    -1,   312,   277,   280,
       -1,    -1,    -1,    42,    24,   383,    25,    -1,    42,   273,
       -1,    43,    24,   383,    25,    -1,    43,   273,    -1,   273,
@@ -1120,13 +1121,13 @@ static const yytype_int16 yyrhs[] =
       -1,   317,   312,    -1,   307,    -1,   316,    21,   361,   307,
       -1,    -1,   318,    21,   361,   308,    -1,   299,    -1,    19,
      323,    20,    -1,    19,   323,    21,    20,    -1,   320,   319,
-      -1,   321,    23,    -1,   471,    22,    -1,   322,    -1,   321,
-     322,    -1,    26,   302,    27,    -1,    28,   471,    -1,   319,
+      -1,   321,    23,    -1,   473,    22,    -1,   322,    -1,   321,
+     322,    -1,    26,   302,    27,    -1,    28,   473,    -1,   319,
       -1,   323,    21,   319,    -1,   117,    -1,   115,    -1,   118,
       -1,   119,    -1,   120,    -1,   326,    91,    -1,    -1,   254,
-     361,   327,   268,   468,   312,    -1,   330,    91,    -1,   255,
-     361,    -1,    -1,   329,   336,   331,   267,   468,   312,    -1,
-      -1,   329,   332,   333,   468,   312,    -1,   224,    -1,   217,
+     361,   327,   268,   470,   312,    -1,   330,    91,    -1,   255,
+     361,    -1,    -1,   329,   336,   331,   267,   470,   312,    -1,
+      -1,   329,   332,   333,   470,   312,    -1,   224,    -1,   217,
       -1,   144,    -1,   145,    -1,   147,    -1,   148,    -1,   146,
       -1,   129,    -1,   132,    -1,   130,    -1,   131,    -1,   137,
       -1,   138,    -1,   123,    -1,   125,    -1,   124,    -1,   133,
@@ -1143,112 +1144,112 @@ static const yytype_int16 yyrhs[] =
      338,   312,    -1,   340,   312,    -1,   341,   312,    -1,   171,
      361,    -1,   173,   361,    -1,   172,   361,    -1,   174,   361,
       -1,   175,   361,    -1,   176,   361,    -1,   177,   361,    -1,
-     178,   361,    -1,   179,   361,    -1,   180,   361,    -1,   472,
+     178,   361,    -1,   179,   361,    -1,   180,   361,    -1,   474,
      361,    -1,   352,   361,    -1,   366,   361,    -1,   342,   361,
       -1,   312,   347,   312,    -1,   349,    -1,   349,    88,   348,
       91,    -1,   383,    -1,   383,    21,   348,    -1,   324,   350,
       -1,   344,   350,    -1,   345,   350,    -1,    -1,   347,    -1,
-      -1,    -1,    -1,   361,    68,   471,   312,    19,   353,   417,
+      -1,    -1,    -1,   361,    68,   473,   312,    19,   353,   417,
      362,   418,   354,    20,   351,    -1,    -1,    -1,   361,    69,
-     471,   312,    19,   355,   417,   362,   418,   356,    20,    -1,
-     361,    68,   471,   312,    19,    20,    -1,   361,    69,   471,
+     473,   312,    19,   355,   417,   362,   418,   356,    20,    -1,
+     361,    68,   473,   312,    19,    20,    -1,   361,    69,   473,
      312,    19,    20,    -1,    -1,    -1,   361,    68,   312,    19,
      357,   417,   362,   418,   358,    20,    -1,    -1,    -1,   361,
       69,   312,    19,   359,   417,   362,   418,   360,    20,    -1,
      361,    68,   312,    19,    20,    -1,   361,    69,   312,    19,
-      20,    -1,   361,    68,   471,   361,    -1,   361,    69,   471,
+      20,    -1,   361,    68,   473,   361,    -1,   361,    69,   473,
      361,    -1,    -1,   363,    -1,   215,    -1,   362,   363,    -1,
      347,   361,   364,   312,    18,    -1,   347,   312,    18,    -1,
      365,   361,    -1,   364,    21,   365,   361,    -1,   371,    -1,
       22,   312,   302,    -1,   371,    22,   312,   302,    -1,   361,
-      70,    19,   368,    20,   312,    -1,    -1,   361,    70,   471,
-      19,   367,   368,    20,   312,    -1,   361,    70,   471,   312,
+      70,    19,   368,    20,   312,    -1,    -1,   361,    70,   473,
+      19,   367,   368,    20,   312,    -1,   361,    70,   473,   312,
       -1,   369,    -1,   368,    21,   369,    -1,   368,    21,    -1,
-     471,    -1,   471,    23,   312,   302,    -1,   206,    -1,   385,
+     473,    -1,   473,    23,   312,   302,    -1,   206,    -1,   385,
       -1,   375,   195,    -1,   375,   370,    -1,   206,    -1,   375,
      206,    -1,   378,    -1,   361,   376,    -1,   112,    -1,   113,
       -1,   114,    -1,   373,    -1,   374,   373,    -1,    34,    -1,
       34,   374,    -1,    34,   375,    -1,    34,   374,   375,    -1,
-     377,    -1,   377,    21,     5,    -1,   471,    -1,   377,    21,
-     471,    -1,     5,    -1,   379,    -1,   379,    21,     5,    -1,
+     377,    -1,   377,    21,     5,    -1,   473,    -1,   377,    21,
+     473,    -1,     5,    -1,   379,    -1,   379,    21,     5,    -1,
       -1,   380,   382,    -1,    -1,   379,    21,   381,   382,    -1,
-     312,   347,   370,   312,    -1,   471,    -1,   346,    -1,   346,
+     312,   347,   370,   312,    -1,   473,    -1,   346,    -1,   346,
      384,    -1,   375,    -1,   386,    -1,   375,   386,    -1,    -1,
      386,    -1,   312,    24,   361,   384,    25,    -1,    26,    27,
       -1,    26,   302,    27,    -1,   386,    26,    27,    -1,   386,
       26,   302,    27,    -1,   312,    24,    25,    -1,   312,    24,
      378,    25,    -1,   386,   312,    24,    25,    -1,   386,   312,
       24,   378,    25,    -1,   405,    -1,   407,    -1,   410,    -1,
-     413,    -1,   428,    -1,   431,    -1,   465,    -1,   436,    -1,
-     467,    -1,   388,    -1,    96,    24,   300,    25,    -1,   391,
-      -1,   389,    -1,   398,    -1,   391,   398,    -1,   435,   391,
-      -1,   464,   404,    11,    24,   300,    25,    18,    -1,   464,
+     413,    -1,   430,    -1,   433,    -1,   467,    -1,   438,    -1,
+     469,    -1,   388,    -1,    96,    24,   300,    25,    -1,   391,
+      -1,   389,    -1,   398,    -1,   391,   398,    -1,   437,   391,
+      -1,   466,   404,    11,    24,   300,    25,    18,    -1,   466,
      404,    11,    24,   300,    25,    -1,   393,   398,    -1,    -1,
       -1,    13,    24,   301,    18,   301,    18,   394,   301,   395,
-      25,    -1,    -1,   193,   415,    24,   397,   439,    25,    -1,
-     194,    -1,   405,    -1,   407,    -1,   410,    -1,   401,   424,
-      -1,   401,    -1,   402,    -1,   428,    -1,   399,    -1,   392,
-      -1,   396,    -1,   467,    -1,    24,   398,    25,    -1,     1,
-      -1,    -1,   430,   400,   398,    -1,   415,    19,    -1,   419,
-      20,    -1,   404,    -1,   423,    -1,   405,    -1,   407,    -1,
-     410,    -1,   414,    -1,   429,    -1,   431,    -1,   436,    -1,
-     466,    -1,    24,   404,    25,    -1,   467,    -1,   388,    -1,
-       1,    -1,   471,    22,    -1,   111,   387,    -1,    -1,   102,
+      25,    -1,    -1,   193,   415,    24,   397,   441,    25,    -1,
+     194,    -1,   405,    -1,   407,    -1,   410,    -1,   401,   426,
+      -1,   401,    -1,   402,    -1,   430,    -1,   399,    -1,   392,
+      -1,   396,    -1,   469,    -1,    24,   398,    25,    -1,     1,
+      -1,    -1,   432,   400,   398,    -1,   415,    19,    -1,   419,
+      20,    -1,   404,    -1,   425,    -1,   405,    -1,   407,    -1,
+     410,    -1,   414,    -1,   431,    -1,   433,    -1,   438,    -1,
+     468,    -1,    24,   404,    25,    -1,   469,    -1,   388,    -1,
+       1,    -1,   473,    22,    -1,   111,   387,    -1,    -1,   102,
      406,    -1,    -1,     6,   302,   408,    22,    -1,    -1,   102,
      406,     6,   302,   409,    22,    -1,    -1,     7,   411,    22,
       -1,    -1,   102,   406,     7,   412,    22,    -1,    24,   413,
-      25,    -1,   415,   421,    -1,   415,   422,   416,    -1,    -1,
-      -1,    -1,    -1,    -1,    20,    -1,   111,    20,    -1,   427,
-      20,    -1,   427,   111,    20,    -1,   424,    20,    -1,   424,
-     111,    20,    -1,   424,   427,    20,    -1,   424,   427,   111,
-      20,    -1,    19,   420,    -1,    19,    20,    -1,    19,   423,
-      20,    -1,    19,   424,    20,    -1,    19,   424,   427,    20,
-      -1,   404,    -1,   423,   404,    -1,   303,    -1,   424,   303,
-      -1,   426,    -1,   425,    21,   426,    -1,   299,    -1,    19,
-     425,   469,    20,    -1,   387,    -1,   427,   387,    -1,    18,
-      -1,   300,    18,    -1,    18,    -1,   300,    18,    -1,   300,
-      -1,     8,    24,   300,    25,    -1,   430,   387,    -1,    -1,
-     430,   387,     9,   432,   387,    -1,    -1,    10,    24,   300,
-     433,    25,   387,    -1,    11,    24,   300,    25,    -1,    11,
-      24,   300,    25,    -1,    -1,    -1,   193,   437,   415,    24,
-     438,   439,    25,   413,   463,   416,    -1,   441,    -1,    -1,
-     439,   440,    21,   441,    -1,   462,    -1,   470,    -1,   190,
-      -1,   189,    -1,   192,    -1,   442,   192,    -1,   442,    -1,
-      24,   300,    25,    -1,   443,    -1,   271,    26,   300,    27,
-      -1,   271,    24,    25,    -1,   271,    24,   272,    25,    -1,
-      71,    24,   299,    21,   383,    25,    -1,   271,   361,    28,
-     471,   312,    -1,   271,   361,    45,   471,   312,    -1,   271,
-      48,    -1,   271,    49,    -1,   444,    -1,    48,   273,    -1,
-      49,   273,    -1,    29,   281,    -1,    34,   281,    -1,    33,
-     281,    -1,    32,   281,    -1,    31,   281,    -1,    30,   281,
-      -1,   276,    -1,   445,    -1,    24,   383,    25,   281,    -1,
-     446,    -1,   282,    34,   281,    -1,   282,    35,   281,    -1,
-     282,    36,   281,    -1,   447,    -1,   283,    33,   282,    -1,
-     283,    32,   282,    -1,   448,    -1,   284,    50,   283,    -1,
-     284,    51,   283,    -1,   449,    -1,   285,    37,   284,    -1,
-     285,    38,   284,    -1,   285,    52,   284,    -1,   285,    53,
-     284,    -1,   450,    -1,   286,    54,   285,    -1,   286,    55,
-     285,    -1,   451,    -1,   287,    29,   286,    -1,   452,    -1,
-     288,    39,   287,    -1,   453,    -1,   289,    40,   288,    -1,
-     454,    -1,   290,    56,   289,    -1,   455,    -1,   292,    57,
-     290,    -1,   456,    -1,    -1,    -1,   292,    41,   458,    22,
-     459,   294,    -1,    -1,    -1,   292,    41,   460,   300,    22,
-     461,   294,    -1,   457,    -1,   273,    23,   299,    -1,   273,
-      58,   299,    -1,   273,    59,   299,    -1,   273,    60,   299,
-      -1,   273,    61,   299,    -1,   273,    62,   299,    -1,   273,
-      63,   299,    -1,   273,    64,   299,    -1,   273,    65,   299,
-      -1,   273,    66,   299,    -1,   273,    67,   299,    -1,   194,
-      -1,    -1,    12,    -1,   434,   387,    -1,   464,   387,    11,
-      24,   300,    25,    18,    -1,   393,   387,    -1,   434,   404,
-      -1,   464,   404,    11,    24,   300,    25,    18,    -1,   464,
-     404,    11,    24,   300,    25,    -1,   393,   404,    -1,    14,
-     471,    18,    -1,    15,    18,    -1,   101,    15,    18,    -1,
-      16,    18,    -1,    97,    16,    18,    -1,    98,    16,    18,
-      -1,    99,    16,    18,    -1,   100,    16,    18,    -1,    17,
-      18,    -1,    17,   300,    18,    -1,    -1,    18,    -1,    -1,
-      21,    -1,   188,    -1,   189,    -1,   193,    -1,   194,    -1,
-     470,    -1,   190,    -1,   195,    -1,   190,    -1,    44,    24,
-     300,    25,    -1,    44,    24,   383,    25,    -1
+      25,    -1,   415,   423,    -1,   415,   424,   416,    -1,    -1,
+      -1,    -1,    -1,    -1,   426,    -1,   426,   421,    -1,   429,
+      -1,   429,   420,    -1,    20,    -1,   111,    20,    -1,   420,
+      20,    -1,   420,   111,    20,    -1,   421,    20,    -1,   421,
+     111,    20,    -1,    19,   422,    -1,    19,    20,    -1,    19,
+     425,    20,    -1,    19,   426,    20,    -1,    19,   426,   429,
+      20,    -1,   404,    -1,   425,   404,    -1,   303,    -1,   426,
+     303,    -1,   428,    -1,   427,    21,   428,    -1,   299,    -1,
+      19,   427,   471,    20,    -1,   387,    -1,   429,   387,    -1,
+      18,    -1,   300,    18,    -1,    18,    -1,   300,    18,    -1,
+     300,    -1,     8,    24,   300,    25,    -1,   432,   387,    -1,
+      -1,   432,   387,     9,   434,   387,    -1,    -1,    10,    24,
+     300,   435,    25,   387,    -1,    11,    24,   300,    25,    -1,
+      11,    24,   300,    25,    -1,    -1,    -1,   193,   439,   415,
+      24,   440,   441,    25,   413,   465,   416,    -1,   443,    -1,
+      -1,   441,   442,    21,   443,    -1,   464,    -1,   472,    -1,
+     190,    -1,   189,    -1,   192,    -1,   444,   192,    -1,   444,
+      -1,    24,   300,    25,    -1,   445,    -1,   271,    26,   300,
+      27,    -1,   271,    24,    25,    -1,   271,    24,   272,    25,
+      -1,    71,    24,   299,    21,   383,    25,    -1,   271,   361,
+      28,   473,   312,    -1,   271,   361,    45,   473,   312,    -1,
+     271,    48,    -1,   271,    49,    -1,   446,    -1,    48,   273,
+      -1,    49,   273,    -1,    29,   281,    -1,    34,   281,    -1,
+      33,   281,    -1,    32,   281,    -1,    31,   281,    -1,    30,
+     281,    -1,   276,    -1,   447,    -1,    24,   383,    25,   281,
+      -1,   448,    -1,   282,    34,   281,    -1,   282,    35,   281,
+      -1,   282,    36,   281,    -1,   449,    -1,   283,    33,   282,
+      -1,   283,    32,   282,    -1,   450,    -1,   284,    50,   283,
+      -1,   284,    51,   283,    -1,   451,    -1,   285,    37,   284,
+      -1,   285,    38,   284,    -1,   285,    52,   284,    -1,   285,
+      53,   284,    -1,   452,    -1,   286,    54,   285,    -1,   286,
+      55,   285,    -1,   453,    -1,   287,    29,   286,    -1,   454,
+      -1,   288,    39,   287,    -1,   455,    -1,   289,    40,   288,
+      -1,   456,    -1,   290,    56,   289,    -1,   457,    -1,   292,
+      57,   290,    -1,   458,    -1,    -1,    -1,   292,    41,   460,
+      22,   461,   294,    -1,    -1,    -1,   292,    41,   462,   300,
+      22,   463,   294,    -1,   459,    -1,   273,    23,   299,    -1,
+     273,    58,   299,    -1,   273,    59,   299,    -1,   273,    60,
+     299,    -1,   273,    61,   299,    -1,   273,    62,   299,    -1,
+     273,    63,   299,    -1,   273,    64,   299,    -1,   273,    65,
+     299,    -1,   273,    66,   299,    -1,   273,    67,   299,    -1,
+     194,    -1,    -1,    12,    -1,   436,   387,    -1,   466,   387,
+      11,    24,   300,    25,    18,    -1,   393,   387,    -1,   436,
+     404,    -1,   466,   404,    11,    24,   300,    25,    18,    -1,
+     466,   404,    11,    24,   300,    25,    -1,   393,   404,    -1,
+      14,   473,    18,    -1,    15,    18,    -1,   101,    15,    18,
+      -1,    16,    18,    -1,    97,    16,    18,    -1,    98,    16,
+      18,    -1,    99,    16,    18,    -1,   100,    16,    18,    -1,
+      17,    18,    -1,    17,   300,    18,    -1,    -1,    18,    -1,
+      -1,    21,    -1,   188,    -1,   189,    -1,   193,    -1,   194,
+      -1,   472,    -1,   190,    -1,   195,    -1,   190,    -1,    44,
+      24,   300,    25,    -1,    44,    24,   383,    25,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
@@ -1311,21 +1312,22 @@ static const yytype_uint16 yyrline[] =
     1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1811,  1812,
     1820,  1821,  1828,  1828,  1830,  1830,  1835,  1835,  1837,  1837,
     1842,  1843,  1848,  1852,  1856,  1860,  1864,  1868,  1872,  1873,
-    1874,  1875,  1877,  1878,  1880,  1882,  1889,  1894,  1896,  1898,
-    1900,  1905,  1906,  1910,  1911,  1915,  1916,  1920,  1921,  1925,
-    1926,  1930,  1931,  1935,  1936,  1937,  1941,  1955,  1960,  1960,
-    1965,  1965,  1970,  1976,  1980,  1981,  1980,  1991,  1992,  1992,
-    1997,  1998,  1999,  2010,  2018,  2019,  2023,  2024,  2028,  2029,
-    2030,  2031,  2032,  2034,  2035,  2036,  2037,  2041,  2042,  2043,
-    2044,  2045,  2046,  2047,  2048,  2049,  2050,  2054,  2055,  2059,
-    2060,  2061,  2062,  2066,  2067,  2068,  2072,  2073,  2074,  2078,
-    2079,  2080,  2081,  2082,  2086,  2087,  2088,  2092,  2093,  2097,
-    2098,  2102,  2103,  2107,  2108,  2112,  2113,  2117,  2118,  2119,
-    2118,  2121,  2122,  2121,  2127,  2128,  2129,  2130,  2131,  2132,
-    2133,  2134,  2135,  2136,  2137,  2138,  2142,  2143,  2147,  2151,
-    2153,  2155,  2160,  2161,  2163,  2165,  2169,  2170,  2171,  2173,
-    2174,  2175,  2176,  2177,  2178,  2179,  2182,  2184,  2187,  2189,
-    2193,  2197,  2198,  2199,  2200,  2201,  2205,  2206,  2207,  2208
+    1877,  1878,  1882,  1883,  1884,  1885,  1887,  1888,  1893,  1898,
+    1900,  1902,  1904,  1909,  1910,  1914,  1915,  1919,  1920,  1924,
+    1925,  1929,  1930,  1934,  1935,  1939,  1940,  1941,  1945,  1959,
+    1964,  1964,  1969,  1969,  1974,  1980,  1984,  1985,  1984,  1995,
+    1996,  1996,  2001,  2002,  2003,  2014,  2022,  2023,  2027,  2028,
+    2032,  2033,  2034,  2035,  2036,  2038,  2039,  2040,  2041,  2045,
+    2046,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2058,
+    2059,  2063,  2064,  2065,  2066,  2070,  2071,  2072,  2076,  2077,
+    2078,  2082,  2083,  2084,  2085,  2086,  2090,  2091,  2092,  2096,
+    2097,  2101,  2102,  2106,  2107,  2111,  2112,  2116,  2117,  2121,
+    2122,  2123,  2122,  2125,  2126,  2125,  2131,  2132,  2133,  2134,
+    2135,  2136,  2137,  2138,  2139,  2140,  2141,  2142,  2146,  2147,
+    2151,  2155,  2157,  2159,  2164,  2165,  2167,  2169,  2173,  2174,
+    2175,  2177,  2178,  2179,  2180,  2181,  2182,  2183,  2186,  2188,
+    2191,  2193,  2197,  2201,  2202,  2203,  2204,  2205,  2209,  2210,
+    2211,  2212
 };
 #endif
 
@@ -1418,12 +1420,13 @@ static const char *const yytname[] =
   "stmtErr", "labeledStmt", "optExtraFallThroughs", "caseStmt", "@45",
   "@46", "defaultStmt", "@47", "@48", "compoundStmt", "compoundStmtErr",
   "CreateInnerScope", "DeleteInnerScope", "CreateStructInnerScope",
-  "DeleteStructInnerScope", "DeleteInnerScopeSafe", "compoundStmtRest",
-  "compoundStmtAux", "compoundStmtAuxErr", "stmtListErr",
-  "initializerList", "typeInitializerList", "typeInitializer", "stmtList",
-  "expressionStmt", "expressionStmtErr", "ifPred", "selectionStmt", "@49",
-  "@50", "whilePred", "iterWhilePred", "iterStmt", "@51", "@52",
-  "iterArgList", "@53", "iterArgExpr", "cconstantExpr", "primaryIterExpr",
+  "DeleteStructInnerScope", "DeleteInnerScopeSafe", "compoundInitListNext",
+  "compoundStmtListNext", "compoundStmtRest", "compoundStmtAux",
+  "compoundStmtAuxErr", "stmtListErr", "initializerList",
+  "typeInitializerList", "typeInitializer", "stmtList", "expressionStmt",
+  "expressionStmtErr", "ifPred", "selectionStmt", "@49", "@50",
+  "whilePred", "iterWhilePred", "iterStmt", "@51", "@52", "iterArgList",
+  "@53", "iterArgExpr", "cconstantExpr", "primaryIterExpr",
   "postfixIterExpr", "unaryIterExpr", "castIterExpr", "timesIterExpr",
   "plusIterExpr", "shiftIterExpr", "relationalIterExpr",
   "equalityIterExpr", "bitandIterExpr", "xorIterExpr", "bitorIterExpr",
@@ -1522,21 +1525,22 @@ static const yytype_uint16 yyr1[] =
      404,   404,   404,   404,   404,   404,   404,   404,   405,   405,
      406,   406,   408,   407,   409,   407,   411,   410,   412,   410,
      413,   413,   414,   415,   416,   417,   418,   419,   420,   420,
-     420,   420,   420,   420,   420,   420,   421,   422,   422,   422,
-     422,   423,   423,   424,   424,   425,   425,   426,   426,   427,
-     427,   428,   428,   429,   429,   429,   430,   431,   432,   431,
-     433,   431,   434,   435,   437,   438,   436,   439,   440,   439,
-     441,   441,   441,   441,   442,   442,   443,   443,   444,   444,
-     444,   444,   444,   444,   444,   444,   444,   445,   445,   445,
-     445,   445,   445,   445,   445,   445,   445,   446,   446,   447,
-     447,   447,   447,   448,   448,   448,   449,   449,   449,   450,
-     450,   450,   450,   450,   451,   451,   451,   452,   452,   453,
-     453,   454,   454,   455,   455,   456,   456,   457,   458,   459,
-     457,   460,   461,   457,   462,   462,   462,   462,   462,   462,
-     462,   462,   462,   462,   462,   462,   463,   463,   464,   465,
-     465,   465,   466,   466,   466,   466,   467,   467,   467,   467,
-     467,   467,   467,   467,   467,   467,   468,   468,   469,   469,
-     470,   471,   471,   471,   471,   471,   472,   472,   472,   472
+     421,   421,   422,   422,   422,   422,   422,   422,   423,   424,
+     424,   424,   424,   425,   425,   426,   426,   427,   427,   428,
+     428,   429,   429,   430,   430,   431,   431,   431,   432,   433,
+     434,   433,   435,   433,   436,   437,   439,   440,   438,   441,
+     442,   441,   443,   443,   443,   443,   444,   444,   445,   445,
+     446,   446,   446,   446,   446,   446,   446,   446,   446,   447,
+     447,   447,   447,   447,   447,   447,   447,   447,   447,   448,
+     448,   449,   449,   449,   449,   450,   450,   450,   451,   451,
+     451,   452,   452,   452,   452,   452,   453,   453,   453,   454,
+     454,   455,   455,   456,   456,   457,   457,   458,   458,   459,
+     460,   461,   459,   462,   463,   459,   464,   464,   464,   464,
+     464,   464,   464,   464,   464,   464,   464,   464,   465,   465,
+     466,   467,   467,   467,   468,   468,   468,   468,   469,   469,
+     469,   469,   469,   469,   469,   469,   469,   469,   470,   470,
+     471,   471,   472,   473,   473,   473,   473,   473,   474,   474,
+     474,   474
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
@@ -1599,21 +1603,22 @@ static const yytype_uint8 yyr2[] =
        1,     1,     1,     1,     3,     1,     1,     1,     2,     2,
        0,     2,     0,     4,     0,     6,     0,     3,     0,     5,
        3,     2,     3,     0,     0,     0,     0,     0,     1,     2,
-       2,     3,     2,     3,     3,     4,     2,     2,     3,     3,
-       4,     1,     2,     1,     2,     1,     3,     1,     4,     1,
-       2,     1,     2,     1,     2,     1,     4,     2,     0,     5,
-       0,     6,     4,     4,     0,     0,    10,     1,     0,     4,
-       1,     1,     1,     1,     1,     2,     1,     3,     1,     4,
-       3,     4,     6,     5,     5,     2,     2,     1,     2,     2,
-       2,     2,     2,     2,     2,     2,     1,     1,     4,     1,
-       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
-       3,     3,     3,     3,     1,     3,     3,     1,     3,     1,
-       3,     1,     3,     1,     3,     1,     3,     1,     0,     0,
-       6,     0,     0,     7,     1,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     1,     0,     1,     2,
-       7,     2,     2,     7,     6,     2,     3,     2,     3,     2,
-       3,     3,     3,     3,     2,     3,     0,     1,     0,     1,
-       1,     1,     1,     1,     1,     1,     1,     1,     4,     4
+       1,     2,     1,     2,     2,     3,     2,     3,     2,     2,
+       3,     3,     4,     1,     2,     1,     2,     1,     3,     1,
+       4,     1,     2,     1,     2,     1,     2,     1,     4,     2,
+       0,     5,     0,     6,     4,     4,     0,     0,    10,     1,
+       0,     4,     1,     1,     1,     1,     1,     2,     1,     3,
+       1,     4,     3,     4,     6,     5,     5,     2,     2,     1,
+       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
+       4,     1,     3,     3,     3,     1,     3,     3,     1,     3,
+       3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
+       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
+       0,     0,     6,     0,     0,     7,     1,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     1,     0,
+       1,     2,     7,     2,     2,     7,     6,     2,     3,     2,
+       3,     2,     3,     3,     3,     3,     2,     3,     0,     1,
+       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       4,     4
 };
 
 /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
@@ -1629,32 +1634,32 @@ static const yytype_uint16 yydefact[] =
      366,   363,   348,   347,   341,   340,   352,   353,   354,   355,
      356,   350,   351,   349,   357,   358,   361,   362,   359,   360,
      426,   426,   426,   426,   426,   426,   426,   426,   426,   426,
-     344,   710,   711,   715,   345,   712,   713,   716,     0,     0,
-       4,     7,     8,   450,     9,    10,   135,    45,   706,    11,
+     344,   712,   713,   717,   345,   714,   715,   718,     0,     0,
+       4,     7,     8,   450,     9,    10,   135,    45,   708,    11,
      265,   267,     0,   405,   282,   282,   282,   282,   282,   282,
      282,   282,   426,   282,   405,   405,   426,   398,   426,     0,
-     426,   131,   282,   714,    22,   426,   454,   455,   456,   457,
-     460,   461,   282,   285,   282,   282,   278,   426,   717,   426,
-     426,   715,     0,   547,   203,   556,     0,     0,     0,   688,
-       0,     0,     0,     0,   203,   593,     0,   203,   203,   203,
+     426,   131,   282,   716,    22,   426,   454,   455,   456,   457,
+     460,   461,   282,   285,   282,   282,   278,   426,   719,   426,
+     426,   717,     0,   547,   203,   556,     0,     0,     0,   690,
+       0,     0,     0,     0,   203,   595,     0,   203,   203,   203,
      203,   203,   203,   282,   203,   203,     0,    44,     0,     0,
-       0,     0,     0,     0,   550,   203,   171,   167,   170,   614,
-     604,   174,   186,   209,   196,   282,   211,   215,   218,   221,
-     226,   229,   231,   233,   235,   238,   241,   248,   260,   595,
-     546,     0,     0,   581,   536,   537,   538,   539,     0,     0,
+       0,     0,     0,     0,   550,   203,   171,   167,   170,   616,
+     606,   174,   186,   209,   196,   282,   211,   215,   218,   221,
+     226,   229,   231,   233,   235,   238,   241,   248,   260,   597,
+     546,     0,     0,   583,   536,   537,   538,   539,     0,     0,
      540,   203,   541,     0,   542,   168,     0,   543,   545,   166,
-       0,   529,     0,   591,     0,   563,   516,     0,     0,     0,
+       0,   529,     0,   593,     0,   563,   516,     0,     0,     0,
      525,     0,   526,   505,   524,   521,   522,   517,   518,   519,
        0,     0,   523,   530,     0,     0,   527,   504,     0,   371,
      373,   372,   383,   385,   384,   386,   387,   388,   389,   390,
-     391,   392,     1,     5,   282,     0,   133,   138,   426,   707,
+     391,   392,     1,     5,   282,     0,   133,   138,   426,   709,
        6,   426,   406,   402,   376,   378,   375,   377,   380,   379,
      381,   382,   396,   374,   403,   404,     0,   282,   282,   394,
      282,   282,     0,   395,   451,   393,   458,   462,   282,   167,
      170,     0,   426,   476,     0,   166,   426,     0,   284,   426,
-       0,   275,   282,   706,    18,    20,     0,   426,   282,    30,
+       0,   275,   282,   708,    18,    20,     0,   426,   282,    30,
      470,   209,   264,   552,     0,   203,   203,   203,   203,     0,
-     697,   699,   704,     0,   563,     0,     0,     0,   189,   194,
+     699,   701,   706,     0,   563,     0,     0,     0,   189,   194,
      193,   192,   191,   190,     0,   282,   187,   188,   203,   203,
        0,     0,     0,     0,     0,   550,     0,   282,   549,   501,
      203,   492,   493,   494,   495,     0,   496,   497,   203,   499,
@@ -1662,91 +1667,91 @@ static const yytype_uint16 yydefact[] =
      203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
      204,   201,   203,   203,   203,   203,   203,   203,   203,   203,
      203,   203,   203,   203,   203,   203,   203,   203,   236,   245,
-     239,   594,   203,   695,    41,     0,   564,   582,   597,   692,
-     615,     0,   548,   203,     0,     0,     0,   592,    42,   506,
-     510,   583,   426,   520,   532,   533,     0,     0,     0,    43,
+     239,   596,   203,   697,    41,     0,   564,   584,   599,   694,
+     617,     0,   548,   203,     0,     0,     0,   594,    42,   506,
+     510,   585,   426,   520,   532,   533,     0,     0,     0,    43,
       24,   203,   470,   426,   426,   282,   268,   132,     0,   400,
-       0,   426,     0,   426,     0,   282,     0,   718,   282,   203,
-       0,   478,   477,   479,   719,   282,   281,   282,   280,   276,
+       0,   426,     0,   426,     0,   282,     0,   720,   282,   203,
+       0,   478,   477,   479,   721,   282,   281,   282,   280,   276,
      426,     0,   282,     0,   426,   282,    21,   467,     0,     0,
-     452,   468,   282,     0,   557,     0,   600,     0,   263,     0,
-     696,   705,   563,     0,   169,   203,   544,   282,     0,     0,
-       0,   700,   701,   702,   703,   698,   551,   203,   558,     0,
-     691,   426,   561,   689,     0,     0,   176,     0,   184,     0,
+     452,   468,   282,     0,   557,     0,   602,     0,   263,     0,
+     698,   707,   563,     0,   169,   203,   544,   282,     0,     0,
+       0,   702,   703,   704,   705,   700,   551,   203,   558,     0,
+     693,   426,   561,   691,     0,     0,   176,     0,   184,     0,
        0,     0,   249,   250,   251,   252,   253,   254,   255,   256,
      257,   258,   259,   195,     0,   212,   213,   214,   217,   216,
      219,   220,   222,   223,   224,   225,   227,   228,   230,   232,
-     234,   203,     0,   203,   203,   261,   577,   717,   581,     0,
-     426,   562,   598,     0,     0,   528,   514,   282,   584,   531,
-       0,     0,    26,     0,   568,   203,   589,   134,   426,   203,
-     563,   282,   269,   399,   282,   416,     0,   424,   419,     0,
-     425,     0,   441,   444,   438,   440,   397,   484,     0,   470,
-     480,   203,     0,   286,   274,   288,   273,   282,   282,   282,
-     706,    17,    32,   203,   470,   282,    19,   453,   463,   465,
-      38,   472,   426,   471,   475,   553,   596,     0,   602,   203,
-     173,   203,   210,   426,     0,   282,   502,   554,     0,   560,
-     576,     0,   605,   203,   177,   175,   282,   282,   203,   203,
-     202,   237,   243,     0,   240,   578,   579,   203,   203,   203,
-     603,   203,   426,   203,   426,    80,    28,   569,   572,   203,
-     203,   570,   203,   590,   137,     0,   271,   282,   401,   422,
-     565,   408,   423,   565,   411,   282,   443,   282,     0,   485,
-     488,   282,     0,   486,     0,   470,   426,   107,   287,   203,
-     282,   282,     0,    34,     0,   282,     0,    82,   469,   282,
-     481,   203,     0,   203,   587,   708,   585,     0,     0,     0,
-     559,   203,   203,   185,   179,   180,   282,   206,   282,   208,
-     203,   246,   580,   599,     0,   282,   203,   203,   203,   203,
-     203,   203,   203,   203,     0,   167,   170,   186,   209,   636,
-     215,   218,   221,   226,   229,   231,   233,   235,   238,     0,
-     608,   607,   168,   618,   627,   637,   639,   643,   646,   649,
-     654,   657,   659,   661,   663,   665,   667,   674,   610,   166,
-       0,    25,     0,    97,   101,    99,   124,   125,   126,   127,
-     128,   129,   130,    27,    80,    84,     0,    86,    85,     0,
-      89,     0,   426,   426,    87,     0,    88,   316,     0,    80,
-     573,   574,   203,   571,    23,   282,   290,   426,   414,   565,
-     426,   415,   565,   437,   442,   203,     0,     0,   489,   487,
-     490,     0,   282,     0,   106,   203,   203,     0,   292,   277,
-     203,     0,   298,     0,   203,     0,   426,    82,    36,     0,
-     464,   466,    39,    82,    90,    92,    91,    95,    93,    94,
-     473,   446,     0,   282,   481,   447,   482,   601,   511,   708,
-     203,     0,     0,   178,   555,     0,   608,     0,     0,   244,
-     203,   694,     0,     0,   189,   194,   193,   192,   191,   190,
-     187,   188,   203,   203,   203,   181,   182,     0,   203,   203,
+     234,   203,     0,   203,   203,   261,   579,   719,   583,     0,
+     426,   562,   600,     0,     0,   528,   514,   282,   586,   531,
+       0,     0,    26,     0,   572,   203,   591,     0,     0,   134,
+     426,   426,   563,   282,   269,   399,   282,   416,     0,   424,
+     419,     0,   425,     0,   441,   444,   438,   440,   397,   484,
+       0,   470,   480,   203,     0,   286,   274,   288,   273,   282,
+     282,   282,   708,    17,    32,   203,   470,   282,    19,   453,
+     463,   465,    38,   472,   426,   471,   475,   553,   598,     0,
+     604,   203,   173,   203,   210,   426,     0,   282,   502,   554,
+       0,   560,   578,     0,   607,   203,   177,   175,   282,   282,
+     203,   203,   202,   237,   243,     0,   240,   580,   581,   203,
+     203,   203,   605,   203,   426,   203,   426,    80,    28,   573,
+     574,     0,   576,     0,   569,   592,   571,   137,     0,   271,
+     282,   401,   422,   565,   408,   423,   565,   411,   282,   443,
+     282,     0,   485,   488,   282,     0,   486,     0,   470,   426,
+     107,   287,   203,   282,   282,     0,    34,     0,   282,     0,
+      82,   469,   282,   481,   203,     0,   203,   589,   710,   587,
+       0,     0,     0,   559,   203,   203,   185,   179,   180,   282,
+     206,   282,   208,   203,   246,   582,   601,     0,   282,   203,
+     203,   203,   203,   203,   203,   203,   203,     0,   167,   170,
+     186,   209,   638,   215,   218,   221,   226,   229,   231,   233,
+     235,   238,     0,   610,   609,   168,   620,   629,   639,   641,
+     645,   648,   651,   656,   659,   661,   663,   665,   667,   669,
+     676,   612,   166,     0,    25,     0,    97,   101,    99,   124,
+     125,   126,   127,   128,   129,   130,    27,    80,    84,     0,
+      86,    85,     0,    89,     0,   426,   426,    87,     0,    88,
+     316,     0,    80,   575,   577,    23,   282,   290,   426,   414,
+     565,   426,   415,   565,   437,   442,   203,     0,     0,   489,
+     487,   490,     0,   282,     0,   106,   203,   203,     0,   292,
+     277,   203,     0,   298,     0,   203,     0,   426,    82,    36,
+       0,   464,   466,    39,    82,    90,    92,    91,    95,    93,
+      94,   473,   446,     0,   282,   481,   447,   482,   603,   511,
+     710,   203,     0,     0,   178,   555,     0,   610,     0,     0,
+     244,   203,   696,     0,     0,   189,   194,   193,   192,   191,
+     190,   187,   188,   203,   203,   203,   181,   182,     0,   203,
      203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
      203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
-     203,   203,   203,   203,   203,   203,   671,   203,   515,     0,
-     509,   105,   110,   103,   114,   706,    81,    96,   100,   108,
-     310,   313,   309,     0,   314,   312,    29,   575,   203,     0,
+     203,   203,   203,   203,   203,   203,   203,   673,   203,   515,
+       0,   509,   105,   110,   103,   114,   708,    81,    96,   100,
+     108,   310,   313,   309,     0,   314,   312,    29,   203,     0,
      428,   426,   426,   427,   426,   426,   426,   445,   282,   483,
      491,   289,   279,   302,     0,     0,   301,   295,   296,   299,
-     297,   290,    14,    33,    35,    82,    31,   706,    83,   470,
-     474,   448,   449,   203,     0,   586,   183,     0,   199,     0,
-     563,   205,   207,   247,   693,   169,   203,     0,   176,     0,
-       0,     0,     0,   675,   676,   677,   678,   679,   680,   681,
-     682,   683,   684,   685,   212,   213,   214,   217,   216,   219,
+     297,   290,    14,    33,    35,    82,    31,   708,    83,   470,
+     474,   448,   449,   203,     0,   588,   183,     0,   199,     0,
+     563,   205,   207,   247,   695,   169,   203,     0,   176,     0,
+       0,     0,     0,   677,   678,   679,   680,   681,   682,   683,
+     684,   685,   686,   687,   212,   213,   214,   217,   216,   219,
      220,   222,   223,   224,   225,   227,   228,   230,   232,   234,
-     664,     0,   203,   666,   203,   508,   109,     0,   119,   120,
-     121,   122,   123,   706,   111,   426,   114,     0,     0,   142,
-     143,   102,   152,   706,   140,   141,     0,    49,     0,     0,
+     666,     0,   203,   668,   203,   508,   109,     0,   119,   120,
+     121,   122,   123,   708,   111,   426,   114,     0,     0,   142,
+     143,   102,   152,   708,   140,   141,     0,    49,     0,     0,
       59,    60,    70,    68,   319,     0,   318,    57,    77,     0,
-      64,    67,     0,   706,    69,   162,   290,   282,   426,     0,
+      64,    67,     0,   708,    69,   162,   290,   282,   426,     0,
      282,   429,   417,   426,   420,   426,   439,   293,   203,   300,
-     706,    37,     0,   282,   512,   588,   282,   203,     0,   690,
-     687,   210,   282,   177,   175,   282,   282,   669,     0,   609,
+     708,    37,     0,   282,   512,   590,   282,   203,     0,   692,
+     689,   210,   282,   177,   175,   282,   282,   671,     0,   611,
      104,   114,    98,   117,   113,   118,   116,   115,     0,   146,
-       0,     0,     0,     0,   139,     0,     0,   155,   164,   706,
+       0,     0,     0,     0,   139,     0,     0,   155,   164,   708,
      154,     0,     0,    67,     0,    73,     0,    55,    54,     0,
       62,    61,    63,     0,     0,     0,     0,     0,     0,   282,
-     706,   163,     0,   270,   282,   431,   282,   282,   426,   434,
+     708,   163,     0,   270,   282,   431,   282,   282,   426,   434,
        0,   409,     0,   412,   294,   303,     0,    40,   282,     0,
-     200,     0,   197,   686,   564,     0,   179,   180,   203,   672,
+     200,     0,   197,   688,   564,     0,   179,   180,   203,   674,
      112,   147,   144,   150,     0,   151,   148,   149,   153,     0,
      158,     0,     0,     0,     0,   282,     0,    79,    78,     0,
       74,     0,    51,    46,    47,    56,    67,    58,    71,     0,
       75,    76,     0,     0,   317,   282,   282,   291,   203,   282,
        0,   432,   282,   418,     0,   421,     0,    15,   513,   198,
-     606,   178,   670,   203,   145,   159,   156,     0,   160,   161,
+     608,   178,   672,   203,   145,   159,   156,     0,   160,   161,
      165,   311,    53,    50,     0,     0,    72,    48,    65,   315,
-     272,   435,   426,   430,   203,   407,   413,   673,   157,    66,
+     272,   435,   426,   430,   203,   407,   413,   675,   157,    66,
       52,   433,   436,   410
 };
 
@@ -1754,521 +1759,472 @@ static const yytype_uint16 yydefact[] =
 static const yytype_int16 yydefgoto[] =
 {
       -1,    88,    89,    90,    91,    92,   140,   313,   314,    93,
-     665,   809,   315,   847,   975,    94,   707,   977,   950,    96,
+     667,   812,   315,   848,   975,    94,   710,   977,   950,    96,
     1064,  1202,  1147,  1131,  1203,  1243,  1139,  1066,  1067,  1068,
-    1143,  1069,  1070,  1206,  1072,  1199,   793,   852,   794,   853,
-     795,   854,   934,   855,   798,   856,   935,   932,   933,   833,
-     800,   801,  1043,  1044,  1045,  1114,  1046,   802,   803,    97,
-     267,   443,   268,   580,    98,  1051,  1183,  1184,  1053,  1128,
-    1150,  1129,   181,   334,   182,   517,   183,   987,   184,   749,
-     534,   185,   533,   650,   186,   187,   188,   189,   190,   191,
-     192,   193,   194,   195,   551,   196,   554,   197,   552,   730,
-     553,   880,   198,   227,   489,   323,   431,   100,   677,   815,
-     605,   606,   609,   101,   309,   102,   265,   134,   135,   607,
-     608,   949,   839,   840,   841,   842,   964,   103,   804,   858,
-    1056,   806,   807,   859,  1075,   943,  1073,   104,   105,   106,
+    1143,  1069,  1070,  1206,  1072,  1199,   796,   853,   797,   854,
+     798,   855,   935,   856,   801,   857,   936,   933,   934,   834,
+     803,   804,  1043,  1044,  1045,  1114,  1046,   805,   806,    97,
+     267,   443,   268,   582,    98,  1051,  1183,  1184,  1053,  1128,
+    1150,  1129,   181,   334,   182,   517,   183,   987,   184,   752,
+     534,   185,   533,   652,   186,   187,   188,   189,   190,   191,
+     192,   193,   194,   195,   551,   196,   554,   197,   552,   733,
+     553,   881,   198,   227,   489,   323,   431,   100,   680,   816,
+     607,   608,   611,   101,   309,   102,   265,   134,   135,   609,
+     610,   949,   840,   841,   842,   843,   964,   103,   807,   859,
+    1056,   809,   810,   860,  1075,   944,  1073,   104,   105,   106,
      107,   108,   109,   110,   111,   112,   113,   114,   115,   303,
-     432,   448,   117,   273,  1263,   118,   819,  1224,   822,  1226,
-     680,  1160,   683,  1162,   119,   952,   953,  1157,  1158,   120,
-     688,   591,   592,   863,   137,   479,   129,   130,   122,   617,
-     618,   480,   481,   482,   709,   623,   336,   827,   865,   463,
-     358,   359,   228,   248,   229,   230,   360,   983,  1169,   232,
-     661,   233,   234,   436,   235,   236,   202,   417,   361,   356,
-     362,   483,   719,   363,   324,   638,   364,   207,   365,   561,
-     817,  1082,   241,   577,   512,   416,   209,   578,   715,   716,
-     579,   366,   210,   211,   367,   658,   627,   368,   244,   369,
-     373,   722,   760,   929,   761,   215,   763,   764,   765,   766,
-     767,   768,   769,   770,   771,   772,   773,   774,   775,   776,
-     777,  1031,  1178,  1032,  1233,   778,  1174,   370,   371,   217,
-     372,   270,   871,   305,   220,   125
+     432,   448,   117,   273,  1263,   118,   820,  1224,   823,  1226,
+     683,  1160,   686,  1162,   119,   952,   953,  1157,  1158,   120,
+     691,   593,   594,   864,   137,   479,   129,   130,   122,   619,
+     620,   480,   481,   482,   712,   625,   336,   828,   866,   463,
+     576,   359,   228,   248,   229,   230,   360,   983,  1169,   232,
+     663,   233,   234,   436,   235,   236,   202,   417,   361,   356,
+     362,   483,   722,   363,   324,   640,   364,   207,   365,   561,
+     818,  1082,   241,   577,   578,   579,   512,   416,   209,   580,
+     718,   719,   581,   366,   210,   211,   367,   660,   629,   368,
+     244,   369,   373,   725,   763,   930,   764,   215,   766,   767,
+     768,   769,   770,   771,   772,   773,   774,   775,   776,   777,
+     778,   779,   780,  1031,  1178,  1032,  1233,   781,  1174,   370,
+     371,   217,   372,   270,   872,   305,   220,   125
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -1033
+#define YYPACT_NINF -1051
 static const yytype_int16 yypact[] =
 {
-    2259, -1033, -1033,   357,    60,  5469, -1033,  6624, -1033,   677,
-    1966,  3655,  3655, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033,   805, -1033, -1033, -1033, -1033,   118,  2441,
-   -1033, -1033, -1033,   331, -1033, -1033,    87, -1033,   134, -1033,
-   -1033, -1033,   101,  6210, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,  6210,  6210,   151,    57, -1033,   666,
-   -1033, -1033,   677, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-     357, -1033,  1900, -1033,   185, -1033,   151, -1033, -1033, -1033,
-    5469, -1033,   210, -1033,  5716, -1033,   219,   230,   293, -1033,
-     300,   677,   348,   362,   879, -1033,  2827,  5716,  5716,  5716,
-    5716,  5716,  5716, -1033,  5748,  5748,   388, -1033,   395,   371,
-     456,   463,   487,   417,   415,  4875, -1033,   500,   532, -1033,
-     543, -1033,   652,  1193, -1033, -1033, -1033,   668,   145,   254,
-     678,   474,   571,   569,   585,   579,    50, -1033, -1033,    55,
-   -1033,  3458,   549,   560, -1033, -1033, -1033, -1033,   649,  3217,
-   -1033,  4875, -1033,  3458, -1033,   501,  3458, -1033, -1033,   699,
-     702, -1033,   690, -1033,  3022,   543,   704,   205,   656,  3611,
-   -1033,  3655, -1033, -1033, -1033,  5934, -1033, -1033, -1033, -1033,
-     740,   762, -1033, -1033,  3655,  3458, -1033, -1033,   669, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,   759,   765, -1033, -1033,  6486, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033,   773,   995, -1033, -1033,
-     677,   677,    14, -1033,   331, -1033, -1033, -1033,  5310, -1033,
-   -1033,    94,  6624,   414,   777, -1033, -1033,   787, -1033, -1033,
-     813,   827,   995,   134, -1033,   548,   798, -1033,   677, -1033,
-     263, -1033, -1033, -1033,   814,  5716,  5716,  5716,  1299,   842,
-   -1033, -1033, -1033,   346,   844,   593,   862,   867, -1033, -1033,
-   -1033, -1033, -1033, -1033,   851,  5310, -1033, -1033,  5716,  5716,
-     876,   926,   929,   938,   960,   415,   529,  5337, -1033, -1033,
-    4875, -1033, -1033, -1033, -1033,   883, -1033, -1033,  4875, -1033,
-    4875, -1033, -1033, -1033,  5641,  5716, -1033, -1033,    85,  5716,
-    5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,
-   -1033, -1033,  5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,
-    5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716, -1033,   892,
-   -1033, -1033,  5716, -1033, -1033,  2632, -1033, -1033,   930, -1033,
-   -1033,   958, -1033,  5716,   618,   972,   998, -1033, -1033, -1033,
-   -1033, -1033,   151,  5934, -1033, -1033,  3655,  3261,   999, -1033,
-   -1033,  5716,   368,  3808,  4959,   995, -1033,   384,   944,  1025,
-    1030,  1033,  1036,  1033,   677,  1038,   475, -1033, -1033,  5652,
-    1039,   567, -1033,   659, -1033,   995, -1033,   884, -1033, -1033,
-   -1033,   973,  1049,  1041, -1033,   995,   548, -1033,   677,  1057,
-   -1033,  1062,   677,  1064, -1033,   483,  1063,   562,  1063,  1072,
-   -1033, -1033,   844,  1066, -1033,  5364, -1033, -1033,  1071,  1079,
-     577, -1033, -1033, -1033, -1033, -1033, -1033,  5716, -1033,  1076,
-   -1033,  3808, -1033, -1033,  1093,  1081, -1033,   638, -1033,   311,
-     677,   677, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,   631, -1033, -1033, -1033,   668,   668,
-     145,   145,   254,   254,   254,   254,   678,   678,   474,   571,
-     569,  5716,  1086,  5716,  5716, -1033, -1033,  2174, -1033,  3414,
-    3998, -1033, -1033,  1087,   692, -1033, -1033,   995, -1033, -1033,
-    1100,  1101, -1033,  1102, -1033,  4378, -1033, -1033,  4188,  4422,
-     844, -1033,  1106, -1033, -1033,  1110,  1113, -1033,  1115,  1114,
-   -1033,   741, -1033,  1121, -1033, -1033, -1033, -1033,  1111,   626,
-     659,  5684,  1123, -1033, -1033, -1033, -1033,  1116, -1033, -1033,
-     310, -1033, -1033,  5716,   502,   995, -1033, -1033,  1128, -1033,
-   -1033,  1145,  6624, -1033, -1033, -1033, -1033,  1127, -1033,  1299,
-   -1033,  5385, -1033, -1033,  1134, -1033, -1033, -1033,  1133, -1033,
-   -1033,  1136, -1033,  5716, -1033, -1033, -1033, -1033,  5775,  5819,
-   -1033,   585, -1033,   750,   579, -1033, -1033,  4529,  4875,  5716,
-   -1033,  5853, -1033,  5716, -1033,  1496, -1033, -1033, -1033,  4573,
-    4680, -1033,  4724, -1033, -1033,  1131, -1033, -1033, -1033, -1033,
-   -1033,  1138, -1033, -1033,  1142, -1033,   677, -1033,   677, -1033,
-   -1033,   132,  1144, -1033,  1150,    98, -1033,  1088, -1033,  3549,
-   -1033, -1033,  1152, -1033,  1147, -1033,   325,  1496, -1033,   677,
-     925,  4875,  1164,  5385, -1033,  1165, -1033,  1169,  1173,  1182,
-   -1033,  5716,  5853, -1033, -1033, -1033,  5310, -1033,  5310, -1033,
-    5716, -1033, -1033, -1033,   698,  5310,  5716,  5716,  5716,  5716,
-    5716,  5716,  5748,  5748,  1139,   712,   732,   739,  1489, -1033,
-     983,   783,   802,   761,   909,  1176,  1167,  1168,  1151,   107,
-    1185, -1033,    45, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,   758,
-     775, -1033,  1037, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,  1496, -1033,  1146, -1033, -1033,  1148,
-   -1033,  1149, -1033, -1033, -1033,  1153, -1033,  1313,  1155,  1496,
-   -1033, -1033,  4831, -1033, -1033, -1033, -1033,  6348, -1033, -1033,
-    6348, -1033, -1033, -1033, -1033,  5716,   966,  1200, -1033, -1033,
-   -1033,  1202,   884,  1211, -1033,  3549,  5716,   677, -1033, -1033,
-    3549,   519, -1033,  1225,  3549,  1157, -1033,  1496, -1033,  1208,
-   -1033, -1033, -1033,  1496, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033,   331,  1226, -1033,  1007, -1033,   659, -1033, -1033,  1165,
-    3701,  1244,   677, -1033, -1033,   782,  1240,  1241,  1242, -1033,
-    5716,  1250,   803,  1245,   804,   822,   824,   848,   855,   857,
-     864,   880,  5716,  5673,  5716,   896,   908,   109,  5716,  5716,
-    5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,
-    5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,  5716,
-    5716,  5716,  5716,  5716,  5716,  5716,  1252,  5716, -1033,  1254,
-    1259, -1033,  1090,  1238,    11,   301, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033,   453, -1033, -1033, -1033, -1033,  3549,   376,
-   -1033,   151,  5121, -1033,  6348,  5121,  6348, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,   993,  1256, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033,  1496, -1033,   134, -1033,   233,
-   -1033, -1033, -1033,  5705,  1264, -1033, -1033,   258, -1033,  1267,
-     844,  1134,  1134, -1033, -1033,   913,  5364,  1258,   915,   921,
-     358,   677,   677, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,   933,   940,   941,  1188,  1196,   874,
-     898,    84,   363,   455,   530,    91,   552,   106,   165,   477,
-     585,  1265,  5716,   579,  5853, -1033,   501,  1037, -1033, -1033,
-   -1033, -1033, -1033,   399, -1033,  6072,    11,   164,   164, -1033,
-   -1033, -1033,   317,   442, -1033, -1033,    63, -1033,   982,    90,
-   -1033, -1033, -1033, -1033, -1033,  1263, -1033,    43, -1033,  1008,
-   -1033,    76,  1274,   134, -1033,    63, -1033, -1033, -1033,  1270,
-     133, -1033, -1033,  5121, -1033,  5121, -1033, -1033,  5289, -1033,
-     467, -1033,  1209,   240, -1033, -1033, -1033,  5716,   677, -1033,
-    1105,   949, -1033,   951,   959, -1033, -1033, -1033,  1003, -1033,
-   -1033,    11, -1033, -1033, -1033, -1033, -1033, -1033,   498,   317,
-     793,   677,   677,   164, -1033,    63,    63, -1033,   416,   491,
-   -1033,  1279,  1004,   581,    90,   421,    58, -1033, -1033,   982,
-   -1033, -1033, -1033,   982,    22,   677,   677,  1282,   982, -1033,
-     134,  1284,   612, -1033,   995, -1033, -1033,  1285, -1033,  1286,
-    1287, -1033,  1289, -1033, -1033, -1033,  1219, -1033,   587,  1288,
-   -1033,   447, -1033, -1033, -1033,  1290,   971,   984,  5716, -1033,
-   -1033, -1033, -1033,   317,  1291,   501, -1033, -1033,   317,   639,
-     416,   850,   677,   677,    63, -1033,  1118, -1033, -1033,   982,
-   -1033,   581,  1272, -1033,   421, -1033,   421, -1033, -1033,  1293,
-   -1033, -1033,  1118,  1297, -1033, -1033, -1033, -1033,  5716,   133,
-    1298, -1033, -1033, -1033,  1304, -1033,  1306, -1033, -1033, -1033,
-   -1033,   986, -1033,  5716, -1033, -1033, -1033,  1300, -1033, -1033,
-     416, -1033, -1033, -1033,  1311,    58, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,  5716, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033
+    1949, -1051, -1051,   327,    61,  5380, -1051,  6535, -1051,  1053,
+    3029,  3668,  3668, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051,    39, -1051, -1051, -1051, -1051,   103,  2146,
+   -1051, -1051, -1051,   314, -1051, -1051,   193, -1051,    75, -1051,
+   -1051, -1051,   256,  6121, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,  6121,  6121,   271,   214, -1051,   974,
+   -1051, -1051,  1053, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+     327, -1051,  5272, -1051,   305, -1051,   271, -1051, -1051, -1051,
+    5380, -1051,   335, -1051,  5627, -1051,   365,   376,   381, -1051,
+     414,  1053,   426,   432,  5100, -1051,  2532,  5627,  5627,  5627,
+    5627,  5627,  5627, -1051,  5659,  5659,   457, -1051,   459,   479,
+     492,   502,   507,   515,   468,  4686, -1051,   566,   575, -1051,
+     624, -1051,   981,  1143, -1051, -1051, -1051,  1061,   392,   486,
+     754,   625,   581,   609,   617,   565,   117, -1051, -1051,   178,
+   -1051,  3456,   567,   572, -1051, -1051, -1051, -1051,   663,  3136,
+   -1051,  4686, -1051,  3456, -1051,   495,  3456, -1051, -1051,   678,
+     684, -1051,   671, -1051,  2727,   624,   694,   196,   627,  3562,
+   -1051,  3668, -1051, -1051, -1051,  5845, -1051, -1051, -1051, -1051,
+     711,   723, -1051, -1051,  3668,  3456, -1051, -1051,   645, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,   718,   736, -1051, -1051,  6397, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051,   747,   803, -1051, -1051,
+    1053,  1053,   160, -1051,   314, -1051, -1051, -1051,  5148, -1051,
+   -1051,   148,  6535,   317,   780, -1051, -1051,   792, -1051, -1051,
+     812,   816,   803,    75, -1051,   352,   827, -1051,  1053, -1051,
+      47, -1051, -1051, -1051,   831,  5627,  5627,  5627,  5121,   838,
+   -1051, -1051, -1051,   238,   835,   398,   836,   841, -1051, -1051,
+   -1051, -1051, -1051, -1051,   844,  5148, -1051, -1051,  5627,  5627,
+     859,   867,   881,   883,   902,   468,   748,  5175, -1051, -1051,
+    4686, -1051, -1051, -1051, -1051,   907, -1051, -1051,  4686, -1051,
+    4686, -1051, -1051, -1051,  5552,  5627, -1051, -1051,    60,  5627,
+    5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,
+   -1051, -1051,  5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,
+    5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627, -1051,   911,
+   -1051, -1051,  5627, -1051, -1051,  2337, -1051, -1051,   936, -1051,
+   -1051,   940, -1051,  5627,   629,   947,   962, -1051, -1051, -1051,
+   -1051, -1051,   271,  5845, -1051, -1051,  3668,  3242,   984, -1051,
+   -1051,  5627,   402,  3775,  4770,   803, -1051,   564,   912,   992,
+    1000,  1006,  1014,  1006,  1053,  1016,   282, -1051, -1051,  5563,
+    1025,   406, -1051,   433, -1051,   803, -1051,   768, -1051, -1051,
+   -1051,   969,  1024,  1044, -1051,   803,   352, -1051,  1053,  1045,
+   -1051,  1058,  1053,  1054, -1051,   344,  1065,   346,  1065,  1064,
+   -1051, -1051,   835,  1084, -1051,  5228, -1051, -1051,  1088,  1068,
+     537, -1051, -1051, -1051, -1051, -1051, -1051,  5627, -1051,  1091,
+   -1051,  3775, -1051, -1051,  1108,  1100, -1051,   582, -1051,   112,
+    1053,  1053, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,   720, -1051, -1051, -1051,  1061,  1061,
+     392,   392,   486,   486,   486,   486,   754,   754,   625,   581,
+     609,  5627,  1113,  5627,  5627, -1051, -1051,  2922, -1051,  3349,
+    3965, -1051, -1051,  1118,   598, -1051, -1051,   803, -1051, -1051,
+    1120,  1122, -1051,  1133, -1051,  4535, -1051,    74,    76, -1051,
+    4155,  4345,   835, -1051,  1137, -1051, -1051,  1127,  1142, -1051,
+    1147,  1152, -1051,   892, -1051,  1151, -1051, -1051, -1051, -1051,
+    1145,   491,   433,  5595,  1158, -1051, -1051, -1051, -1051,  1154,
+   -1051, -1051,   105, -1051, -1051,  5627,   504,   803, -1051, -1051,
+    1164, -1051, -1051,  1181,  6535, -1051, -1051, -1051, -1051,  1163,
+   -1051,  5121, -1051,  5299, -1051, -1051,  1170, -1051, -1051, -1051,
+    1168, -1051, -1051,  1172, -1051,  5627, -1051, -1051, -1051, -1051,
+    5686,  5730, -1051,   617, -1051,   918,   565, -1051, -1051,  4579,
+    4686,  5627, -1051,  5764, -1051,  5627, -1051,  1655, -1051, -1051,
+   -1051,  1177, -1051,  1178, -1051, -1051, -1051, -1051,  1188, -1051,
+   -1051, -1051, -1051, -1051,  1194, -1051, -1051,  1196, -1051,  1053,
+   -1051,  1053, -1051, -1051,   129,  1192, -1051,  1203,    73, -1051,
+    1166, -1051,  4635, -1051, -1051,  1209, -1051,  1197, -1051,   600,
+    1655, -1051,  1053,   794,  4686,  1222,  5299, -1051,  1227, -1051,
+    1228,  1226,  1242, -1051,  5627,  5764, -1051, -1051, -1051,  5148,
+   -1051,  5148, -1051,  5627, -1051, -1051, -1051,   630,  5148,  5627,
+    5627,  5627,  5627,  5627,  5627,  5659,  5659,  1243,   708,   721,
+    1029,  1195, -1051,  1069,   921,   914,   761,   924,  1237,  1229,
+    1230,  1213,   136,  1247, -1051,    46, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051,   727,   757, -1051,  1086, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051,  1655, -1051,  1182,
+   -1051, -1051,  1185, -1051,  1186, -1051, -1051, -1051,  1187, -1051,
+    1512,  1189,  1655, -1051, -1051, -1051, -1051, -1051,  6259, -1051,
+   -1051,  6259, -1051, -1051, -1051, -1051,  5627,  1071,  1254, -1051,
+   -1051, -1051,  1258,   768,  1266, -1051,  4635,  5627,  1053, -1051,
+   -1051,  4635,   673, -1051,  1263,  4635,  1199, -1051,  1655, -1051,
+    1262, -1051, -1051, -1051,  1655, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051,   314,  1264, -1051,  1038, -1051,   433, -1051, -1051,
+    1227,  5201,  1271,  1053, -1051, -1051,   796,  1267,  1268,  1269,
+   -1051,  5627,  1277,   804,  1274,   810,   819,   825,   846,   855,
+     858,   861,   866,  5627,  5584,  5627,   879,   886,    93,  5627,
+    5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,
+    5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,  5627,
+    5627,  5627,  5627,  5627,  5627,  5627,  5627,  1278,  5627, -1051,
+    1275,  1283, -1051,  1114,  1270,   358,   108, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,   588, -1051, -1051, -1051,  4635,   246,
+   -1051,   271,  4932, -1051,  6259,  4932,  6259, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,  1107,  1281, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051,  1655, -1051,    75, -1051,    58,
+   -1051, -1051, -1051,  5616,  1289, -1051, -1051,   109, -1051,  1293,
+     835,  1170,  1170, -1051, -1051,   889,  5228,  1291,   900,   906,
+     151,  1053,  1053, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,   950,   952,   960,   934,  1002,   481,
+     702,    49,   361,   383,   410,   732,   837,    70,   205,   389,
+     617,  1292,  5627,   565,  5764, -1051,   495,  1086, -1051, -1051,
+   -1051, -1051, -1051,   448, -1051,  5983,   358,   174,   174, -1051,
+   -1051, -1051,   194,   510, -1051, -1051,    95, -1051,   926,   157,
+   -1051, -1051, -1051, -1051, -1051,  1290, -1051,     8, -1051,  1079,
+   -1051,   516,  1295,    75, -1051,    95, -1051, -1051, -1051,  1297,
+     753, -1051, -1051,  4932, -1051,  4932, -1051, -1051,  1595, -1051,
+     525, -1051,  1225,   451, -1051, -1051, -1051,  5627,  1053, -1051,
+    1131,   979, -1051,   987,   989, -1051, -1051, -1051,  1116, -1051,
+   -1051,   358, -1051, -1051, -1051, -1051, -1051, -1051,    86,   194,
+     634,  1053,  1053,   174, -1051,    95,    95, -1051,   442,   590,
+   -1051,  1299,  1124,   427,   157,   538,    82, -1051, -1051,   926,
+   -1051, -1051, -1051,   926,    26,  1053,  1053,  1304,   926, -1051,
+      75,  1306,   616, -1051,   803, -1051, -1051,  1307, -1051,  1308,
+    1309, -1051,  1311, -1051, -1051, -1051,  1241, -1051,   310,  1310,
+   -1051,   312, -1051, -1051, -1051,  1326,  1007,  1040,  5627, -1051,
+   -1051, -1051, -1051,   194,  1328,   495, -1051, -1051,   194,   528,
+     442,   740,  1053,  1053,    95, -1051,  1138, -1051, -1051,   926,
+   -1051,   427,  1296, -1051,   538, -1051,   538, -1051, -1051,  1329,
+   -1051, -1051,  1138,  1332, -1051, -1051, -1051, -1051,  5627,   753,
+    1319, -1051, -1051, -1051,  1333, -1051,  1339, -1051, -1051, -1051,
+   -1051,  1046, -1051,  5627, -1051, -1051, -1051,  1334, -1051, -1051,
+     442, -1051, -1051, -1051,  1335,    82, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,  5627, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-   -1033, -1033, -1033,  1248, -1033, -1033, -1033, -1033,  -403,  -118,
-   -1033, -1033,  1020, -1033, -1033, -1033, -1033, -1033,    64, -1033,
-   -1033,   397, -1033, -1033,    96,   130, -1033,   206, -1033, -1033,
-   -1033,  -938, -1033,  -886, -1033, -1033,  -620,  -778, -1033, -1033,
-   -1033,  -610, -1033,  -594, -1033,  -577, -1033,   312, -1033, -1033,
-     654,  -668, -1033,   242,   308, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033,  -898,   166, -1033, -1032,
-   -1033,   280, -1033, -1033,  -636,   466,  1132, -1033, -1033,  1178,
-   -1033, -1033, -1033, -1033,  -117,  -381,  -345,  -322,  -372,  -388,
-    -347,  -353,  -535,  -551, -1033,  -626, -1033,   -76, -1033, -1033,
-   -1033, -1033,  1013,  1218,  -602,  -433,     6, -1033, -1033, -1033,
-     533,    -3, -1033, -1033, -1033,   634,  -254, -1033, -1033, -1033,
-   -1033,  -911,  -806, -1033, -1033,   523, -1033, -1033, -1033,  -554,
-   -1033, -1033, -1033,  -384, -1033, -1033, -1033, -1033, -1033,   559,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-     801,   784, -1033,   889, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033,   224,  -684,  -890, -1033,   148, -1033,
-   -1033,   683,   687,   511,     1,  -395,  1246, -1033,    17, -1033,
-   -1033,  -578, -1033, -1033, -1033,   670,  -125,  1074, -1033,  -448,
-    1141,    26,  1366, -1033,  1137, -1033,   744, -1033, -1033, -1033,
-   -1033,  -173, -1033, -1033, -1033, -1033, -1033,    20,   799,  1028,
-    1251, -1033, -1033,  1261, -1033, -1033,  -311, -1033,   617,   211,
-    -423,  -737, -1033,   869, -1033, -1033,   969,  -187,   673,   518,
-    -493,   127, -1033,   180,    40, -1033, -1033,   173, -1033,   337,
-   -1033, -1033,   667, -1033,   356,  -639, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033, -1033,
-   -1033, -1033, -1033, -1033, -1033, -1033, -1033,  1401, -1033, -1033,
-    1588,  -295,   522,     0,    19, -1033
+   -1051, -1051, -1051,  1279, -1051, -1051, -1051, -1051,  -435,  -114,
+   -1051, -1051,  1048, -1051, -1051, -1051, -1051, -1051,    65, -1051,
+   -1051,   420, -1051, -1051,   122,   158, -1051,   230, -1051, -1051,
+   -1051,  -996, -1051,  -913, -1051, -1051,  -682,  -768, -1051, -1051,
+   -1051,  -626, -1051,  -608, -1051,  -607, -1051,   337, -1051, -1051,
+     672,  -660, -1051,   264,   334, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051,  -898,   190, -1051, -1050,
+   -1051,   308, -1051, -1051,  -659,   490,  1019, -1051, -1051,  1200,
+   -1051, -1051, -1051, -1051,  -115,  -381,  -368,  -234,  -370,  -378,
+    -369,  -346,  -545,  -515, -1051,  -646, -1051,    17, -1051, -1051,
+   -1051, -1051,   959,  1149,  -610,  -439,    18, -1051, -1051, -1051,
+     553,    -2, -1051, -1051, -1051,   286,  -257, -1051, -1051, -1051,
+   -1051,  -914,  -764, -1051, -1051,   545, -1051, -1051, -1051,  -554,
+   -1051, -1051, -1051,  -531, -1051, -1051, -1051, -1051, -1051,   579,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+     269,   807, -1051,  1055, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051,   599,  -701,  -578, -1051,   171, -1051,
+   -1051,   704,   707,   532,     1,  -410,  1272, -1051,    13, -1051,
+   -1051,  -594, -1051, -1051, -1051,   686,   -96,  1096, -1051,  -448,
+     441,    41,  1388, -1051,  1157, -1051,   603, -1051, -1051, -1051,
+   -1051,  -175, -1051, -1051, -1051, -1051, -1051,   107,  1073,  1051,
+    1312, -1051, -1051,  1366, -1051, -1051,  -309, -1051,   693,   229,
+    -663,  -755, -1051,   826,   828,   898, -1051, -1051,   995,  -213,
+     712,   556,   869,    90, -1051,    98,    59, -1051, -1051,   356,
+   -1051,   393, -1051, -1051,   705, -1051,   397,  -628, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
+   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,  1475,
+   -1051, -1051,  1577,  -287,   562,     0,    19, -1051
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
    positive, shift that token.  If negative, reduce the rule which
    number is the opposite.  If zero, do what YYDEFACT says.
    If YYTABLE_NINF, syntax error.  */
-#define YYTABLE_NINF -718
+#define YYTABLE_NINF -720
 static const yytype_int16 yytable[] =
 {
-     123,   121,   133,   654,   294,   123,    99,   304,   571,   123,
-     219,   219,   219,   600,   538,   539,   651,   548,   471,   124,
-     131,   692,   762,   493,   124,   747,   598,   712,   142,   963,
-     203,   546,   547,   454,   967,   759,   200,  1052,   971,   857,
-     338,   339,   340,   341,   342,   343,   509,   573,   433,  1208,
-     212,   425,   540,   541,   550,   796,   429,  1071,   430,   549,
-    1090,   473,  1081,  1057,    95,  1081,  -616,   657,   322,   974,
-    -616,   797,   616,   411,   637,   978,   412,   542,   543,   544,
-     545,   444,  1134,   762,   132,   670,   747,  1125,   799,   123,
-     121,   409,  1059,  1189,  1190,    99,   759,  1126,   -47,  1137,
-    1038,  1039,  1144,   477,  1145,  -650,   266,   410,   124,  -650,
-     758,   805,  -655,   520,  1134,   412,  -655,   831,   262,   457,
-    1132,  1146,   123,   830,  1059,   271,   757,  -658,   399,   400,
-     521,  -658,  1040,  1041,   397,   398,   955,  1001,   242,   242,
-     123,   124,  1076,   401,   402,   288,  1042,   297,   926,  1118,
-    1119,   123,   269,    95,  1002,  1156,   219,   318,   459,   319,
-     403,   404,  1240,   449,   927,  1152,     3,     3,   694,  -282,
-     329,   758,  1133,  1135,   936,   219,   337,   395,   396,   857,
-     702,   509,   200,   213,   796,   857,  -660,   757,  1047,   946,
-    -660,   243,   243,  1081,   405,  1081,   212,  1091,  1048,   796,
-     797,   219,    81,    82,   141,  1207,   306,    85,    86,   219,
-    1213,   219,   705,   219,  1209,   797,   219,   799,  1084,   704,
-     498,   413,   473,   427,   219,  1188,   412,   200,   560,   219,
-    1138,   219,   799,   419,   320,   200,   421,   420,   477,   200,
-     805,   212,   200,   325,   219,   219,    81,  1062,  1201,   212,
-    1204,    81,  1127,   212,   326,   805,   212,  -426,   690,  -426,
-     820,  1244,   866,   569,   429,   438,   459,  -426,   477,   674,
-    1083,   200,  1085,   754,     3,   535,   536,   537,    81,  1062,
-     750,   808,  1165,  1096,  1097,   212,  1098,   123,   447,   753,
-     123,   123,   123,  1036,   252,   253,   254,   255,   256,   257,
-     258,   259,   260,   261,   397,   398,   124,   857,   756,   451,
-     453,   455,   123,   470,   755,   701,   751,   327,   123,   269,
-     461,    81,    82,   141,   328,  1047,    85,    86,   269,   213,
-     850,   124,   412,   700,   754,  1048,   282,   319,   645,   752,
-     287,   750,   289,  1120,   293,  1121,  1161,   214,  1163,   295,
-     753,   242,    81,  1049,  1050,  -283,   242,   264,   242,  1204,
-     219,   311,  1122,   312,   491,   322,   330,   412,   219,   756,
-     219,   242,   633,   477,   213,   755,  1033,   751,   632,   412,
-     331,  1094,   213,   322,  -651,  1104,   213,   350,  -651,   213,
-    1030,     3,   957,   572,  1077,   762,   954,  1078,   747,   956,
-     752,   692,  -426,   965,   243,  -426,   378,  -426,   759,   243,
-     808,   243,   348,   397,   398,   219,   866,   269,   213,   349,
-    1111,  -426,  -426,  -426,   243,   808,  -426,  -426,    81,    82,
-     141,   322,   354,    85,    86,   558,   219,   219,  -282,   568,
-     459,   200,  1191,   219,  1192,   123,   581,  1144,     3,  1145,
-     568,  -426,  -426,  -426,   123,   212,  -426,  -426,  1057,   449,
-     269,  1193,   603,  1123,   124,   123,  1146,   123,   412,   126,
-     127,   128,   351,   593,  1229,   123,  -652,  1058,   123,   352,
-    -652,  1185,   123,   758,   124,   269,   124,  1059,  1078,    81,
-    1049,  1050,   318,   214,   319,   445,   412,   619,  -662,   757,
-     494,   624,  -662,   353,   412,   397,   398,   477,   626,   269,
-     718,   219,  1194,    81,    82,   141,   406,   355,    85,    86,
-     123,   123,  -711,  1181,  1120,   322,  1121,   703,   403,   404,
-     465,  1017,  1018,   467,  1027,   507,   508,   322,   214,   646,
-     647,   475,   968,  1122,   478,   836,   214,   837,  1025,  1026,
-     214,  -653,  1185,   214,  -715,  -653,  -426,  -426,  -426,   219,
-     219,  -426,  -426,   242,   242,  -712,   568,   123,   662,  1019,
-    1020,  1029,  -283,  -656,   472,   219,  1028,  -656,   219,   219,
-     397,   398,   214,   412,   568,   200,   124,   628,   213,   399,
-     400,  -282,   861,   459,  1021,  1022,  1023,  1024,   412,   212,
-     405,   877,   636,   878,   401,   402,  1200,  1144,   406,  1145,
-     883,   411,  -478,   459,   412,   123,   243,   243,   494,   884,
-     885,   886,   887,   888,   889,   407,  1146,   208,   240,   240,
-    1216,   477,   318,  1078,   319,   408,   427,  1060,  1061,   412,
-    1054,    81,  1062,   494,   414,  1063,   754,   249,   250,   251,
-    -426,   690,  -426,   750,   879,  -534,   567,   219,   219,   643,
-    -426,   779,   753,   644,  1235,  1191,   478,  1192,   415,   219,
-     219,   582,   219,   648,   649,   587,   374,   590,   375,  1100,
-    -426,   756,  1092,  -282,  1193,   601,   123,   755,   123,   751,
-    -426,  -426,  -426,   420,   610,  -426,  -426,  -426,   615,   219,
-     376,   377,   392,   393,   394,   593,   123,   593,   461,   123,
-     123,   219,   752,   412,   423,   399,   400,   660,   843,   412,
-     600,  -714,   779,   881,   422,   851,  -713,   864,   624,   124,
-     401,   402,   213,  -613,   290,   291,   292,  -613,   274,   275,
-     276,   277,   278,   279,   280,   281,   861,   283,  1112,   322,
-     286,   428,   214,  -612,   201,   231,   231,  -612,  1124,   434,
-     322,   685,   686,   893,   439,   894,   302,  -426,   307,   308,
-     310,   412,   731,   208,   316,    81,    82,   141,  1149,  -611,
-      85,    86,   435,  -611,  -426,  1251,   440,   895,   896,   442,
-     302,   446,  1014,  1015,  1016,  1166,   412,   344,   916,   917,
-     930,   116,   464,   412,   993,   466,   136,   989,   139,   204,
-     237,   237,   219,   918,   919,   912,   913,  1047,   208,   391,
-    1182,  1262,   474,   691,   412,  -630,   208,  1048,   995,  -630,
-     208,   468,   123,   208,  1195,   219,   484,   123,   478,  -717,
-     219,   240,   426,  -635,   219,  -634,   240,  -635,   240,  -634,
-     469,   124,   914,   915,   843,  1215,   966,   717,   302,   843,
-     490,   240,   208,   843,   123,    81,    82,   141,   492,  -633,
-      85,    86,   123,  -633,  1047,   497,  -632,  1236,  -631,  1101,
-    -632,   864,  -631,   124,  1048,  -628,   582,   495,   781,  -628,
-     116,   988,   496,  -717,   501,  -647,   214,   332,   441,  -647,
-     201,  -629,   511,   298,   272,  -629,   395,   396,   157,   158,
-     159,   160,   161,   162,  -242,   272,   272,  -625,     3,  -648,
-     832,  -625,   302,  -648,   450,   452,   163,   164,   165,  -626,
-     395,   396,   302,  -626,  -617,  1055,  -620,   460,  -617,   562,
-    -620,   317,   643,  1074,   502,   201,  1103,   503,   219,  -282,
-     166,   459,   316,   201,  -640,   204,   504,   201,  -640,     3,
-     201,  -641,  -642,   920,   921,  -641,  -642,   843,   231,   563,
-    -638,   897,  -621,   231,  -638,   231,  -621,  1175,   505,   302,
-    -619,    81,  1049,  1050,  -619,   179,   958,   686,   231,   201,
-     515,   302,  -623,  -717,  -717,   176,  -623,   565,  -717,  -717,
-     204,   123,   123,   284,   285,  -624,  1058,  -622,   204,  -624,
-     570,  -622,   204,  1087,  1088,   204,  1059,   909,   910,   911,
-    1105,  1106,   566,   237,   412,  1179,   940,   941,   237,     3,
-     237,  -282,   208,   459,   779,   583,  1197,  1198,    81,  1049,
-    1050,     3,   179,   237,   204,  1116,   584,  1055,  1055,   585,
-     294,  1115,  -282,   240,   240,   588,  1130,   594,  1074,  1074,
-    1140,  1141,  1142,   599,   611,   614,   286,    81,   299,   300,
-     973,   179,    81,    82,   141,  1130,   612,    85,    86,   604,
-     123,  1159,   620,   621,   412,   586,   625,   589,   219,   595,
-     629,   630,   596,   123,   581,   460,   634,   602,   123,   124,
-     635,   639,  1232,   458,   641,   642,   613,   843,   652,   316,
-    1168,   659,   124,    81,    82,   141,   622,  1172,    85,    86,
-    1055,   123,   123,  1055,   663,  1130,  1130,   666,   664,   676,
-     679,   302,   681,   684,  1074,   682,  1074,   696,   689,  1074,
-    1186,  1187,   322,  1074,   687,   123,   123,   695,  1074,   706,
-     708,  1217,   711,   631,   123,   720,   814,  1257,   818,   201,
-     721,   782,   821,   892,  1210,  1211,  1060,  1061,   123,   828,
-      81,  1062,   848,   124,  1063,  1080,   208,   829,   322,   846,
-     231,   231,   868,    81,    82,   141,   870,   124,    85,    86,
-     872,  1055,   123,   123,  1130,    81,    82,   141,   873,  1074,
-      85,    86,   981,  1093,   874,   922,   923,   925,   924,  -645,
-     928,  1238,  1239,  -645,   204,   675,   379,  -644,   302,   123,
-    1159,  -644,   392,   393,   394,   959,   931,   960,   199,   962,
-     392,   393,   394,   976,   602,   237,   237,   937,   124,   938,
-     939,   697,   698,   699,   942,  1074,   945,   970,   972,   316,
-     979,   380,   381,   382,   383,   384,   385,   386,   387,   388,
-     389,   205,   238,   238,   986,   990,   991,   992,   994,   302,
-     996,   206,   239,   239,  -668,  1034,   321,  1035,  1037,  1102,
-     724,   725,   179,  1089,  1095,  1099,  1136,  1107,  1155,   321,
-     321,   321,   321,   321,   321,   391,   346,   347,  1148,  1173,
-    1167,  1196,  1154,   201,  1212,  1194,  1219,  1223,  1222,  1225,
-    1227,   816,  1245,  1228,  1242,  1231,  1253,  -262,  1234,   823,
-    1246,   825,  1248,   298,  1255,   460,  1256,  1258,   157,   158,
-     159,   160,   161,   162,   844,   845,  1259,   263,   476,   849,
-    1065,  1260,  1247,   622,   862,  1205,   163,   164,   165,  1110,
-     301,   834,   418,  1180,  1117,  1151,   391,  1237,   204,   999,
-     302,   499,   302,   390,   969,   961,   944,  1252,   678,   302,
-     166,   826,   333,   824,   335,   982,   296,   462,   247,   860,
-     640,   437,  1221,   506,   559,  1230,   869,   518,   985,   876,
-    1109,   984,   522,   523,   524,   525,   526,   527,   528,   529,
-     530,   531,   532,     0,     0,     0,     0,   205,     0,     0,
-       0,   216,   245,   245,     0,   176,     0,   206,     0,   199,
-       0,     0,     0,   710,     0,   555,     0,   199,     0,     0,
-       0,   199,     0,     0,   199,     0,    23,    24,    25,    26,
-       0,    27,   424,     0,     0,     0,    32,    33,     0,   948,
-      36,    37,   205,    39,    40,    41,    42,     0,     0,     0,
-     205,     0,   206,   199,   205,     0,     0,   205,    54,    55,
-     206,     0,     0,     0,   206,   238,  1261,   206,     0,     0,
-     238,     0,   238,     0,     0,   239,     0,    81,   299,   300,
-     239,   179,   239,     0,    80,   238,   205,   980,   862,     0,
-     602,   510,     0,     0,    84,   239,   206,     0,     0,   513,
-       0,   514,   898,     0,     0,     0,   456,     0,     0,     0,
-       0,     0,     0,     0,   321,   321,   321,   321,   321,   321,
+     123,   121,   571,   133,   750,   123,   653,   695,   294,   123,
+     219,   219,   219,   602,   538,   539,   131,   762,    99,   124,
+     600,   715,   433,   821,   124,   493,   471,   548,   142,   540,
+     541,  1071,   573,   546,   547,   765,   304,   549,  1052,   656,
+     618,   799,   338,   339,   340,   341,   342,   343,   509,   425,
+     858,   200,   477,  1208,   429,   444,   430,  1090,   473,   800,
+     802,   550,  1132,   477,  1137,    95,   750,  -618,   639,   212,
+    -652,  -618,   963,  -719,  -652,  1189,  1190,   967,   477,   762,
+     974,   971,  -426,   693,  -426,   132,   978,  1057,   520,   123,
+     121,  -660,  -426,   269,   670,  -660,   672,   765,   831,   397,
+     398,   242,   242,   262,   832,   521,  1134,    99,   124,   243,
+     243,  1181,  1120,   808,  1121,   937,  1059,   203,   760,  1125,
+     955,  1001,   123,   269,   403,   404,   269,  -719,   703,  1126,
+     947,  1122,  1047,   412,  1096,  1097,   811,  1098,  1002,   647,
+     123,   124,  1048,   297,  1240,  1133,  1135,  1207,   761,  1118,
+    1119,   123,  1213,   318,    95,   459,   219,   954,   409,   319,
+     956,   322,  1152,     3,   697,   542,   543,   544,   545,   412,
+     329,   799,   412,   457,   410,   219,   705,   927,  1104,   454,
+     760,  1134,   708,   509,  1076,   671,   799,   673,   858,   800,
+     802,  1059,   449,   928,   858,  1138,   411,   200,  1047,   412,
+    1084,   219,   560,  1244,   800,   802,   707,  1091,  1048,   219,
+     761,   219,   266,   219,   427,   212,   219,   412,  1209,   473,
+    1120,  1201,  1121,  1204,   219,  1188,  -662,  -719,  -719,   219,
+    -662,   219,  -719,  -719,   405,  -426,  -426,  -426,   420,  1122,
+    -426,  -426,   200,   808,   219,   219,  -426,  -426,  -426,   498,
+     200,  -426,  -426,  1083,   200,  1085,   491,   200,   808,   412,
+     212,   569,   429,   337,  1077,   867,   811,  1078,   212,   116,
+      81,  1062,   212,   677,   136,   212,   139,   535,   536,   537,
+     271,   811,   753,    81,  1127,   757,   200,   123,   447,  -282,
+     123,   123,   123,   756,   758,   754,    81,  1049,  1050,   249,
+     250,   251,   288,   412,   212,  1036,   124,   494,   413,   451,
+     453,   455,   123,   470,   242,   858,   461,   759,   123,   242,
+     419,   242,   243,   421,  1165,   704,   306,   243,  1161,   243,
+    1163,   124,  1204,   412,   242,  -478,   459,   319,  -283,  1229,
+     264,  -282,   243,   459,   753,    81,  1062,   757,    81,    82,
+     141,     3,   438,    85,    86,   756,   758,   754,   116,   320,
+     219,     3,    81,  1049,  1050,   412,   213,   412,   219,   628,
+     219,   630,   272,  1094,  1081,   750,  -283,  1081,   472,   759,
+     634,  1030,  -653,   272,   272,   695,  -653,   957,   762,   325,
+     274,   275,   276,   277,   278,   279,   280,   281,   965,   283,
+     326,   635,   286,   214,  -654,   327,   765,   477,  -654,   317,
+    -664,   397,   398,  1033,  -664,   219,   411,   867,   302,   412,
+     307,   308,   310,   494,   395,   396,   316,   572,   406,   755,
+    -282,  -655,   459,   397,   398,  -655,   219,   219,   328,   126,
+     127,   128,   302,   219,   330,   123,   583,  1038,  1039,   344,
+     331,   568,  1200,  1144,   123,  1145,   200,  -282,   322,   603,
+     397,   398,   568,   605,   124,   123,   269,   123,  1191,  1111,
+    1192,   391,  1146,   595,   212,   123,   322,   459,   123,  1040,
+    1041,   348,   123,   349,   124,     3,   124,  1193,   318,   760,
+     449,   755,  1185,  1042,   319,   350,   477,   621,    81,    82,
+     141,   626,  -649,    85,    86,  1081,  -649,  1081,   351,   477,
+     302,   219,   213,   395,   396,  -426,   693,  -426,   352,   761,
+     123,   123,   558,   353,   322,  -426,   242,   242,   269,   706,
+     354,  1123,  1017,  1018,   243,   243,   397,   398,   -47,   648,
+     649,   721,  1144,   269,  1145,  1027,  1078,  1019,  1020,   214,
+     441,  1025,  1026,  1235,  1191,  1028,  1192,   213,   412,   219,
+     219,  1146,   638,  1185,  1144,   213,  1145,   123,   664,   213,
+     355,   458,   213,  1193,   302,   219,   450,   452,   568,  1029,
+     219,   219,  -426,  1146,   302,  -426,   124,  -426,  -713,   460,
+    -426,  -426,  -426,  1057,   214,  -426,  -426,  -717,   568,   862,
+     200,   213,   214,   645,   316,   851,   214,   646,   269,   214,
+     405,  1194,  1058,   201,   231,   231,   358,   123,   212,   412,
+     322,   408,  1059,   662,   885,   886,   887,   888,   889,   890,
+     318,   302,   322,   878,  1216,   879,   319,  1078,   214,    81,
+      82,   141,   884,   302,    85,    86,  -714,   427,   406,  1054,
+     412,   412,   418,   753,   494,   882,   757,   407,  1047,   219,
+     219,  1182,   414,   782,   756,   758,   754,  -534,  1048,   252,
+     253,   254,   255,   256,   257,   258,   259,   260,   261,   403,
+     404,  1100,   415,  1021,  1022,  1023,  1024,   420,   759,   123,
+    1092,   123,  -426,  -426,  -426,   423,   968,  -426,  -426,   837,
+    -716,   838,   219,   208,   240,   240,   422,   461,   595,   123,
+     595,   282,   123,   123,   219,   287,  -715,   289,   286,   293,
+     602,   844,   428,  -650,   295,   782,   865,  -650,   852,  -615,
+     434,   626,   124,  -615,   395,   396,   311,   588,   312,   591,
+     439,   597,  -614,   435,   598,   440,  -614,   460,  -613,   604,
+     880,   862,  -613,  -657,   507,   508,  1112,  -657,   615,   201,
+     442,   316,   650,   651,  1047,   446,  1124,  1236,   624,   399,
+     400,   213,  1060,  1061,  1048,  1156,    81,  1062,   412,  1251,
+    1063,   378,   931,   302,   401,   402,  1149,     3,    81,    82,
+     141,   399,   400,    85,    86,  1014,  1015,  1016,   917,   918,
+     755,   510,     3,  1166,   201,   464,   401,   402,   214,   513,
+     466,   514,   201,   919,   920,  1262,   201,   412,  -282,   201,
+     459,   989,    81,  1049,  1050,   412,   179,   231,     3,   995,
+     468,  -632,   231,   123,   231,  -632,   219,     3,   123,   469,
+    -637,   219,  1195,   322,  -637,   219,  -636,   231,   201,   208,
+    -636,   474,   124,   484,   322,   844,   490,   966,  -658,   492,
+     844,   495,  -658,  1215,   844,   123,   496,  -635,   497,   678,
+     445,  -635,   302,   123,   399,   400,  -634,   501,   865,  -633,
+    -634,  1101,  -630,  -633,   124,   502,  -630,  -631,   604,   401,
+     402,  -631,   988,   713,   208,   700,   701,   702,   993,   503,
+    -627,   504,   208,   316,  -627,   465,   208,  -628,   467,   208,
+    -619,  -628,   688,   689,  -619,   213,   475,   240,   426,   478,
+     505,  -622,   240,   302,   240,  -622,   511,   645,    81,  1049,
+    1050,  1103,   179,  -242,   727,   728,  1055,   240,   208,   412,
+     734,    81,    82,   141,  1074,   562,    85,    86,   219,   391,
+    1058,   563,   214,   913,   914,  -647,    81,    82,   141,  -647,
+    1059,    85,    86,   606,   915,   916,   817,   844,   392,   393,
+     394,  -642,   565,  -643,   824,  -642,   826,  -643,   921,   922,
+     460,  -644,    81,    82,   141,  -644,   566,    85,    86,   845,
+     846,    81,    82,   141,   850,   570,    85,    86,   624,   863,
+    -640,   123,   123,   585,  -640,   374,  1175,   375,  -623,  -426,
+    -621,   391,  -623,   586,  -621,   302,   358,   302,   201,   587,
+    1105,  1106,   675,  -646,   302,  -282,  -426,  -646,  -625,   376,
+     377,   567,  -625,   590,   782,   596,   392,   393,   394,   231,
+     231,   478,   290,   291,   292,  1116,   584,  1055,  1055,   601,
+     589,   614,   592,   894,   294,   895,  1130,  -426,  1074,  1074,
+     613,  -626,  -282,  1115,   459,  -626,   515,  -624,   616,   612,
+     622,  -624,     3,   617,  -426,  1130,   627,   896,   897,   623,
+     123,  1159,   631,   204,   237,   237,   412,   951,   219,   637,
+     951,   958,   689,   123,   583,   392,   393,   394,   123,   124,
+     675,   736,   948,   910,   911,   912,  1168,   844,   208,   632,
+    1060,  1061,   124,   636,    81,  1062,   641,  1172,  1063,   643,
+    1055,   123,   123,  1055,   644,  1130,  1130,  1087,  1088,   240,
+     240,  1140,  1141,  1142,  1074,   654,  1074,   412,  1179,  1074,
+    1186,  1187,   661,  1074,   665,   123,   123,   682,  1074,   666,
+     980,   863,  1217,   604,   123,   868,  1197,  1198,   668,   199,
+     679,   684,   201,   321,  1210,  1211,   379,   685,   123,   284,
+     285,   687,   692,   124,   690,   699,   321,   321,   321,   321,
+     321,   321,   698,   346,   347,   709,   711,   124,   714,   633,
+     723,  1055,   123,   123,  1130,  1232,   724,   813,   814,  1074,
+     694,   380,   381,   382,   383,   384,   385,   386,   387,   388,
+     389,  1238,  1239,   815,   819,   478,   822,   829,   899,   123,
+    1159,   951,   849,   951,   951,   951,    81,    82,   141,   204,
+     830,    85,    86,   981,   720,   322,   847,  1079,   124,   785,
+     869,    81,    82,   141,  1086,  1074,    85,    86,   871,   873,
+    1257,   874,   208,   900,   901,   902,   903,   904,   905,   906,
+     907,   908,   909,   584,   875,   784,   923,   893,   924,   926,
+     925,   322,   929,   938,   204,   932,   939,   940,   943,   959,
+     946,   301,   204,   960,   962,   970,   204,   976,   979,   204,
+     972,   986,   990,   991,   992,   994,  1034,   237,   833,   996,
+    -670,  1035,   237,   333,   237,   335,   179,   499,  1089,  1095,
+    1037,  1099,  1102,  1136,  1107,  1155,  1167,   237,   204,  1148,
+     391,  1196,   205,   238,   238,  1173,  1212,  1194,  1219,  1223,
+    1222,  1225,  1227,   518,  1242,  1228,  1245,  1253,   522,   523,
+     524,   525,   526,   527,   528,   529,   530,   531,   532,   898,
+     199,  1231,   951,  1255,   951,  1234,  1246,  1248,   199,  1256,
+    1259,  1258,   199,  1153,  1065,   199,   476,  1260,   263,  1205,
+    1247,   555,   835,   424,  1110,  1180,   206,   239,   239,   863,
+    1117,  1237,  1170,  1151,   999,   390,   961,   969,   302,   945,
+    1252,  1176,  1177,   681,   199,   827,   825,   982,   861,   462,
+     247,   437,   296,  1230,   941,   942,   506,   676,   674,   642,
+     559,   321,   321,   321,   321,   321,   321,   321,   321,   321,
+     321,   321,   321,   321,   321,   321,   321,   985,   870,   659,
+     877,  1109,   984,     0,     0,  1214,     0,     0,     0,     0,
+       0,     0,  1218,  1220,     0,     0,   973,   456,     0,     0,
+       0,     0,     0,     0,   863,     0,     0,     0,     0,     0,
+     321,     0,     0,     0,     0,     0,     0,     0,   205,     0,
+       0,     0,     0,     0,   485,   486,   487,   488,   321,     0,
+       0,  1241,     0,     0,     0,   216,   245,   245,   204,     0,
+       0,     0,     0,     0,   456,     0,     0,     0,   500,     0,
+       0,  1249,  1250,     0,     0,     0,   456,     0,  1254,   237,
+     237,     0,     0,   205,   321,     0,     0,     0,     0,     0,
+       0,   205,   206,     0,   519,   205,   321,     0,   205,     0,
+       0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
+       0,   238,     0,   238,     0,     0,     0,     0,     0,     0,
+    1080,     0,     0,     0,     0,     0,   238,   205,     0,     0,
+       0,     0,     0,     0,   199,     0,     0,   206,     0,     0,
+     321,     0,   564,   321,     0,   206,     0,     0,  1093,   206,
+       0,     0,   206,     0,     0,     0,     0,   218,   246,   246,
+     239,     0,   717,     0,     0,   239,     0,   239,     0,     0,
+       0,     0,     0,     0,   726,     0,     0,     0,     0,     0,
+     239,   206,     0,     0,   836,  1164,     0,     0,     0,   298,
+       0,   837,   321,   838,   157,   158,   159,   160,   161,   162,
+       0,   216,   204,     0,   321,    23,    24,    25,    26,     0,
+      27,     0,   163,   164,   165,    32,    33,     0,     0,    36,
+      37,     0,    39,    40,    41,    42,     0,     0,     0,     0,
+       0,   839,     0,     0,     0,     0,   166,    54,    55,   730,
+     732,     0,     0,     0,     0,   717,   216,  1154,     0,     0,
+       0,     0,   751,     0,   216,     0,     0,     0,   216,     0,
+       0,   216,     0,    80,     0,     0,     0,     0,     0,   245,
+       0,     0,   655,    84,   245,     0,   245,     0,   199,     0,
+       0,   176,     0,     0,     0,     0,     0,     0,     0,   245,
+     216,     0,     0,     0,     0,     0,     0,   205,   785,   786,
+     787,   788,     0,   218,     0,   789,   790,   791,   792,   793,
+     794,   795,     0,     0,   751,     0,     0,     0,   238,   238,
+       0,     0,   321,     0,     0,     0,     0,  1221,   321,   321,
+     321,   321,   321,   321,   891,   892,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   218,     0,
+     488,   206,     0,    81,   177,   178,   218,   179,    85,    86,
+     218,     0,     0,   218,     0,   839,     0,     0,     0,     0,
+     839,   246,   239,   239,   839,     0,   246,     0,   246,     0,
+     737,     0,     0,     0,   783,     0,     0,     0,     0,     0,
+       0,   246,   218,     0,     0,     0,     0,     0,     0,     0,
+     717,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   321,     0,     0,     0,     0,
+       0,  1261,   997,   518,     0,     0,   321,     0,  1003,  1004,
+    1005,  1006,  1007,  1008,  1009,  1010,  1011,  1012,  1013,     0,
+       0,   205,     0,   876,     0,     0,     0,     0,   456,     0,
+     456,     0,     0,     0,     0,     0,     0,   883,     0,     0,
+     216,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     321,     0,     0,     0,     0,     0,     0,   839,     0,     0,
+       0,   245,   245,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   206,     0,     0,     0,   321,
      321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
-       0,     0,     0,   485,   486,   487,   488,   899,   900,   901,
-     902,   903,   904,   905,   906,   907,   908,   216,     0,     0,
-       0,     0,     0,   456,     0,     0,     0,   500,     0,   782,
-     783,   784,   785,   321,     0,   456,   786,   787,   788,   789,
-     790,   791,   792,     0,   576,  1079,     0,     0,     0,     0,
-       0,   321,  1086,   519,     0,     0,     0,     0,   218,   246,
-     246,     0,   216,     0,     0,     0,     0,     0,     0,     0,
-     216,     0,     0,     0,   216,     0,     0,   216,   951,     0,
-       0,   951,     0,     0,     0,   245,     0,   321,     0,     0,
-     245,     0,   245,   199,     0,     0,     0,     0,     0,   321,
-       0,   564,     0,     0,   714,   245,   216,     0,     0,     0,
-       0,     0,   576,     0,     0,     0,   723,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   205,     0,   391,     0,
-       0,     0,     0,     0,     0,     0,   206,     0,     0,     0,
-       0,     0,     0,   321,     0,     0,   321,   238,   238,     0,
-       0,     0,     0,     0,     0,     0,     0,   239,   239,     0,
-       0,   576,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,  1153,   838,     0,     0,     0,     0,     0,     0,   576,
-     673,     0,     0,     0,     0,     0,   714,   862,     0,     0,
-    1170,     0,     0,   321,     0,     0,   302,     0,     0,  1176,
-    1177,     0,     0,     0,   218,   321,     0,     0,     0,     0,
-       0,     0,     0,   951,     0,   951,   951,   951,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   653,     0,     0,     0,     0,     0,   199,     0,     0,
-     727,   729,     0,  1214,     0,     0,     0,     0,     0,   218,
-    1218,  1220,     0,   748,     0,     0,     0,   218,   673,   733,
-       0,   218,   862,     0,   218,     0,     0,     0,     0,     0,
-     205,   673,   246,     0,     0,     0,   216,   246,     0,   246,
-     206,     0,     0,     0,     0,     0,     0,     0,     0,  1241,
-       0,     0,   246,   218,     0,     0,     0,   245,   245,     0,
-       0,     0,     0,     0,     0,     0,     0,   488,   838,  1249,
-    1250,     0,   867,   838,   748,     0,  1254,   838,     0,     0,
-       0,     0,   321,     0,     0,     0,     0,     0,   321,   321,
-     321,   321,   321,   321,   890,   891,     0,   734,     0,     0,
-       0,   780,     0,   714,   951,     0,   951,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   997,   518,     0,     0,     0,
-       0,  1003,  1004,  1005,  1006,  1007,  1008,  1009,  1010,  1011,
-    1012,  1013,     0,     0,   298,     0,     0,     0,     0,   157,
-     158,   159,   160,   161,   162,     0,     0,     0,     0,   875,
-       0,     0,  -203,  -203,   456,     0,   456,   163,   164,   165,
-       0,     0,     0,   882,     0,     0,     0,   321,     0,     0,
-     216,   838,     0,     0,     0,     0,     0,   143,   321,     0,
-       0,   166,   144,   145,   146,     0,   147,   148,   149,   150,
-     151,   152,   153,   154,   155,  -563,     0,     0,     0,     0,
-     156,     0,     0,     0,     0,   157,   158,   159,   160,   161,
-     162,     0,     0,   218,     0,     0,     0,     0,  -203,  -203,
-       0,     0,   321,   163,   164,   165,   176,     0,     0,     0,
-       0,     0,     0,     0,   246,   246,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   166,     0,     0,
-       0,   321,   321,   321,   321,   321,   321,   321,   321,   321,
-     321,   321,   321,   321,   321,   321,   321,   321,     0,   321,
-       0,   167,   168,   169,   170,   171,   172,   173,   174,     0,
-       0,     0,     0,     0,     0,     0,     0,   175,     0,     0,
-       0,     0,   176,     0,     0,     0,     0,     0,    81,   299,
-     300,     0,   179,     0,     0,     0,     0,     0,     0,     0,
-       0,   838,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,  1000,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   321,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   218,     0,     0,
-       0,     0,     0,     0,    81,   177,   178,     0,   179,   180,
-      86,     0,     0,     0,     0,     0,   748,     0,     0,     0,
-       0,     0,     0,     0,     0,  -170,     0,     0,     0,     0,
-    -170,  -170,  -170,     0,  -170,  -170,  -170,  -170,  -170,  -170,
-    -170,  -170,  -170,  -170,  -170,  -170,  -715,  -170,  -170,     0,
-    -170,   488,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
-    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,     0,  -170,
-       0,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
-    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
-    -170,  -170,     0,     0,     0,  -170,     0,     0,     0,     0,
-    1108,     0,     0,     0,     0,     0,     0,     0,     0,    -2,
+     321,   321,   321,   321,   321,   321,     0,   321,     0,    -2,
        1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-    -170,  -170,  -170,  -170,  -170,  -170,  -170,     2,     0,     0,
-       0,     0,     0,  -282,     0,  -170,     0,     0,     0,     0,
-    -170,     0,     0,     3,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     4,     0,     5,     0,     0,     0,     0,
-     321,     0,     0,     0,     0,  1171,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,  -426,  -426,  -426,
-       0,     6,     0,     0,     0,     0,     7,     8,     9,     0,
+       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
+       0,     0,     0,  -282,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     3,     0,     0,     0,     0,     0,     0,
+       0,     0,   218,     4,     0,     5,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     321,    10,    11,    12,     0,     0,     0,     0,     0,     0,
-       0,     0,  -170,  -170,  -170,   321,  -170,  -170,  -170,     0,
+       0,     0,     0,   246,   246,   321,     0,  -426,  -426,  -426,
+       0,     6,     0,     0,     0,     0,     7,     8,     9,     0,
+       0,     0,     0,     0,   216,     0,     0,     0,     0,     0,
+       0,    10,    11,    12,  1000,     0,     0,   839,     0,     0,
+       0,     0,     0,   751,     0,     0,     0,     0,     0,     0,
        0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,   321,    27,    28,    29,
+      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
       40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
       50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
       60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
       70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
-      80,    -3,     1,     0,     0,     0,     0,    81,    82,    83,
-      84,     0,    85,    86,    87,     0,     0,     0,     0,     2,
-       0,     0,     0,     0,     0,  -282,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     3,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     4,     0,     5,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,  -426,
-    -426,  -426,     0,     6,     0,     0,     0,     0,     7,     8,
-       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    10,    11,    12,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    13,    14,    15,    16,     0,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
-      78,    79,    80,     0,     0,     0,     0,     0,     0,    81,
-      82,    83,    84,   143,    85,    86,    87,     0,   144,   145,
-     146,     0,   147,   148,   149,   150,   151,   152,   153,   154,
-     155,  -563,   556,     0,     0,     0,   156,     0,     0,     0,
-       0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
-       0,     0,     0,     0,  -203,  -203,     4,     0,     5,   163,
-     164,   165,     0,     0,     0,     0,     0,     0,     0,     0,
+      80,     0,   488,     0,     0,     0,   218,    81,    82,    83,
+      84,     0,    85,    86,    87,     0,    -3,     1,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-    -426,  -426,  -426,   166,     6,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
+    -282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       3,  1108,     0,     0,     0,     0,     0,     0,     0,     0,
+       4,     0,     5,     0,     0,     0,     0,   321,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   168,   169,
-     170,   171,   172,   173,   174,     0,     0,     0,     0,     0,
-       0,     0,     0,   175,    13,    14,    15,    16,   176,    17,
-      18,    19,    20,    21,    22,    23,    24,    25,    26,     0,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
-      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
-      77,    78,    79,    80,     0,     0,     0,     0,     0,     0,
-      81,   177,   557,    84,   179,   180,    86,    87,   143,     0,
-       0,     0,     0,   144,   145,   146,     0,   147,   148,   149,
-     150,   151,   152,   153,   154,   155,  -172,     0,     0,     0,
+       0,     0,     0,     0,  -426,  -426,  -426,     0,     6,     0,
+       0,     0,     0,     7,     8,     9,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   321,    10,    11,
+      12,     0,     0,     0,     0,     0,  1171,     0,     0,     0,
+       0,     0,   321,     0,     0,     0,     0,     0,    13,    14,
+      15,    16,     0,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,   321,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
+      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
+      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,     0,     0,
+       0,     0,     0,     0,    81,    82,    83,    84,   143,    85,
+      86,    87,     0,   144,   145,   146,     0,   147,   148,   149,
+     150,   151,   152,   153,   154,   155,  -563,   556,     0,     0,
        0,   156,     0,     0,     0,     0,   157,   158,   159,   160,
      161,   162,     0,     0,     0,     0,     0,     0,     0,  -203,
-    -203,  -282,     0,     0,   163,   164,   165,     0,     0,     0,
+    -203,     4,     0,     5,   163,   164,   165,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,  -282,  -282,  -282,   166,     0,
+       0,     0,     0,     0,     0,  -426,  -426,  -426,   166,     6,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,   168,   169,   170,   171,   172,   173,   174,
-       0,     0,     0,     0,     0,     0,     0,     0,   175,  -282,
-    -282,  -282,  -282,   176,  -282,  -282,  -282,  -282,  -282,  -282,
-    -282,  -282,  -282,  -282,     0,  -282,  -282,  -282,  -282,  -282,
-    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
-    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
-    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
-    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
-    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,     0,
-       0,     0,     0,     0,     0,    81,   177,   178,  -282,   179,
-     180,    86,  -282,   221,     0,     0,     0,     0,   144,   145,
-     146,     0,     0,   222,   149,   150,   151,   152,   153,   154,
-     223,  -172,  -567,     0,     0,     0,   224,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   175,    13,
+      14,    15,    16,   176,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
+      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
+      72,    73,    74,    75,    76,    77,    78,    79,    80,     0,
+       0,     0,     0,     0,     0,    81,   177,   557,    84,   179,
+     180,    86,    87,   143,     0,     0,     0,     0,   144,   145,
+     146,     0,   147,   148,   149,   150,   151,   152,   153,   154,
+     155,  -172,     0,     0,     0,     0,   156,     0,     0,     0,
        0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
        0,     0,     0,     0,  -203,  -203,  -282,     0,     0,   163,
      164,   165,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -282,  -282,  -282,   166,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   169,
+       0,     0,     0,     0,     0,     0,     0,     0,   168,   169,
      170,   171,   172,   173,   174,     0,     0,     0,     0,     0,
        0,     0,     0,   175,  -282,  -282,  -282,  -282,   176,  -282,
     -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,     0,
@@ -2278,300 +2234,235 @@ static const yytype_int16 yytable[] =
     -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
     -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
     -282,  -282,  -282,  -282,     0,     0,     0,     0,     0,     0,
-      81,   177,   178,  -282,   179,   225,   226,  -282,   143,     0,
-       0,     0,     0,   144,   145,   146,     0,   147,   148,   149,
-     150,   151,   152,   153,   154,   155,  -563,     0,     0,     0,
-       0,   156,     0,     0,     0,     0,   157,   158,   159,   160,
+      81,   177,   178,  -282,   179,   180,    86,  -282,   221,     0,
+       0,     0,     0,   144,   145,   146,     0,     0,   222,   149,
+     150,   151,   152,   153,   154,   223,  -172,  -567,     0,     0,
+       0,   224,     0,     0,     0,     0,   157,   158,   159,   160,
      161,   162,     0,     0,     0,     0,     0,     0,     0,  -203,
-    -203,     0,   221,     0,   163,   164,   165,   144,   145,   146,
-       0,     0,   222,   149,   150,   151,   152,   153,   154,   223,
-    -507,  -507,     0,     0,     0,   224,  -507,     0,   166,     0,
-     157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
-       0,     0,     0,  -203,  -203,     0,     0,     0,   163,   164,
-     165,     0,  -535,   168,   169,   170,   171,   172,   173,   174,
-       0,     0,     0,     0,     0,     0,     0,     0,   175,     0,
-       0,     0,   166,   176,     0,     0,     0,     0,     0,     0,
+    -203,  -282,     0,     0,   163,   164,   165,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,  -507,     0,   169,   170,
-     171,   172,   173,   174,     0,     0,     0,     0,     0,     0,
-       0,     0,   175,     0,     0,     0,     0,   176,     0,     0,
+       0,     0,     0,     0,     0,  -282,  -282,  -282,   166,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    81,   177,   178,     0,   179,
-     180,    86,     0,     0,     0,   143,     0,     0,     0,     0,
-     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
-     153,   154,   155,  -563,   655,     0,     0,     0,   156,     0,
-       0,     0,     0,   157,   158,   159,   160,   161,   162,    81,
-     177,   178,     0,   179,   225,   226,  -203,  -203,     0,   143,
-       0,   163,   164,   165,   144,   145,   146,     0,   147,   148,
-     149,   150,   151,   152,   153,   154,   155,  -563,     0,     0,
-       0,     0,   156,     0,     0,   166,     0,   157,   158,   159,
-     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
-    -203,  -203,     0,     0,     0,   163,   164,   165,     0,     0,
-     168,   169,   170,   171,   172,   173,   174,     0,     0,     0,
-       0,     0,     0,     0,     0,   175,     0,     0,     0,   166,
-     176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   169,   170,   171,   172,   173,   174,
+       0,     0,     0,     0,     0,     0,     0,     0,   175,  -282,
+    -282,  -282,  -282,   176,  -282,  -282,  -282,  -282,  -282,  -282,
+    -282,  -282,  -282,  -282,     0,  -282,  -282,  -282,  -282,  -282,
+    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
+    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
+    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
+    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,
+    -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,  -282,     0,
+       0,     0,     0,     0,     0,    81,   177,   178,  -282,   179,
+     225,   226,  -282,  -170,     0,     0,     0,     0,  -170,  -170,
+    -170,     0,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
+    -170,  -170,  -170,  -170,  -717,  -170,  -170,     0,  -170,     0,
+    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
+    -170,  -170,  -170,  -170,  -170,  -170,     0,  -170,     0,  -170,
+    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
+    -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,  -170,
+       0,     0,     0,  -170,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   168,   169,   170,   171,   172,   173,
-     174,     0,     0,     0,     0,     0,     0,     0,   835,   175,
-       0,     0,     0,   298,   176,   836,     0,   837,   157,   158,
+       0,     0,     0,     0,     0,     0,     0,     0,  -170,  -170,
+    -170,  -170,  -170,  -170,  -170,     0,     0,     0,     0,     0,
+     143,     0,     0,  -170,     0,   144,   145,   146,  -170,   147,
+     148,   149,   150,   151,   152,   153,   154,   155,  -563,     0,
+       0,     0,     0,   156,     0,     0,     0,     0,   157,   158,
      159,   160,   161,   162,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   163,   164,   165,     0,
-       0,     0,    81,   177,   178,     0,   179,   180,    86,     0,
-       0,     0,   221,     0,     0,     0,     0,   144,   145,   146,
-     166,     0,   222,   149,   150,   151,   152,   153,   154,   223,
-    -563,  -567,     0,     0,     0,   224,     0,     0,     0,     0,
-     157,   158,   159,   160,   161,   162,    81,   177,   178,     0,
-     179,   180,    86,  -203,  -203,     0,   221,     0,   163,   164,
-     165,   144,   145,   146,     0,   176,   222,   149,   150,   151,
-     152,   153,   154,   223,  -563,  -567,     0,     0,     0,   224,
-       0,     0,   166,     0,   157,   158,   159,   160,   161,   162,
-       0,     0,     0,     0,     0,     0,     0,  -203,  -203,     0,
-       0,     0,   163,   164,   165,     0,  -503,     0,   169,   170,
-     171,   172,   173,   174,     0,     0,     0,     0,     0,     0,
-     713,  -709,   175,     0,     0,   298,   166,   176,     0,     0,
-     157,   158,   159,   160,   161,   162,     0,    81,   177,   178,
-       0,   179,    85,    86,     0,     0,     0,     0,   163,   164,
-     165,     0,   169,   170,   171,   172,   173,   174,     0,     0,
-       0,     0,     0,     0,     0,     0,   175,     0,     0,     0,
-       0,   176,   166,     0,     0,     0,     0,     0,     0,     0,
+       0,  -203,  -203,     0,     0,     0,   163,   164,   165,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
-     177,   178,     0,   179,   225,   226,     0,     0,     0,     0,
-       0,     0,     0,     0,   144,   145,   146,   176,   147,   148,
-     149,   150,   151,   152,   153,   154,   223,  -563,   574,     0,
-       0,     0,   357,     0,     0,     0,     0,   157,   158,   159,
-     160,   161,   162,    81,   177,   178,     0,   179,   225,   226,
-    -203,  -203,     4,     0,     5,   163,   164,   165,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
-       6,     0,     0,     0,     0,     0,     0,     0,     0,    81,
-     299,   300,     0,   179,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   168,   169,   170,   171,   172,   173,
-     174,     0,     0,     0,     0,     0,     0,     0,     0,   575,
-      13,    14,    15,    16,   176,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
-      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
-       0,     0,     0,     0,     0,     0,    81,   177,   557,    84,
-     179,   180,    86,    87,   144,   145,   146,     0,   147,   148,
-     149,   150,   151,   152,   153,   154,   223,  -563,   656,     0,
-       0,     0,   357,     0,     0,     0,     0,   157,   158,   159,
-     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
-    -203,  -203,     4,     0,     5,   163,   164,   165,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
-       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   168,   169,   170,   171,   172,   173,
-     174,     0,     0,     0,     0,     0,     0,     0,     0,   175,
-      13,    14,    15,    16,   176,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
-      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
-       0,     0,     0,     0,     0,     0,    81,   177,   557,    84,
-     179,   180,    86,    87,   144,   145,   146,     0,   147,   148,
-     149,   150,   151,   152,   153,   154,   223,  -563,   668,     0,
-       0,     0,   357,     0,     0,     0,     0,   157,   158,   159,
-     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
-    -203,  -203,     4,     0,     5,   163,   164,   165,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
-       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+    -170,  -170,  -170,     0,  -170,  -170,  -170,     0,     0,     0,
+       0,     0,     0,     0,   167,   168,   169,   170,   171,   172,
+     173,   174,     0,     0,     0,     0,     0,   143,     0,     0,
+     175,     0,   144,   145,   146,   176,   147,   148,   149,   150,
+     151,   152,   153,   154,   155,  -563,     0,     0,     0,     0,
+     156,     0,     0,     0,     0,   157,   158,   159,   160,   161,
+     162,     0,     0,     0,     0,     0,     0,     0,  -203,  -203,
+       0,     0,     0,   163,   164,   165,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   168,   169,   170,   171,   172,   173,
-     174,     0,     0,     0,     0,     0,     0,     0,     0,   669,
-      13,    14,    15,    16,   176,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
-      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
-       0,     0,     0,     0,     0,     0,    81,   177,   557,    84,
-     179,   180,    86,    87,   144,   145,   146,     0,   147,   148,
-     149,   150,   151,   152,   153,   154,   223,  -563,   667,     0,
-       0,     0,   357,     0,     0,     0,     0,   157,   158,   159,
-     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   163,   164,   165,   144,   145,
-     146,     0,   147,   148,   149,   150,   151,   152,   153,   154,
-     223,  -563,   671,     0,     0,     0,   357,     0,     0,   166,
+       0,     0,     0,     0,     0,     0,     0,   166,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    81,   177,   178,
+       0,   179,   180,    86,     0,     0,     0,     0,     0,     0,
+       0,  -535,   168,   169,   170,   171,   172,   173,   174,     0,
+       0,     0,     0,   221,     0,     0,     0,   175,   144,   145,
+     146,     0,   176,   222,   149,   150,   151,   152,   153,   154,
+     223,  -507,  -507,     0,     0,     0,   224,  -507,     0,     0,
        0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   163,
-     164,   165,     0,     0,   168,   169,   170,   171,   172,   173,
-     174,     0,     0,     0,     0,     0,     0,     0,     0,   175,
-       0,     0,     0,   166,   176,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,  -203,  -203,     0,     0,     0,   163,
+     164,   165,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   168,   169,
+       0,     0,     0,   166,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    81,   177,   178,     0,   179,   180,
+      86,     0,     0,     0,     0,     0,     0,  -507,     0,   169,
      170,   171,   172,   173,   174,     0,     0,     0,     0,     0,
-       0,     0,     0,   672,     0,   144,   145,   146,   176,   147,
-     148,   149,   150,   151,   152,   153,   154,   223,  -563,   732,
-       0,     0,     0,   357,     0,     0,     0,     0,   157,   158,
-     159,   160,   161,   162,     0,     0,    81,   177,   178,     0,
-     179,   180,    86,     0,     0,     0,   163,   164,   165,   144,
-     145,   146,     0,   147,   148,   149,   150,   151,   152,   153,
-     154,   223,  -563,   810,     0,     0,     0,   357,     0,     0,
-     166,     0,   157,   158,   159,   160,   161,   162,     0,     0,
-      81,   177,   178,     0,   179,   180,    86,     0,     0,     0,
-     163,   164,   165,     0,     0,   168,   169,   170,   171,   172,
-     173,   174,     0,     0,     0,     0,     0,     0,     0,     0,
-     175,     0,     0,     0,   166,   176,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
-     169,   170,   171,   172,   173,   174,     0,     0,     0,     0,
-       0,     0,     0,     0,   175,     0,   144,   145,   146,   176,
-     147,   148,   149,   150,   151,   152,   153,   154,   223,  -563,
-     811,     0,     0,     0,   357,     0,     0,     0,     0,   157,
-     158,   159,   160,   161,   162,     0,     0,    81,   177,   178,
-       0,   179,   180,    86,     0,     0,     0,   163,   164,   165,
-     144,   145,   146,     0,   147,   148,   149,   150,   151,   152,
-     153,   154,   223,  -563,   813,     0,     0,     0,   357,     0,
-       0,   166,     0,   157,   158,   159,   160,   161,   162,     0,
-       0,    81,   177,   178,     0,   179,   180,    86,     0,     0,
-       0,   163,   164,   165,     0,     0,   168,   169,   170,   171,
-     172,   173,   174,     0,     0,     0,     0,     0,     0,     0,
-       0,   812,     0,     0,     0,   166,   176,     0,     0,     0,
+     143,     0,     0,   175,     0,   144,   145,   146,   176,   147,
+     148,   149,   150,   151,   152,   153,   154,   155,  -563,   657,
+       0,     0,     0,   156,     0,     0,     0,     0,   157,   158,
+     159,   160,   161,   162,     0,     0,     0,     0,     0,     0,
+       0,  -203,  -203,     0,     0,     0,   163,   164,   165,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     168,   169,   170,   171,   172,   173,   174,     0,     0,     0,
-       0,     0,     0,     0,     0,   175,     0,   144,   145,   146,
-     176,   147,   148,   149,   150,   151,   152,   153,   154,   223,
-    -563,   947,     0,     0,     0,   357,     0,     0,     0,     0,
-     157,   158,   159,   160,   161,   162,     0,     0,    81,   177,
-     178,     0,   179,   180,    86,     0,     0,     0,   163,   164,
-     165,   144,   145,   146,     0,   147,   148,   149,   150,   151,
-     152,   153,   154,   223,  -563,     0,     0,     0,     0,   357,
-       0,     0,   166,     0,   157,   158,   159,   160,   161,   162,
-       0,     0,    81,   177,   178,     0,   179,   180,    86,     0,
-       0,     0,   163,   164,   165,     0,     0,   168,   169,   170,
-     171,   172,   173,   174,     0,     0,     0,     0,     0,     0,
-       0,     0,   175,     0,     0,     0,   166,   176,     0,     0,
+     166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      81,   177,   178,     0,   179,   225,   226,     0,     0,     0,
+       0,     0,     0,     0,     0,   168,   169,   170,   171,   172,
+     173,   174,     0,     0,     0,     0,     0,   143,     0,     0,
+     175,     0,   144,   145,   146,   176,   147,   148,   149,   150,
+     151,   152,   153,   154,   155,  -563,     0,     0,     0,     0,
+     156,     0,     0,     0,     0,   157,   158,   159,   160,   161,
+     162,     0,     0,     0,     0,     0,     0,     0,  -203,  -203,
+       0,     0,     0,   163,   164,   165,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   166,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    81,   177,   178,
+       0,   179,   180,    86,     0,     0,     0,     0,     0,     0,
+       0,     0,   168,   169,   170,   171,   172,   173,   174,     0,
+       0,     0,     0,   221,     0,     0,     0,   175,   144,   145,
+     146,     0,   176,   222,   149,   150,   151,   152,   153,   154,
+     223,  -563,  -567,     0,     0,     0,   224,     0,     0,     0,
+       0,   157,   158,   159,   160,   161,   162,     0,     0,     0,
+       0,     0,     0,     0,  -203,  -203,     0,     0,     0,   163,
+     164,   165,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   168,   169,   170,   171,   172,   173,   174,  -136,     0,
-       0,     0,     0,  -136,     0,     0,   175,     0,     0,     0,
-       0,   176,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     4,     0,     5,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
-     177,   178,     0,   179,   180,    86,     0,     0,     0,     0,
-       0,     6,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   166,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    81,   177,   178,     0,   179,   180,
+      86,     0,     0,     0,     0,     0,     0,  -503,     0,   169,
+     170,   171,   172,   173,   174,     0,     0,     0,     0,   221,
+       0,     0,     0,   175,   144,   145,   146,     0,   176,   222,
+     149,   150,   151,   152,   153,   154,   223,  -563,  -567,     0,
+       0,     0,   224,     0,     0,     0,     0,   157,   158,   159,
+     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
+    -203,  -203,     0,     0,     0,   163,   164,   165,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    81,   177,   178,     0,   179,   180,    86,
-       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
-      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
-      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
-      80,  -566,     0,     0,     0,     0,     0,     0,     0,   138,
-      84,     0,     0,     0,    87,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     4,     0,     0,     0,     0,
+      81,   177,   178,     0,   179,   225,   226,     0,     0,     0,
+       0,     0,     0,     0,     0,   169,   170,   171,   172,   173,
+     174,     0,     0,     0,     0,     0,     0,     0,     0,   175,
+       0,   144,   145,   146,   176,   147,   148,   149,   150,   151,
+     152,   153,   154,   223,  -563,   574,     0,     0,     0,   357,
+       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
+       0,     0,     0,     0,     0,     0,     0,  -203,  -203,     4,
+       0,     5,   163,   164,   165,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   166,     6,     0,     0,
+       0,     0,     0,     0,     0,     0,    81,   177,   178,     0,
+     179,   225,   226,     0,     0,     0,     0,     0,     0,     0,
+       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
+       0,     0,     0,     0,     0,     0,   575,    13,    14,    15,
+      16,   176,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,     0,     0,     0,
+       0,     0,     0,    81,   177,   557,    84,   179,   180,    86,
+      87,   144,   145,   146,     0,   147,   148,   149,   150,   151,
+     152,   153,   154,   223,  -563,   658,     0,     0,     0,   357,
+       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
+       0,     0,     0,     0,     0,     0,     0,  -203,  -203,     4,
+       0,     5,   163,   164,   165,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   166,     6,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
+       0,     0,     0,     0,     0,     0,   175,    13,    14,    15,
+      16,   176,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,     0,     0,     0,
+       0,     0,     0,    81,   177,   557,    84,   179,   180,    86,
+      87,   144,   145,   146,     0,   147,   148,   149,   150,   151,
+     152,   153,   154,   223,  -563,  -568,     0,     0,     0,   357,
+       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
+       0,     0,     0,     0,     0,     0,     0,  -203,  -203,     4,
+       0,     5,   163,   164,   165,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   166,     6,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    13,    14,    15,    16,     0,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
-      78,    79,    80,     0,     0,     0,     0,     0,   835,  1164,
-       0,   138,    84,   298,     0,   836,    87,   837,   157,   158,
-     159,   160,   161,   162,     0,     0,     0,     0,     0,  -172,
-       0,     0,     0,     0,   298,     0,   163,   164,   165,   157,
-     158,   159,   160,   161,   162,     0,     0,     0,     0,     0,
-       0,     0,  -203,  -203,     0,     0,  -172,   163,   164,   165,
-     166,   357,     0,     0,     0,     0,   157,   158,   159,   160,
-     161,   162,     0,     0,     0,     0,     0,     0,     0,  -203,
-    -203,   166,     0,   631,   163,   164,   165,     0,   298,     0,
-       0,     0,     0,   157,   158,   159,   160,   161,   162,     0,
-       0,     0,     0,     0,   713,   176,     0,     0,   166,   298,
-       0,   163,   164,   165,   157,   158,   159,   160,   161,   162,
-       0,     0,     0,     0,     0,     0,   176,     0,     0,     0,
-       0,     0,   163,   164,   165,   166,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   176,     0,     0,   166,     0,     0,     0,
+       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
+       0,     0,     0,     0,     0,     0,   175,    13,    14,    15,
+      16,   176,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,     0,     0,     0,
+       0,     0,     0,    81,   177,   557,    84,   179,   180,    86,
+      87,   144,   145,   146,     0,   147,   148,   149,   150,   151,
+     152,   153,   154,   223,  -563,  -570,     0,     0,     0,   357,
+       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
+       0,     0,     0,     0,     0,     0,     0,  -203,  -203,     4,
+       0,     5,   163,   164,   165,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    81,   177,   178,
-     176,   179,    85,    86,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,  -282,     0,     0,     0,     0,    81,   299,
-     300,   176,   179,     3,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     4,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    81,   299,   300,     0,   179,
+       0,     0,     0,     0,     0,     0,   166,     6,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,    81,   299,   300,     0,   179,     0,     0,     0,
+       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
+       0,     0,     0,     0,     0,     0,   175,    13,    14,    15,
+      16,   176,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,     0,     0,     0,
+       0,     0,     0,    81,   177,   557,    84,   179,   180,    86,
+      87,   144,   145,   146,     0,   147,   148,   149,   150,   151,
+     152,   153,   154,   223,  -563,   669,     0,     0,     0,   357,
+       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    81,   299,   300,     0,   179,     0,     0,
-       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
-      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
-      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
-      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
-      80,     0,     0,     0,     0,     0,     0,    81,    82,    83,
-      84,     0,    85,    86,    87,   298,   516,     0,     0,     0,
-     157,   158,   159,   160,   161,   162,   298,     0,     0,   597,
-       0,   157,   158,   159,   160,   161,   162,     0,   163,   164,
-     165,     0,     0,     0,     0,     0,     0,   298,   998,   163,
-     164,   165,   157,   158,   159,   160,   161,   162,   298,     0,
-       0,   693,   166,   157,   158,   159,   160,   161,   162,     0,
-     163,   164,   165,   166,     0,     0,     0,     0,     0,   298,
-    -262,   163,   164,   165,   157,   158,   159,   160,   161,   162,
-     298,     0,     0,     0,   166,   157,   158,   159,   160,   161,
-     162,     0,   163,   164,   165,   166,     0,   176,     0,     0,
-       0,     0,     0,   163,   164,   165,     0,     0,   176,     0,
-       0,     0,   345,     0,     0,     0,   166,   157,   158,   159,
-     160,   161,   162,     0,     0,     0,     0,   166,     0,   176,
-       0,     0,     0,     0,     0,   163,   164,   165,     0,   726,
-     176,     0,     0,     0,   157,   158,   159,   160,   161,   162,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   166,
-       0,   176,   163,   164,   165,     0,     0,     0,     0,    81,
-     299,   300,   176,   179,     0,     0,     0,     0,     0,     0,
-      81,   299,   300,   728,   179,     0,   166,     0,   157,   158,
+       0,     0,   163,   164,   165,   144,   145,   146,     0,   147,
+     148,   149,   150,   151,   152,   153,   154,   223,  -563,   735,
+       0,     0,     0,   357,     0,     0,   166,     0,   157,   158,
      159,   160,   161,   162,     0,     0,     0,     0,     0,     0,
-       0,    81,   299,   300,   176,   179,   163,   164,   165,     0,
-       0,     0,    81,   299,   300,     0,   179,   735,     0,     0,
-       0,     0,   736,   737,   738,   739,   740,   741,     0,     0,
-     166,   176,     0,    81,   299,   300,     0,   179,     0,     0,
-     163,   742,   743,     0,    81,   299,   300,     0,   179,     0,
+       0,     0,     0,     0,     0,     0,   163,   164,   165,     0,
+       0,   168,   169,   170,   171,   172,   173,   174,     0,     0,
+       0,     0,     0,     0,     0,     0,   175,     0,     0,     0,
+     166,   176,     0,     0,   836,     0,     0,     0,     0,   298,
+       0,   837,     0,   838,   157,   158,   159,   160,   161,   162,
+       0,     0,     0,     0,     0,   168,   169,   170,   171,   172,
+     173,   174,   163,   164,   165,     0,     0,     0,     0,     0,
+     175,     0,   144,   145,   146,   176,   147,   148,   149,   150,
+     151,   152,   153,   154,   223,  -563,   166,     0,     0,     0,
+     357,     0,     0,     0,     0,   157,   158,   159,   160,   161,
+     162,     0,     0,    81,   177,   178,     0,   179,   180,    86,
+       0,     0,     0,   163,   164,   165,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   744,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   176,    81,   299,   300,     0,
-     179,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   176,     0,     0,     0,     0,     0,   166,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    81,   177,   178,
+       0,   179,   180,    86,     0,     0,     0,     0,     0,     0,
+       0,     0,   168,   169,   170,   171,   172,   173,   174,  -136,
+       0,     0,     0,     0,  -136,     0,     0,   175,     0,     0,
+       0,     0,   176,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     4,     0,     5,     0,     0,     0,
+       0,     0,     0,    81,   177,   178,     0,   179,    85,    86,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    81,   299,   300,     0,   179,     0,   176,
-       0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
-       5,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     6,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,  -426,  -426,  -426,     0,     6,    81,   299,   300,
-       0,   179,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    81,   177,   178,     0,   179,   180,
+      86,     0,    13,    14,    15,    16,     0,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
+      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
+      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,  -566,     0,     0,     0,     0,     0,     0,     0,
+     138,    84,     0,     0,     0,    87,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     4,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    81,   745,   746,     0,   179,    13,    14,    15,    16,
-       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
-      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
-      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
-      75,    76,    77,    78,    79,    80,     4,     0,     5,     0,
-       0,     0,     0,     0,   138,    84,     0,     0,     0,    87,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     6,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
@@ -2582,357 +2473,414 @@ static const yytype_int16 yytable[] =
       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
       57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
       67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
-      77,    78,    79,    80,     4,     0,     0,     0,     0,     0,
-      81,  1113,   138,    84,     0,     0,     0,    87,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,  -426,  -426,
-    -426,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      77,    78,    79,    80,     0,     0,     0,     0,   332,     0,
+       0,     0,   138,    84,   298,     0,     0,    87,     0,   157,
+     158,   159,   160,   161,   162,     0,     0,     0,     0,  -262,
+       0,     0,     0,     0,     0,   298,     0,   163,   164,   165,
+     157,   158,   159,   160,   161,   162,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,  -172,   163,   164,
+     165,   166,   298,     0,     0,     0,     0,   157,   158,   159,
+     160,   161,   162,     0,     0,     0,     0,     0,     0,     0,
+    -203,  -203,   166,     0,  -172,   163,   164,   165,     0,   357,
+       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
+       0,     0,     0,     0,     0,     0,   176,  -203,  -203,   166,
+     716,  -711,   163,   164,   165,   298,     0,     0,     0,     0,
+     157,   158,   159,   160,   161,   162,     0,   176,     0,     0,
+       0,     0,     0,     0,     0,     0,   166,   633,   163,   164,
+     165,     0,   298,     0,     0,     0,     0,   157,   158,   159,
+     160,   161,   162,     0,   176,     0,     0,     0,     0,     0,
+       0,     0,   166,     0,     0,   163,   164,   165,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    81,   299,
+     300,   176,   179,     0,     0,     0,   298,     0,     0,   166,
+       0,   157,   158,   159,   160,   161,   162,     0,     0,    81,
+     299,   300,     0,   179,  -203,  -203,     0,   176,   716,   163,
+     164,   165,     0,   298,     0,     0,     0,     0,   157,   158,
+     159,   160,   161,   162,     0,     0,    81,   299,   300,     0,
+     179,     0,     0,   166,   176,     0,   163,   164,   165,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    81,   299,   300,     0,   179,     0,     0,
+     166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   176,    81,
+     299,   300,     0,   179,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,  -282,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     3,   176,    81,   299,   300,     0,
+     179,     0,     0,     0,     4,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,    13,    14,    15,    16,     0,    17,    18,    19,
+      81,   299,   300,     0,   179,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    81,   299,   300,
+       0,   179,    13,    14,    15,    16,     0,    17,    18,    19,
       20,    21,    22,    23,    24,    25,    26,     0,    27,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
       39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
       49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
       59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
       69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
-      79,    80,     4,     0,     0,     0,     0,     0,     0,     0,
-     138,    84,     0,     0,     0,    87,     0,     0,     0,     0,
+      79,    80,     0,     0,     0,     0,     0,     0,    81,    82,
+      83,    84,     0,    85,    86,    87,   298,   516,     0,     0,
+       0,   157,   158,   159,   160,   161,   162,   298,     0,     0,
+     599,     0,   157,   158,   159,   160,   161,   162,     0,   163,
+     164,   165,     0,     0,     0,     0,     0,     0,   298,   998,
+     163,   164,   165,   157,   158,   159,   160,   161,   162,   298,
+       0,     0,   696,   166,   157,   158,   159,   160,   161,   162,
+       0,   163,   164,   165,   166,     0,     0,     0,     0,     0,
+     298,  -262,   163,   164,   165,   157,   158,   159,   160,   161,
+     162,   298,     0,     0,     0,   166,   157,   158,   159,   160,
+     161,   162,     0,   163,   164,   165,   166,     0,   176,     0,
+       0,     0,     0,     0,   163,   164,   165,     0,     0,   176,
+       0,     0,     0,   345,     0,     0,     0,   166,   157,   158,
+     159,   160,   161,   162,     0,     0,     0,     0,   166,     0,
+     176,     0,     0,     0,     0,     0,   163,   164,   165,     0,
+     729,   176,     0,     0,     0,   157,   158,   159,   160,   161,
+     162,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     166,     0,   176,   163,   164,   165,     0,     0,     0,     0,
+      81,   299,   300,   176,   179,     0,     0,     0,     0,     0,
+       0,    81,   299,   300,   731,   179,     0,   166,     0,   157,
+     158,   159,   160,   161,   162,     0,     0,     0,     0,     0,
+       0,     0,    81,   299,   300,   176,   179,   163,   164,   165,
+       0,     0,     0,    81,   299,   300,     0,   179,   738,     0,
+       0,     0,     0,   739,   740,   741,   742,   743,   744,     0,
+       0,   166,   176,     0,    81,   299,   300,     0,   179,     0,
+       0,   163,   745,   746,     0,    81,   299,   300,     0,   179,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   747,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   176,    81,   299,   300,
+       0,   179,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    81,   299,   300,     0,   179,     0,
+     176,     0,     0,     0,     0,     0,     0,     0,     0,     4,
+       0,     5,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-      10,    11,    12,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,  -426,  -426,  -426,     0,     6,    81,   299,
+     300,     0,   179,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-      13,    14,    15,    16,     0,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,     0,    27,    28,    29,    30,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
-      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
-       4,     0,     5,     0,     0,     0,     0,     0,   138,    84,
-       0,     0,     0,    87,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     6,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    81,   748,   749,     0,   179,    13,    14,    15,
+      16,     0,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,     4,     0,     5,
+       0,     0,     0,     0,     0,   138,    84,     0,     0,     0,
+      87,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     6,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
-      15,    16,     0,    17,    18,    19,    20,    21,    22,    23,
-      24,    25,    26,     0,    27,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
-      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
-      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
-      73,    74,    75,    76,    77,    78,    79,    80,     4,     0,
-       0,     0,     0,     0,     0,     0,   138,    84,     0,     0,
-       0,    87,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,    13,    14,    15,    16,     0,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+       0,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
+      76,    77,    78,    79,    80,     4,     0,     0,     0,     0,
+       0,    81,  1113,   138,    84,     0,     0,     0,    87,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,  -426,
+    -426,  -426,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,    13,    14,    15,    16,
-       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,     0,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
-      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
-      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
-      75,    76,    77,    78,    79,    80,     0,     0,     0,     0,
-       0,     0,     0,     0,   138,    84,     0,     0,     0,    87
+       0,     0,     0,    13,    14,    15,    16,     0,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,     0,    27,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
+      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
+      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
+      78,    79,    80,     4,     0,     0,     0,     0,     0,     0,
+       0,   138,    84,     0,     0,     0,    87,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    10,    11,    12,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    13,    14,    15,    16,     0,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,     0,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
+      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
+      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
+      80,     4,     0,     5,     0,     0,     0,     0,     0,   138,
+      84,     0,     0,     0,    87,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     6,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
+      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,     0,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
+      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
+      72,    73,    74,    75,    76,    77,    78,    79,    80,     4,
+       0,     0,     0,     0,     0,     0,     0,   138,    84,     0,
+       0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
+      16,     0,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,     0,    27,    28,    29,    30,    31,    32,    33,
+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,     0,     0,     0,
+       0,     0,     0,     0,     0,   138,    84,     0,     0,     0,
+      87
 };
 
 static const yytype_int16 yycheck[] =
 {
-       0,     0,     5,   554,   122,     5,     0,   132,   441,     9,
-      10,    11,    12,   461,   395,   396,   551,   405,   313,     0,
-       3,   599,   661,   334,     5,   661,   459,   629,     9,   835,
-      10,   403,   404,    19,   840,   661,    10,   935,   844,   707,
-     157,   158,   159,   160,   161,   162,   357,   442,   235,    27,
-      10,   224,   397,   398,   407,   665,   229,   943,   231,   406,
-     971,   315,   952,     5,     0,   955,    21,   560,   144,   847,
-      25,   665,   475,    18,   507,   853,    21,   399,   400,   401,
-     402,   268,    24,   722,    24,   578,   722,    24,   665,    89,
-      89,    41,    34,  1125,  1126,    89,   722,    34,    22,    56,
-      89,    90,    26,     5,    28,    21,    19,    57,    89,    25,
-     661,   665,    21,    28,    24,    21,    25,   695,     0,    25,
-    1058,    45,   122,    25,    34,    24,   661,    21,    37,    38,
-      45,    25,   121,   122,    50,    51,   820,    28,    11,    12,
-     140,   122,   948,    52,    53,    88,   135,   130,    41,  1047,
-    1048,   151,    18,    89,    45,    22,   156,   140,    26,   140,
-      54,    55,  1194,   288,    57,  1076,    34,    34,   601,    18,
-     151,   722,  1058,  1059,   794,   175,   156,    32,    33,   847,
-     613,   492,   156,    10,   794,   853,    21,   722,    24,   809,
-      25,    11,    12,  1083,    29,  1085,   156,   975,    34,   809,
-     794,   201,   188,   189,   190,  1143,    21,   193,   194,   209,
-    1148,   211,   615,   213,   192,   809,   216,   794,   955,   614,
-     345,   201,   476,    18,   224,  1123,    21,   201,   415,   229,
-     187,   231,   809,   213,    24,   209,   216,   192,     5,   213,
-     794,   201,   216,    24,   244,   245,   188,   189,  1134,   209,
-    1136,   188,   189,   213,    24,   809,   216,    24,    25,    26,
-     683,  1199,   710,   436,   437,   245,    26,    34,     5,   580,
-     954,   245,   956,   661,    34,   392,   393,   394,   188,   189,
-     661,   665,  1088,    25,    26,   245,    28,   287,   287,   661,
-     290,   291,   292,   932,    70,    71,    72,    73,    74,    75,
-      76,    77,    78,    79,    50,    51,   287,   975,   661,   290,
-     291,   292,   312,   312,   661,   610,   661,    24,   318,    18,
-     303,   188,   189,   190,    24,    24,   193,   194,    18,   156,
-       5,   312,    21,    23,   722,    34,   112,   318,    27,   661,
-     116,   722,   118,    26,   120,    28,  1083,    10,  1085,   125,
-     722,   224,   188,   189,   190,    24,   229,    26,   231,  1245,
-     360,   137,    45,   139,    18,   441,    18,    21,   368,   722,
-     370,   244,   497,     5,   201,   722,   927,   722,   495,    21,
-      18,   983,   209,   459,    21,    27,   213,    16,    25,   216,
-     925,    34,   825,    25,    18,  1034,   819,    21,  1034,   822,
-     722,   979,    18,   836,   224,    21,   182,    23,  1034,   229,
-     794,   231,    24,    50,    51,   415,   864,    18,   245,    24,
-      21,   188,   189,   190,   244,   809,   193,   194,   188,   189,
-     190,   507,    15,   193,   194,   415,   436,   437,    24,   433,
-      26,   415,    26,   443,    28,   445,   445,    26,    34,    28,
-     444,   188,   189,   190,   454,   415,   193,   194,     5,   584,
-      18,    45,   465,    21,   445,   465,    45,   467,    21,   112,
-     113,   114,    16,   454,    27,   475,    21,    24,   478,    16,
-      25,  1120,   482,  1034,   465,    18,   467,    34,    21,   188,
-     189,   190,   475,   156,   475,   271,    21,   478,    21,  1034,
-      25,   482,    25,    16,    21,    50,    51,     5,    25,    18,
-     635,   511,    21,   188,   189,   190,    39,   102,   193,   194,
-     520,   521,    22,    25,    26,   601,    28,    25,    54,    55,
-     306,   912,   913,   309,   922,     6,     7,   613,   201,   520,
-     521,   317,    23,    45,   320,    26,   209,    28,   920,   921,
-     213,    21,  1191,   216,    22,    25,   188,   189,   190,   559,
-     560,   193,   194,   436,   437,    22,   560,   567,   567,   914,
-     915,   924,    24,    21,    26,   575,   923,    25,   578,   579,
-      50,    51,   245,    21,   578,   559,   567,    25,   415,    37,
-      38,    24,   710,    26,   916,   917,   918,   919,    21,   559,
-      29,   726,    25,   728,    52,    53,    25,    26,    39,    28,
-     735,    18,    25,    26,    21,   615,   436,   437,    25,   736,
-     737,   738,   739,   740,   741,    40,    45,    10,    11,    12,
-      18,     5,   615,    21,   615,    56,    18,   184,   185,    21,
-     935,   188,   189,    25,    95,   192,  1034,    13,    14,    15,
-      24,    25,    26,  1034,   730,    95,   432,   657,   658,    21,
-      34,   661,  1034,    25,    25,    26,   442,    28,    19,   669,
-     670,   447,   672,    42,    43,   451,    24,   453,    26,   990,
-      28,  1034,   977,    24,    45,    26,   686,  1034,   688,  1034,
-     188,   189,   190,   192,   470,   193,   194,    45,   474,   699,
-      48,    49,    34,    35,    36,   686,   706,   688,   691,   709,
-     710,   711,  1034,    21,    24,    37,    38,    25,   699,    21,
-    1168,    22,   722,    25,    22,   706,    22,   710,   709,   710,
-      52,    53,   559,    21,    68,    69,    70,    25,   104,   105,
-     106,   107,   108,   109,   110,   111,   864,   113,  1043,   825,
-     116,    95,   415,    21,    10,    11,    12,    25,  1053,    19,
-     836,    20,    21,    24,    95,    26,   132,    28,   134,   135,
-     136,    21,    22,   156,   140,   188,   189,   190,  1073,    21,
-     193,   194,    20,    25,    45,  1218,    27,    48,    49,    24,
-     156,    18,   909,   910,   911,  1090,    21,   163,    37,    38,
-      25,     0,    25,    21,   880,    18,     5,    25,     7,    10,
-      11,    12,   812,    52,    53,    32,    33,    24,   201,   185,
-      27,  1254,    24,   599,    21,    21,   209,    34,    25,    25,
-     213,    18,   832,   216,  1129,   835,    22,   837,   614,    34,
-     840,   224,   225,    21,   844,    21,   229,    25,   231,    25,
-      23,   832,    50,    51,   835,  1150,   837,   633,   224,   840,
-      18,   244,   245,   844,   864,   188,   189,   190,    24,    21,
-     193,   194,   872,    25,    24,    24,    21,    27,    21,   996,
-      25,   864,    25,   864,    34,    21,   662,    25,   664,    25,
-      89,   872,    25,    88,    18,    21,   559,    18,   264,    25,
-     156,    21,    19,    24,   103,    25,    32,    33,    29,    30,
-      31,    32,    33,    34,    22,   114,   115,    21,    34,    21,
-     696,    25,   288,    25,   290,   291,    47,    48,    49,    21,
-      32,    33,   298,    25,    21,   935,    21,   303,    25,     9,
-      25,   140,    21,   943,    18,   201,    25,    18,   948,    24,
-      71,    26,   318,   209,    21,   156,    18,   213,    25,    34,
-     216,    21,    21,    54,    55,    25,    25,   948,   224,    11,
-      21,   747,    21,   229,    25,   231,    25,  1102,    18,   345,
-      21,   188,   189,   190,    25,   192,    20,    21,   244,   245,
-     373,   357,    21,   188,   189,   116,    25,    25,   193,   194,
-     201,  1001,  1002,   114,   115,    21,    24,    21,   209,    25,
-      11,    25,   213,    20,    21,   216,    34,    34,    35,    36,
-    1001,  1002,    24,   224,    21,    22,   802,   803,   229,    34,
-     231,    24,   415,    26,  1034,    91,    32,    33,   188,   189,
-     190,    34,   192,   244,   245,  1045,    21,  1047,  1048,    19,
-    1168,  1045,    19,   436,   437,    19,  1056,    19,  1058,  1059,
-      52,    53,    54,    24,    91,    24,   432,   188,   189,   190,
-     846,   192,   188,   189,   190,  1075,    27,   193,   194,   195,
-    1080,  1080,    25,    21,    21,   451,    22,   453,  1088,   455,
-      18,    25,   458,  1093,  1093,   461,    25,   463,  1098,  1080,
-      21,    25,  1178,   302,    11,    24,   472,  1088,    22,   475,
-    1093,    24,  1093,   188,   189,   190,   482,  1098,   193,   194,
-    1120,  1121,  1122,  1123,    24,  1125,  1126,    25,    27,    23,
-      20,   497,    19,    19,  1134,    20,  1136,    21,    27,  1139,
-    1121,  1122,  1218,  1143,    23,  1145,  1146,    24,  1148,    21,
-       5,  1154,    25,    19,  1154,    22,    25,  1233,    20,   415,
-      24,    73,    20,    24,  1145,  1146,   184,   185,  1168,    25,
-     188,   189,    25,  1154,   192,   951,   559,    27,  1254,    27,
-     436,   437,    18,   188,   189,   190,    21,  1168,   193,   194,
-      21,  1191,  1192,  1193,  1194,   188,   189,   190,    25,  1199,
-     193,   194,   195,   979,    22,    29,    39,    56,    40,    21,
-      25,  1192,  1193,    25,   415,   581,    23,    21,   584,  1219,
-    1219,    25,    34,    35,    36,    25,   189,    25,    10,    18,
-      34,    35,    36,    25,   600,   436,   437,    91,  1219,    91,
-      91,   607,   608,   609,    91,  1245,    91,    22,    91,   615,
-      24,    58,    59,    60,    61,    62,    63,    64,    65,    66,
-      67,    10,    11,    12,    20,    25,    25,    25,    18,   635,
-      25,    10,    11,    12,    22,    21,   144,    18,    40,    21,
-     646,   647,   192,    27,    20,    18,    23,    22,    18,   157,
-     158,   159,   160,   161,   162,   661,   164,   165,    24,   194,
-      91,    22,  1078,   559,    22,    21,    21,    20,    22,    20,
-      91,   677,    40,    25,   196,    25,    18,    18,    27,   685,
-      27,   687,    25,    24,    20,   691,    20,    27,    29,    30,
-      31,    32,    33,    34,   700,   701,    25,    89,   318,   705,
-     943,  1245,  1212,   709,   710,  1139,    47,    48,    49,  1037,
-     132,   697,   211,  1111,  1046,  1075,   722,  1191,   559,   893,
-     726,   348,   728,   185,   841,   832,   807,  1219,   584,   735,
-      71,   688,   154,   686,   156,   864,   130,   303,    12,   709,
-     511,   244,  1158,   355,   415,  1174,   713,   374,   870,   722,
-    1034,   869,   379,   380,   381,   382,   383,   384,   385,   386,
-     387,   388,   389,    -1,    -1,    -1,    -1,   156,    -1,    -1,
-      -1,    10,    11,    12,    -1,   116,    -1,   156,    -1,   201,
-      -1,    -1,    -1,   622,    -1,   412,    -1,   209,    -1,    -1,
-      -1,   213,    -1,    -1,   216,    -1,   123,   124,   125,   126,
-      -1,   128,   224,    -1,    -1,    -1,   133,   134,    -1,   815,
-     137,   138,   201,   140,   141,   142,   143,    -1,    -1,    -1,
-     209,    -1,   201,   245,   213,    -1,    -1,   216,   155,   156,
-     209,    -1,    -1,    -1,   213,   224,  1252,   216,    -1,    -1,
-     229,    -1,   231,    -1,    -1,   224,    -1,   188,   189,   190,
-     229,   192,   231,    -1,   181,   244,   245,   863,   864,    -1,
-     866,   360,    -1,    -1,   191,   244,   245,    -1,    -1,   368,
-      -1,   370,    23,    -1,    -1,    -1,   298,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   392,   393,   394,   395,   396,   397,
-     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
-      -1,    -1,    -1,   325,   326,   327,   328,    58,    59,    60,
-      61,    62,    63,    64,    65,    66,    67,   156,    -1,    -1,
-      -1,    -1,    -1,   345,    -1,    -1,    -1,   349,    -1,    73,
-      74,    75,    76,   441,    -1,   357,    80,    81,    82,    83,
-      84,    85,    86,    -1,   443,   951,    -1,    -1,    -1,    -1,
-      -1,   459,   958,   375,    -1,    -1,    -1,    -1,    10,    11,
-      12,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     209,    -1,    -1,    -1,   213,    -1,    -1,   216,   817,    -1,
-      -1,   820,    -1,    -1,    -1,   224,    -1,   495,    -1,    -1,
-     229,    -1,   231,   415,    -1,    -1,    -1,    -1,    -1,   507,
-      -1,   423,    -1,    -1,   631,   244,   245,    -1,    -1,    -1,
-      -1,    -1,   511,    -1,    -1,    -1,   643,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   415,    -1,  1034,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,
-      -1,    -1,    -1,   551,    -1,    -1,   554,   436,   437,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   436,   437,    -1,
-      -1,   560,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,  1077,   699,    -1,    -1,    -1,    -1,    -1,    -1,   578,
-     579,    -1,    -1,    -1,    -1,    -1,   713,  1093,    -1,    -1,
-    1096,    -1,    -1,   601,    -1,    -1,  1102,    -1,    -1,  1105,
-    1106,    -1,    -1,    -1,   156,   613,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   952,    -1,   954,   955,   956,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   553,    -1,    -1,    -1,    -1,    -1,   559,    -1,    -1,
-     648,   649,    -1,  1149,    -1,    -1,    -1,    -1,    -1,   201,
-    1156,  1157,    -1,   661,    -1,    -1,    -1,   209,   657,   658,
-      -1,   213,  1168,    -1,   216,    -1,    -1,    -1,    -1,    -1,
-     559,   670,   224,    -1,    -1,    -1,   415,   229,    -1,   231,
-     559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1195,
-      -1,    -1,   244,   245,    -1,    -1,    -1,   436,   437,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   629,   835,  1215,
-    1216,    -1,   711,   840,   722,    -1,  1222,   844,    -1,    -1,
-      -1,    -1,   730,    -1,    -1,    -1,    -1,    -1,   736,   737,
-     738,   739,   740,   741,   742,   743,    -1,   659,    -1,    -1,
-      -1,   663,    -1,   870,  1083,    -1,  1085,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   892,   893,    -1,    -1,    -1,
-      -1,   898,   899,   900,   901,   902,   903,   904,   905,   906,
-     907,   908,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
-      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,   721,
-      -1,    -1,    42,    43,   726,    -1,   728,    47,    48,    49,
-      -1,    -1,    -1,   735,    -1,    -1,    -1,   825,    -1,    -1,
-     559,   948,    -1,    -1,    -1,    -1,    -1,     1,   836,    -1,
-      -1,    71,     6,     7,     8,    -1,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
-      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
-      34,    -1,    -1,   415,    -1,    -1,    -1,    -1,    42,    43,
-      -1,    -1,   880,    47,    48,    49,   116,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   436,   437,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
-      -1,   909,   910,   911,   912,   913,   914,   915,   916,   917,
-     918,   919,   920,   921,   922,   923,   924,   925,    -1,   927,
-      -1,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
-      -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,   188,   189,
-     190,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,  1088,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   894,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   996,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   559,    -1,    -1,
-      -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,
-     194,    -1,    -1,    -1,    -1,    -1,  1034,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
-       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,    23,    24,    -1,
-      26,   983,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
-      -1,    47,    48,    49,    50,    51,    52,    53,    54,    55,
-      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
-      66,    67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
-    1032,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
+       0,     0,   441,     5,   663,     5,   551,   601,   122,     9,
+      10,    11,    12,   461,   395,   396,     3,   663,     0,     0,
+     459,   631,   235,   686,     5,   334,   313,   405,     9,   397,
+     398,   944,   442,   403,   404,   663,   132,   406,   936,   554,
+     475,   667,   157,   158,   159,   160,   161,   162,   357,   224,
+     710,    10,     5,    27,   229,   268,   231,   971,   315,   667,
+     667,   407,  1058,     5,    56,     0,   725,    21,   507,    10,
+      21,    25,   836,    34,    25,  1125,  1126,   841,     5,   725,
+     848,   845,    24,    25,    26,    24,   854,     5,    28,    89,
+      89,    21,    34,    18,    20,    25,    20,   725,    25,    50,
+      51,    11,    12,     0,   698,    45,    24,    89,    89,    11,
+      12,    25,    26,   667,    28,   797,    34,    10,   663,    24,
+     821,    28,   122,    18,    54,    55,    18,    88,    23,    34,
+     812,    45,    24,    21,    25,    26,   667,    28,    45,    27,
+     140,   122,    34,   130,  1194,  1058,  1059,  1143,   663,  1047,
+    1048,   151,  1148,   140,    89,    26,   156,   820,    41,   140,
+     823,   144,  1076,    34,   603,   399,   400,   401,   402,    21,
+     151,   797,    21,    25,    57,   175,   615,    41,    27,    19,
+     725,    24,   617,   492,   948,   111,   812,   111,   848,   797,
+     797,    34,   288,    57,   854,   187,    18,   156,    24,    21,
+     955,   201,   415,  1199,   812,   812,   616,   975,    34,   209,
+     725,   211,    19,   213,    18,   156,   216,    21,   192,   476,
+      26,  1134,    28,  1136,   224,  1123,    21,   188,   189,   229,
+      25,   231,   193,   194,    29,   188,   189,   190,   192,    45,
+     193,   194,   201,   797,   244,   245,   188,   189,   190,   345,
+     209,   193,   194,   954,   213,   956,    18,   216,   812,    21,
+     201,   436,   437,   156,    18,   713,   797,    21,   209,     0,
+     188,   189,   213,   582,     5,   216,     7,   392,   393,   394,
+      24,   812,   663,   188,   189,   663,   245,   287,   287,    18,
+     290,   291,   292,   663,   663,   663,   188,   189,   190,    13,
+      14,    15,    88,    21,   245,   933,   287,    25,   201,   290,
+     291,   292,   312,   312,   224,   975,   303,   663,   318,   229,
+     213,   231,   224,   216,  1088,   612,    21,   229,  1083,   231,
+    1085,   312,  1245,    21,   244,    25,    26,   318,    24,    27,
+      26,    24,   244,    26,   725,   188,   189,   725,   188,   189,
+     190,    34,   245,   193,   194,   725,   725,   725,    89,    24,
+     360,    34,   188,   189,   190,    21,    10,    21,   368,    25,
+     370,    25,   103,   983,   952,  1034,    24,   955,    26,   725,
+     495,   926,    21,   114,   115,   979,    25,   826,  1034,    24,
+     104,   105,   106,   107,   108,   109,   110,   111,   837,   113,
+      24,   497,   116,    10,    21,    24,  1034,     5,    25,   140,
+      21,    50,    51,   928,    25,   415,    18,   865,   132,    21,
+     134,   135,   136,    25,    32,    33,   140,    25,    39,   663,
+      24,    21,    26,    50,    51,    25,   436,   437,    24,   112,
+     113,   114,   156,   443,    18,   445,   445,    89,    90,   163,
+      18,   433,    25,    26,   454,    28,   415,    24,   441,    26,
+      50,    51,   444,   465,   445,   465,    18,   467,    26,    21,
+      28,   185,    45,   454,   415,   475,   459,    26,   478,   121,
+     122,    24,   482,    24,   465,    34,   467,    45,   475,  1034,
+     586,   725,  1120,   135,   475,    16,     5,   478,   188,   189,
+     190,   482,    21,   193,   194,  1083,    25,  1085,    16,     5,
+     224,   511,   156,    32,    33,    24,    25,    26,    16,  1034,
+     520,   521,   415,    16,   507,    34,   436,   437,    18,    25,
+      15,    21,   913,   914,   436,   437,    50,    51,    22,   520,
+     521,   637,    26,    18,    28,   923,    21,   915,   916,   156,
+     264,   921,   922,    25,    26,   924,    28,   201,    21,   559,
+     560,    45,    25,  1191,    26,   209,    28,   567,   567,   213,
+     102,   302,   216,    45,   288,   575,   290,   291,   560,   925,
+     580,   581,    18,    45,   298,    21,   567,    23,    22,   303,
+     188,   189,   190,     5,   201,   193,   194,    22,   580,   713,
+     559,   245,   209,    21,   318,     5,   213,    25,    18,   216,
+      29,    21,    24,    10,    11,    12,   175,   617,   559,    21,
+     603,    56,    34,    25,   739,   740,   741,   742,   743,   744,
+     617,   345,   615,   729,    18,   731,   617,    21,   245,   188,
+     189,   190,   738,   357,   193,   194,    22,    18,    39,   936,
+      21,    21,   211,  1034,    25,    25,  1034,    40,    24,   659,
+     660,    27,    95,   663,  1034,  1034,  1034,    95,    34,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    54,
+      55,   990,    19,   917,   918,   919,   920,   192,  1034,   689,
+     977,   691,   188,   189,   190,    24,    23,   193,   194,    26,
+      22,    28,   702,    10,    11,    12,    22,   694,   689,   709,
+     691,   112,   712,   713,   714,   116,    22,   118,   432,   120,
+    1168,   702,    95,    21,   125,   725,   713,    25,   709,    21,
+      19,   712,   713,    25,    32,    33,   137,   451,   139,   453,
+      95,   455,    21,    20,   458,    27,    25,   461,    21,   463,
+     733,   865,    25,    21,     6,     7,  1043,    25,   472,   156,
+      24,   475,    42,    43,    24,    18,  1053,    27,   482,    37,
+      38,   415,   184,   185,    34,    22,   188,   189,    21,  1218,
+     192,   182,    25,   497,    52,    53,  1073,    34,   188,   189,
+     190,    37,    38,   193,   194,   910,   911,   912,    37,    38,
+    1034,   360,    34,  1090,   201,    25,    52,    53,   415,   368,
+      18,   370,   209,    52,    53,  1254,   213,    21,    24,   216,
+      26,    25,   188,   189,   190,    21,   192,   224,    34,    25,
+      18,    21,   229,   833,   231,    25,   836,    34,   838,    23,
+      21,   841,  1129,   826,    25,   845,    21,   244,   245,   156,
+      25,    24,   833,    22,   837,   836,    18,   838,    21,    24,
+     841,    25,    25,  1150,   845,   865,    25,    21,    24,   583,
+     271,    25,   586,   873,    37,    38,    21,    18,   865,    21,
+      25,   996,    21,    25,   865,    18,    25,    21,   602,    52,
+      53,    25,   873,   624,   201,   609,   610,   611,   881,    18,
+      21,    18,   209,   617,    25,   306,   213,    21,   309,   216,
+      21,    25,    20,    21,    25,   559,   317,   224,   225,   320,
+      18,    21,   229,   637,   231,    25,    19,    21,   188,   189,
+     190,    25,   192,    22,   648,   649,   936,   244,   245,    21,
+      22,   188,   189,   190,   944,     9,   193,   194,   948,   663,
+      24,    11,   559,    32,    33,    21,   188,   189,   190,    25,
+      34,   193,   194,   195,    50,    51,   680,   948,    34,    35,
+      36,    21,    25,    21,   688,    25,   690,    25,    54,    55,
+     694,    21,   188,   189,   190,    25,    24,   193,   194,   703,
+     704,   188,   189,   190,   708,    11,   193,   194,   712,   713,
+      21,  1001,  1002,    91,    25,    24,  1102,    26,    21,    28,
+      21,   725,    25,    21,    25,   729,   575,   731,   415,    19,
+    1001,  1002,   581,    21,   738,    19,    45,    25,    21,    48,
+      49,   432,    25,    19,  1034,    19,    34,    35,    36,   436,
+     437,   442,    68,    69,    70,  1045,   447,  1047,  1048,    24,
+     451,    27,   453,    24,  1168,    26,  1056,    28,  1058,  1059,
+      91,    21,    24,  1045,    26,    25,   373,    21,    24,   470,
+      25,    25,    34,   474,    45,  1075,    22,    48,    49,    21,
+    1080,  1080,    18,    10,    11,    12,    21,   818,  1088,    21,
+     821,    20,    21,  1093,  1093,    34,    35,    36,  1098,  1080,
+     659,   660,   816,    34,    35,    36,  1093,  1088,   415,    25,
+     184,   185,  1093,    25,   188,   189,    25,  1098,   192,    11,
+    1120,  1121,  1122,  1123,    24,  1125,  1126,    20,    21,   436,
+     437,    52,    53,    54,  1134,    22,  1136,    21,    22,  1139,
+    1121,  1122,    24,  1143,    24,  1145,  1146,    20,  1148,    27,
+     864,   865,  1154,   867,  1154,   714,    32,    33,    25,    10,
+      23,    19,   559,   144,  1145,  1146,    23,    20,  1168,   114,
+     115,    19,    27,  1154,    23,    21,   157,   158,   159,   160,
+     161,   162,    24,   164,   165,    21,     5,  1168,    25,    19,
+      22,  1191,  1192,  1193,  1194,  1178,    24,    20,    20,  1199,
+     601,    58,    59,    60,    61,    62,    63,    64,    65,    66,
+      67,  1192,  1193,    25,    20,   616,    20,    25,    23,  1219,
+    1219,   952,    25,   954,   955,   956,   188,   189,   190,   156,
+      27,   193,   194,   195,   635,  1218,    27,   951,  1219,    73,
+      18,   188,   189,   190,   958,  1245,   193,   194,    21,    21,
+    1233,    25,   559,    58,    59,    60,    61,    62,    63,    64,
+      65,    66,    67,   664,    22,   666,    29,    24,    39,    56,
+      40,  1254,    25,    91,   201,   189,    91,    91,    91,    25,
+      91,   132,   209,    25,    18,    22,   213,    25,    24,   216,
+      91,    20,    25,    25,    25,    18,    21,   224,   699,    25,
+      22,    18,   229,   154,   231,   156,   192,   348,    27,    20,
+      40,    18,    21,    23,    22,    18,    91,   244,   245,    24,
+    1034,    22,    10,    11,    12,   194,    22,    21,    21,    20,
+      22,    20,    91,   374,   196,    25,    40,    18,   379,   380,
+     381,   382,   383,   384,   385,   386,   387,   388,   389,   750,
+     201,    25,  1083,    20,  1085,    27,    27,    25,   209,    20,
+      25,    27,   213,  1077,   944,   216,   318,  1245,    89,  1139,
+    1212,   412,   700,   224,  1037,  1111,    10,    11,    12,  1093,
+    1046,  1191,  1096,  1075,   894,   185,   833,   842,  1102,   810,
+    1219,  1105,  1106,   586,   245,   691,   689,   865,   712,   303,
+      12,   244,   130,  1174,   805,   806,   355,   581,   580,   511,
+     415,   392,   393,   394,   395,   396,   397,   398,   399,   400,
+     401,   402,   403,   404,   405,   406,   407,   871,   716,   560,
+     725,  1034,   870,    -1,    -1,  1149,    -1,    -1,    -1,    -1,
+      -1,    -1,  1156,  1157,    -1,    -1,   847,   298,    -1,    -1,
+      -1,    -1,    -1,    -1,  1168,    -1,    -1,    -1,    -1,    -1,
+     441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,    -1,
+      -1,    -1,    -1,    -1,   325,   326,   327,   328,   459,    -1,
+      -1,  1195,    -1,    -1,    -1,    10,    11,    12,   415,    -1,
+      -1,    -1,    -1,    -1,   345,    -1,    -1,    -1,   349,    -1,
+      -1,  1215,  1216,    -1,    -1,    -1,   357,    -1,  1222,   436,
+     437,    -1,    -1,   201,   495,    -1,    -1,    -1,    -1,    -1,
+      -1,   209,   156,    -1,   375,   213,   507,    -1,   216,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,
+      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,
+     951,    -1,    -1,    -1,    -1,    -1,   244,   245,    -1,    -1,
+      -1,    -1,    -1,    -1,   415,    -1,    -1,   201,    -1,    -1,
+     551,    -1,   423,   554,    -1,   209,    -1,    -1,   979,   213,
+      -1,    -1,   216,    -1,    -1,    -1,    -1,    10,    11,    12,
+     224,    -1,   633,    -1,    -1,   229,    -1,   231,    -1,    -1,
+      -1,    -1,    -1,    -1,   645,    -1,    -1,    -1,    -1,    -1,
+     244,   245,    -1,    -1,    19,    20,    -1,    -1,    -1,    24,
+      -1,    26,   603,    28,    29,    30,    31,    32,    33,    34,
+      -1,   156,   559,    -1,   615,   123,   124,   125,   126,    -1,
+     128,    -1,    47,    48,    49,   133,   134,    -1,    -1,   137,
+     138,    -1,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
+      -1,   702,    -1,    -1,    -1,    -1,    71,   155,   156,   650,
+     651,    -1,    -1,    -1,    -1,   716,   201,  1078,    -1,    -1,
+      -1,    -1,   663,    -1,   209,    -1,    -1,    -1,   213,    -1,
+      -1,   216,    -1,   181,    -1,    -1,    -1,    -1,    -1,   224,
+      -1,    -1,   553,   191,   229,    -1,   231,    -1,   559,    -1,
+      -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,
+     245,    -1,    -1,    -1,    -1,    -1,    -1,   415,    73,    74,
+      75,    76,    -1,   156,    -1,    80,    81,    82,    83,    84,
+      85,    86,    -1,    -1,   725,    -1,    -1,    -1,   436,   437,
+      -1,    -1,   733,    -1,    -1,    -1,    -1,  1158,   739,   740,
+     741,   742,   743,   744,   745,   746,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,
+     631,   415,    -1,   188,   189,   190,   209,   192,   193,   194,
+     213,    -1,    -1,   216,    -1,   836,    -1,    -1,    -1,    -1,
+     841,   224,   436,   437,   845,    -1,   229,    -1,   231,    -1,
+     661,    -1,    -1,    -1,   665,    -1,    -1,    -1,    -1,    -1,
+      -1,   244,   245,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   826,    -1,    -1,    -1,    -1,
+      -1,  1252,   893,   894,    -1,    -1,   837,    -1,   899,   900,
+     901,   902,   903,   904,   905,   906,   907,   908,   909,    -1,
+      -1,   559,    -1,   724,    -1,    -1,    -1,    -1,   729,    -1,
+     731,    -1,    -1,    -1,    -1,    -1,    -1,   738,    -1,    -1,
+     415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     881,    -1,    -1,    -1,    -1,    -1,    -1,   948,    -1,    -1,
+      -1,   436,   437,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   559,    -1,    -1,    -1,   910,
+     911,   912,   913,   914,   915,   916,   917,   918,   919,   920,
+     921,   922,   923,   924,   925,   926,    -1,   928,    -1,     0,
        1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      96,    97,    98,    99,   100,   101,   102,    18,    -1,    -1,
-      -1,    -1,    -1,    24,    -1,   111,    -1,    -1,    -1,    -1,
-     116,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    44,    -1,    46,    -1,    -1,    -1,    -1,
-    1178,    -1,    -1,    -1,    -1,  1097,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
-      -1,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,
+      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   415,    44,    -1,    46,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    1218,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   188,   189,   190,  1233,   192,   193,   194,    -1,
+      -1,    -1,    -1,   436,   437,   996,    -1,    68,    69,    70,
+      -1,    72,    -1,    -1,    -1,    -1,    77,    78,    79,    -1,
+      -1,    -1,    -1,    -1,   559,    -1,    -1,    -1,    -1,    -1,
+      -1,    92,    93,    94,   895,    -1,    -1,  1088,    -1,    -1,
+      -1,    -1,    -1,  1034,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
-     121,   122,   123,   124,   125,   126,  1254,   128,   129,   130,
+     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
      131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
      141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
      151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
      171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
-     181,     0,     1,    -1,    -1,    -1,    -1,   188,   189,   190,
-     191,    -1,   193,   194,   195,    -1,    -1,    -1,    -1,    18,
-      -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    44,    -1,    46,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
-      69,    70,    -1,    72,    -1,    -1,    -1,    -1,    77,    78,
-      79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    92,    93,    94,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   112,   113,   114,   115,    -1,   117,   118,
-     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
-     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
-     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
-     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,
-     189,   190,   191,     1,   193,   194,   195,    -1,     6,     7,
-       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
-      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
-      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     181,    -1,   983,    -1,    -1,    -1,   559,   188,   189,   190,
+     191,    -1,   193,   194,   195,    -1,     0,     1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      68,    69,    70,    71,    72,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,
+      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      34,  1032,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      44,    -1,    46,    -1,    -1,    -1,    -1,  1178,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
-      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
-     118,   119,   120,   121,   122,   123,   124,   125,   126,    -1,
-     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
-     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
-     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
-     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
-     178,   179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,
-     188,   189,   190,   191,   192,   193,   194,   195,     1,    -1,
-      -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    72,    -1,
+      -1,    -1,    -1,    77,    78,    79,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1218,    92,    93,
+      94,    -1,    -1,    -1,    -1,    -1,  1097,    -1,    -1,    -1,
+      -1,    -1,  1233,    -1,    -1,    -1,    -1,    -1,   112,   113,
+     114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
+     124,   125,   126,  1254,   128,   129,   130,   131,   132,   133,
+     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
+     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
+     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
+     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
+     174,   175,   176,   177,   178,   179,   180,   181,    -1,    -1,
+      -1,    -1,    -1,    -1,   188,   189,   190,   191,     1,   193,
+     194,   195,    -1,     6,     7,     8,    -1,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
       -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
       33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
-      43,    44,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
+      43,    44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    -1,
+      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    72,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    96,    97,    98,    99,   100,   101,   102,
@@ -2946,15 +2894,15 @@ static const yytype_int16 yycheck[] =
      173,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
       -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,   192,
      193,   194,   195,     1,    -1,    -1,    -1,    -1,     6,     7,
-       8,    -1,    -1,    11,    12,    13,    14,    15,    16,    17,
-      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
+       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
       -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    42,    43,    44,    -1,    -1,    47,
       48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
       98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,   111,   112,   113,   114,   115,   116,   117,
      118,   119,   120,   121,   122,   123,   124,   125,   126,    -1,
@@ -2965,299 +2913,234 @@ static const yytype_int16 yycheck[] =
      168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
      178,   179,   180,   181,    -1,    -1,    -1,    -1,    -1,    -1,
      188,   189,   190,   191,   192,   193,   194,   195,     1,    -1,
-      -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
+      -1,    -1,    -1,     6,     7,     8,    -1,    -1,    11,    12,
+      13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
       -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
       33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
-      43,    -1,     1,    -1,    47,    48,    49,     6,     7,     8,
-      -1,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    -1,    -1,    -1,    24,    25,    -1,    71,    -1,
-      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,    48,
-      49,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
-      -1,    -1,    71,   116,    -1,    -1,    -1,    -1,    -1,    -1,
+      43,    44,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    97,    98,
-      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   111,    -1,    -1,    -1,    -1,   116,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    68,    69,    70,    71,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,
-     193,   194,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
-       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
-      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,   188,
-     189,   190,    -1,   192,   193,   194,    42,    43,    -1,     1,
-      -1,    47,    48,    49,     6,     7,     8,    -1,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    19,    -1,    -1,
-      -1,    -1,    24,    -1,    -1,    71,    -1,    29,    30,    31,
-      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
-      96,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    71,
-     116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    97,    98,    99,   100,   101,   102,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,   112,
+     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
+     123,   124,   125,   126,    -1,   128,   129,   130,   131,   132,
+     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
+     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,   180,   181,    -1,
+      -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,   192,
+     193,   194,   195,     1,    -1,    -1,    -1,    -1,     6,     7,
+       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    -1,    26,    -1,
+      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+      38,    39,    40,    41,    42,    43,    -1,    45,    -1,    47,
+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
+      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
+      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
-     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,   111,
-      -1,    -1,    -1,    24,   116,    26,    -1,    28,    29,    30,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
+      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
+       1,    -1,    -1,   111,    -1,     6,     7,     8,   116,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
+      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
       31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
-      -1,    -1,   188,   189,   190,    -1,   192,   193,   194,    -1,
-      -1,    -1,     1,    -1,    -1,    -1,    -1,     6,     7,     8,
-      71,    -1,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
-      29,    30,    31,    32,    33,    34,   188,   189,   190,    -1,
-     192,   193,   194,    42,    43,    -1,     1,    -1,    47,    48,
-      49,     6,     7,     8,    -1,   116,    11,    12,    13,    14,
-      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
-      -1,    -1,    71,    -1,    29,    30,    31,    32,    33,    34,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
-      -1,    -1,    47,    48,    49,    -1,    95,    -1,    97,    98,
-      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
-      19,    20,   111,    -1,    -1,    24,    71,   116,    -1,    -1,
-      29,    30,    31,    32,    33,    34,    -1,   188,   189,   190,
-      -1,   192,   193,   194,    -1,    -1,    -1,    -1,    47,    48,
-      49,    -1,    97,    98,    99,   100,   101,   102,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,
-      -1,   116,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
-     189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,     6,     7,     8,   116,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
-      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
-      32,    33,    34,   188,   189,   190,    -1,   192,   193,   194,
-      42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
-      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
-     189,   190,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
-     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
-     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
-     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
-     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
-     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
-     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
-     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
-      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,
-     192,   193,   194,   195,     6,     7,     8,    -1,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
-      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
-      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
-      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
-     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
-     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
-     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
-     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
-     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
-     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
-     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
-      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,
-     192,   193,   194,   195,     6,     7,     8,    -1,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
-      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
-      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
-      72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
+     101,   102,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
+     111,    -1,     6,     7,     8,   116,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
+      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
+      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
+      -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,   101,
-     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
-     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
-     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
-     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
-     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
-     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
-     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
-      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,   191,
-     192,   193,   194,   195,     6,     7,     8,    -1,    10,    11,
-      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
-      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
-      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    47,    48,    49,     6,     7,
-       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
-      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    71,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
+      -1,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
+      -1,    -1,    -1,     1,    -1,    -1,    -1,   111,     6,     7,
+       8,    -1,   116,    11,    12,    13,    14,    15,    16,    17,
+      18,    19,    20,    -1,    -1,    -1,    24,    25,    -1,    -1,
       -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,
-      48,    49,    -1,    -1,    96,    97,    98,    99,   100,   101,
-     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
-      -1,    -1,    -1,    71,   116,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,
+      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    97,
+      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,
+     194,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    97,
       98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   111,    -1,     6,     7,     8,   116,    10,
+       1,    -1,    -1,   111,    -1,     6,     7,     8,   116,    10,
       11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
       -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
-      31,    32,    33,    34,    -1,    -1,   188,   189,   190,    -1,
-     192,   193,   194,    -1,    -1,    -1,    47,    48,    49,     6,
-       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
-      71,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
-     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
-      47,    48,    49,    -1,    -1,    96,    97,    98,    99,   100,
-     101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     111,    -1,    -1,    -1,    71,   116,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
-      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   111,    -1,     6,     7,     8,   116,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
-      20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
-      30,    31,    32,    33,    34,    -1,    -1,   188,   189,   190,
-      -1,   192,   193,   194,    -1,    -1,    -1,    47,    48,    49,
-       6,     7,     8,    -1,    10,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,
-      -1,    71,    -1,    29,    30,    31,    32,    33,    34,    -1,
-      -1,   188,   189,   190,    -1,   192,   193,   194,    -1,    -1,
-      -1,    47,    48,    49,    -1,    -1,    96,    97,    98,    99,
-     100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   111,    -1,    -1,    -1,    71,   116,    -1,    -1,    -1,
+      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      96,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   111,    -1,     6,     7,     8,
-     116,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
-      29,    30,    31,    32,    33,    34,    -1,    -1,   188,   189,
-     190,    -1,   192,   193,   194,    -1,    -1,    -1,    47,    48,
-      49,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
-      15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    24,
-      -1,    -1,    71,    -1,    29,    30,    31,    32,    33,    34,
-      -1,    -1,   188,   189,   190,    -1,   192,   193,   194,    -1,
-      -1,    -1,    47,    48,    49,    -1,    -1,    96,    97,    98,
-      99,   100,   101,   102,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   111,    -1,    -1,    -1,    71,   116,    -1,    -1,
+      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,
+     101,   102,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
+     111,    -1,     6,     7,     8,   116,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
+      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
+      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
+      -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
+      -1,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    96,    97,    98,    99,   100,   101,   102,    -1,
+      -1,    -1,    -1,     1,    -1,    -1,    -1,   111,     6,     7,
+       8,    -1,   116,    11,    12,    13,    14,    15,    16,    17,
+      18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,
+      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    47,
+      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    96,    97,    98,    99,   100,   101,   102,    19,    -1,
-      -1,    -1,    -1,    24,    -1,    -1,   111,    -1,    -1,    -1,
-      -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    44,    -1,    46,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
-     189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,    -1,
-      -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,
+     194,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    97,
+      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,     1,
+      -1,    -1,    -1,   111,     6,     7,     8,    -1,   116,    11,
+      12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
+      -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
+      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      42,    43,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,   194,
-      -1,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
-     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
-     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
-     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
-     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
-     181,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,
-     191,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
+     188,   189,   190,    -1,   192,   193,   194,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    97,    98,    99,   100,   101,
+     102,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
+      -1,     6,     7,     8,   116,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
+      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
+      -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,
+     192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
+     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
+     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,    -1,    -1,    -1,
+      -1,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
+     195,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
+      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
+      -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
+     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
+     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,    -1,    -1,    -1,
+      -1,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
+     195,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
+      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
+      -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   112,   113,   114,   115,    -1,   117,   118,
-     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
-     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
-     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
-     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     179,   180,   181,    -1,    -1,    -1,    -1,    -1,    19,    20,
-      -1,   190,   191,    24,    -1,    26,   195,    28,    29,    30,
-      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    19,
-      -1,    -1,    -1,    -1,    24,    -1,    47,    48,    49,    29,
-      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    42,    43,    -1,    -1,    19,    47,    48,    49,
-      71,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
-      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
-      43,    71,    -1,    19,    47,    48,    49,    -1,    24,    -1,
-      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
-      -1,    -1,    -1,    -1,    19,   116,    -1,    -1,    71,    24,
-      -1,    47,    48,    49,    29,    30,    31,    32,    33,    34,
-      -1,    -1,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,
-      -1,    -1,    47,    48,    49,    71,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   116,    -1,    -1,    71,    -1,    -1,    -1,
+      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
+     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
+     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,    -1,    -1,    -1,
+      -1,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
+     195,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
+      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
+      -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
-     116,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,   188,   189,
-     190,   116,   192,    34,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,
+      -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   188,   189,   190,    -1,   192,    -1,    -1,    -1,
+      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   111,   112,   113,   114,
+     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
+     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,    -1,    -1,    -1,
+      -1,    -1,    -1,   188,   189,   190,   191,   192,   193,   194,
+     195,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
+      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   188,   189,   190,    -1,   192,    -1,    -1,
-      -1,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
-     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
-     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
-     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
-     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
-     181,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
-     191,    -1,   193,   194,   195,    24,    25,    -1,    -1,    -1,
-      29,    30,    31,    32,    33,    34,    24,    -1,    -1,    27,
-      -1,    29,    30,    31,    32,    33,    34,    -1,    47,    48,
-      49,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,    47,
-      48,    49,    29,    30,    31,    32,    33,    34,    24,    -1,
-      -1,    27,    71,    29,    30,    31,    32,    33,    34,    -1,
-      47,    48,    49,    71,    -1,    -1,    -1,    -1,    -1,    24,
-      25,    47,    48,    49,    29,    30,    31,    32,    33,    34,
-      24,    -1,    -1,    -1,    71,    29,    30,    31,    32,    33,
-      34,    -1,    47,    48,    49,    71,    -1,   116,    -1,    -1,
-      -1,    -1,    -1,    47,    48,    49,    -1,    -1,   116,    -1,
-      -1,    -1,    24,    -1,    -1,    -1,    71,    29,    30,    31,
-      32,    33,    34,    -1,    -1,    -1,    -1,    71,    -1,   116,
-      -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    24,
-     116,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,
-      -1,   116,    47,    48,    49,    -1,    -1,    -1,    -1,   188,
-     189,   190,   116,   192,    -1,    -1,    -1,    -1,    -1,    -1,
-     188,   189,   190,    24,   192,    -1,    71,    -1,    29,    30,
+      -1,    -1,    47,    48,    49,     6,     7,     8,    -1,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
+      -1,    -1,    -1,    24,    -1,    -1,    71,    -1,    29,    30,
       31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   188,   189,   190,   116,   192,    47,    48,    49,    -1,
-      -1,    -1,   188,   189,   190,    -1,   192,    24,    -1,    -1,
-      -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
-      71,   116,    -1,   188,   189,   190,    -1,   192,    -1,    -1,
-      47,    48,    49,    -1,   188,   189,   190,    -1,   192,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
+      -1,    96,    97,    98,    99,   100,   101,   102,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,
+      71,   116,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
+      -1,    26,    -1,    28,    29,    30,    31,    32,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    96,    97,    98,    99,   100,
+     101,   102,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
+     111,    -1,     6,     7,     8,   116,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,    19,    71,    -1,    -1,    -1,
+      24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,
+      34,    -1,    -1,   188,   189,   190,    -1,   192,   193,   194,
+      -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   116,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
+      -1,   192,   193,   194,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    96,    97,    98,    99,   100,   101,   102,    19,
+      -1,    -1,    -1,    -1,    24,    -1,    -1,   111,    -1,    -1,
+      -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    44,    -1,    46,    -1,    -1,    -1,
+      -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,   194,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,   116,   188,   189,   190,    -1,
-     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   188,   189,   190,    -1,   192,    -1,   116,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
-      46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    68,    69,    70,    -1,    72,   188,   189,   190,
-      -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,   193,
+     194,    -1,   112,   113,   114,   115,    -1,   117,   118,   119,
+     120,   121,   122,   123,   124,   125,   126,    -1,   128,   129,
+     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
+     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
+     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
+     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
+     180,   181,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     190,   191,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   188,   189,   190,    -1,   192,   112,   113,   114,   115,
-      -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
-     126,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
-     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
-     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
-     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,   177,   178,   179,   180,   181,    44,    -1,    46,    -1,
-      -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,   195,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
@@ -3268,63 +3151,169 @@ static const yytype_int16 yycheck[] =
      148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
      168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
-     178,   179,   180,   181,    44,    -1,    -1,    -1,    -1,    -1,
-     188,   189,   190,   191,    -1,    -1,    -1,   195,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
-      70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     178,   179,   180,   181,    -1,    -1,    -1,    -1,    18,    -1,
+      -1,    -1,   190,   191,    24,    -1,    -1,   195,    -1,    29,
+      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    18,
+      -1,    -1,    -1,    -1,    -1,    24,    -1,    47,    48,    49,
+      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    47,    48,
+      49,    71,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
+      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      42,    43,    71,    -1,    19,    47,    48,    49,    -1,    24,
+      -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    -1,   116,    42,    43,    71,
+      19,    20,    47,    48,    49,    24,    -1,    -1,    -1,    -1,
+      29,    30,    31,    32,    33,    34,    -1,   116,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    71,    19,    47,    48,
+      49,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
+      32,    33,    34,    -1,   116,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    71,    -1,    -1,    47,    48,    49,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
+     190,   116,   192,    -1,    -1,    -1,    24,    -1,    -1,    71,
+      -1,    29,    30,    31,    32,    33,    34,    -1,    -1,   188,
+     189,   190,    -1,   192,    42,    43,    -1,   116,    19,    47,
+      48,    49,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
+      31,    32,    33,    34,    -1,    -1,   188,   189,   190,    -1,
+     192,    -1,    -1,    71,   116,    -1,    47,    48,    49,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   188,   189,   190,    -1,   192,    -1,    -1,
+      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   116,   188,
+     189,   190,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    34,   116,   188,   189,   190,    -1,
+     192,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     188,   189,   190,    -1,   192,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,   112,   113,   114,   115,    -1,   117,   118,   119,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,   190,
+      -1,   192,   112,   113,   114,   115,    -1,   117,   118,   119,
      120,   121,   122,   123,   124,   125,   126,    -1,   128,   129,
      130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
      140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
      150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
      170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
-     180,   181,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     190,   191,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
+     180,   181,    -1,    -1,    -1,    -1,    -1,    -1,   188,   189,
+     190,   191,    -1,   193,   194,   195,    24,    25,    -1,    -1,
+      -1,    29,    30,    31,    32,    33,    34,    24,    -1,    -1,
+      27,    -1,    29,    30,    31,    32,    33,    34,    -1,    47,
+      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    24,    25,
+      47,    48,    49,    29,    30,    31,    32,    33,    34,    24,
+      -1,    -1,    27,    71,    29,    30,    31,    32,    33,    34,
+      -1,    47,    48,    49,    71,    -1,    -1,    -1,    -1,    -1,
+      24,    25,    47,    48,    49,    29,    30,    31,    32,    33,
+      34,    24,    -1,    -1,    -1,    71,    29,    30,    31,    32,
+      33,    34,    -1,    47,    48,    49,    71,    -1,   116,    -1,
+      -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,   116,
+      -1,    -1,    -1,    24,    -1,    -1,    -1,    71,    29,    30,
+      31,    32,    33,    34,    -1,    -1,    -1,    -1,    71,    -1,
+     116,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
+      24,   116,    -1,    -1,    -1,    29,    30,    31,    32,    33,
+      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      71,    -1,   116,    47,    48,    49,    -1,    -1,    -1,    -1,
+     188,   189,   190,   116,   192,    -1,    -1,    -1,    -1,    -1,
+      -1,   188,   189,   190,    24,   192,    -1,    71,    -1,    29,
+      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   188,   189,   190,   116,   192,    47,    48,    49,
+      -1,    -1,    -1,   188,   189,   190,    -1,   192,    24,    -1,
+      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,
+      -1,    71,   116,    -1,   188,   189,   190,    -1,   192,    -1,
+      -1,    47,    48,    49,    -1,   188,   189,   190,    -1,   192,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   116,   188,   189,   190,
+      -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,   188,   189,   190,    -1,   192,    -1,
+     116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
+      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    68,    69,    70,    -1,    72,   188,   189,
+     190,    -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   188,   189,   190,    -1,   192,   112,   113,   114,
+     115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
+     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,    44,    -1,    46,
+      -1,    -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,
+     195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-     112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
-     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
-     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
-     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
-     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
-     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
-      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,   190,   191,
-      -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
+      -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,    -1,
+     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
+      -1,   128,   129,   130,   131,   132,   133,   134,   135,   136,
+     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
+     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
+     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
+     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
+     177,   178,   179,   180,   181,    44,    -1,    -1,    -1,    -1,
+      -1,   188,   189,   190,   191,    -1,    -1,    -1,   195,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    68,
+      69,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,
-     114,   115,    -1,   117,   118,   119,   120,   121,   122,   123,
-     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
-     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
-     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
-     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
-     174,   175,   176,   177,   178,   179,   180,   181,    44,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   190,   191,    -1,    -1,
-      -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   112,   113,   114,   115,    -1,   117,   118,
+     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
+     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
+     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
+     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
+     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+     179,   180,   181,    44,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   190,   191,    -1,    -1,    -1,   195,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
+     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
+     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
+     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
+     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
+     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
+     181,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,   190,
+     191,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,
+     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
+     123,   124,   125,   126,    -1,   128,   129,   130,   131,   132,
+     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
+     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
+     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+     173,   174,   175,   176,   177,   178,   179,   180,   181,    44,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,   191,    -1,
+      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,   115,
-      -1,   117,   118,   119,   120,   121,   122,   123,   124,   125,
-     126,    -1,   128,   129,   130,   131,   132,   133,   134,   135,
-     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
-     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
-     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,   177,   178,   179,   180,   181,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,   195
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,   113,   114,
+     115,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
+     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
+     175,   176,   177,   178,   179,   180,   181,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   190,   191,    -1,    -1,    -1,
+     195
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
@@ -3343,118 +3332,118 @@ static const yytype_uint16 yystos[] =
      200,   201,   202,   206,   212,   215,   216,   256,   261,   303,
      304,   310,   312,   324,   334,   335,   336,   337,   338,   339,
      340,   341,   342,   343,   344,   345,   347,   349,   352,   361,
-     366,   371,   375,   470,   471,   472,   112,   113,   114,   373,
+     366,   371,   375,   472,   473,   474,   112,   113,   114,   373,
      374,   375,    24,   308,   314,   315,   347,   371,   190,   347,
-     203,   190,   471,     1,     6,     7,     8,    10,    11,    12,
+     203,   190,   473,     1,     6,     7,     8,    10,    11,    12,
       13,    14,    15,    16,    17,    18,    24,    29,    30,    31,
       32,    33,    34,    47,    48,    49,    71,    95,    96,    97,
       98,    99,   100,   101,   102,   111,   116,   189,   190,   192,
      193,   269,   271,   273,   275,   278,   281,   282,   283,   284,
      285,   286,   287,   288,   289,   290,   292,   294,   299,   300,
-     388,   393,   403,   404,   405,   407,   410,   414,   415,   423,
-     429,   430,   431,   434,   436,   442,   464,   466,   467,   470,
-     471,     1,    11,    18,    24,   193,   194,   300,   389,   391,
+     388,   393,   403,   404,   405,   407,   410,   414,   415,   425,
+     431,   432,   433,   436,   438,   444,   466,   468,   469,   472,
+     473,     1,    11,    18,    24,   193,   194,   300,   389,   391,
      392,   393,   396,   398,   399,   401,   402,   405,   407,   410,
-     415,   419,   428,   430,   435,   464,   467,   389,   390,   312,
+     415,   419,   430,   432,   437,   466,   469,   389,   390,   312,
      312,   312,   361,   361,   361,   361,   361,   361,   361,   361,
      361,   361,     0,   200,    26,   313,    19,   257,   259,    18,
-     468,    24,   347,   350,   312,   312,   312,   312,   312,   312,
+     470,    24,   347,   350,   312,   312,   312,   312,   312,   312,
      312,   312,   361,   312,   350,   350,   312,   361,    88,   361,
       68,    69,    70,   361,   206,   361,   373,   375,    24,   189,
-     190,   300,   312,   346,   383,   470,    21,   312,   312,   311,
-     312,   361,   361,   204,   205,   209,   312,   347,   375,   471,
-      24,   273,   294,   302,   411,    24,    24,    24,    24,   471,
+     190,   300,   312,   346,   383,   472,    21,   312,   312,   311,
+     312,   361,   361,   204,   205,   209,   312,   347,   375,   473,
+      24,   273,   294,   302,   411,    24,    24,    24,    24,   473,
       18,    18,    18,   300,   270,   300,   383,   404,   281,   281,
      281,   281,   281,   281,   312,    24,   273,   273,    24,    24,
       16,    16,    16,    16,    15,   102,   406,    24,   387,   388,
-     393,   405,   407,   410,   413,   415,   428,   431,   434,   436,
-     464,   465,   467,   437,    24,    26,    48,    49,   361,    23,
+     393,   405,   407,   410,   413,   415,   430,   433,   436,   438,
+     466,   467,   469,   439,    24,    26,    48,    49,   361,    23,
       58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      276,   312,    34,    35,    36,    32,    33,    50,    51,    37,
       38,    52,    53,    54,    55,    29,    39,    40,    56,    41,
-      57,    18,    21,   404,    95,    19,   422,   404,   387,   404,
+      57,    18,    21,   404,    95,    19,   424,   404,   387,   404,
      192,   404,    22,    24,   300,   398,   415,    18,    95,   398,
-     398,   303,   347,   424,    19,    20,   400,   391,   404,    95,
-      27,   312,    24,   258,   424,   361,    18,   371,   348,   383,
-     312,   471,   312,   471,    19,   471,   300,    25,   347,    26,
+     398,   303,   347,   426,    19,    20,   400,   391,   404,    95,
+      27,   312,    24,   258,   426,   361,    18,   371,   348,   383,
+     312,   473,   312,   473,    19,   473,   300,    25,   347,    26,
      312,   375,   384,   386,    25,   361,    18,   361,    18,    23,
-     371,   468,    26,   313,    24,   361,   209,     5,   361,   372,
+     371,   470,    26,   313,    24,   361,   209,     5,   361,   372,
      378,   379,   380,   408,    22,   300,   300,   300,   300,   301,
       18,    18,    24,   413,    25,    25,    25,    24,   383,   299,
      300,    18,    18,    18,    18,    18,   406,     6,     7,   413,
-     387,    19,   421,   387,   387,   415,    25,   272,   299,   300,
+     387,    19,   423,   387,   387,   415,    25,   272,   299,   300,
       28,    45,   299,   299,   299,   299,   299,   299,   299,   299,
      299,   299,   299,   279,   277,   281,   281,   281,   282,   282,
      283,   283,   284,   284,   284,   284,   285,   285,   286,   287,
-     288,   291,   295,   297,   293,   299,    20,   190,   404,   423,
-     424,   416,     9,    11,   300,    25,    24,   361,   303,   398,
-      11,   302,    25,   372,    20,   111,   387,   420,   424,   427,
-     260,   371,   361,    91,    21,    19,   312,   361,    19,   312,
-     361,   368,   369,   471,    19,   312,   312,    27,   302,    24,
-     386,    26,   312,   308,   195,   307,   308,   316,   317,   309,
-     361,    91,    27,   312,    24,   361,   205,   376,   377,   471,
-      25,    21,   312,   382,   471,    22,    25,   433,    25,    18,
-      25,    19,   281,   383,    25,    21,    25,   302,   412,    25,
-     420,    11,    24,    21,    25,    27,   471,   471,    42,    43,
-     280,   289,    22,   300,   290,    20,    20,   427,   432,    24,
-      25,   397,   371,    24,    27,   207,    25,    20,    20,   111,
-     427,    20,   111,   387,   413,   312,    23,   305,   348,    20,
-     357,    19,    20,   359,    19,    20,    21,    23,   367,    27,
-      25,   361,   378,    27,   302,    24,    21,   312,   312,   312,
-      23,   468,   302,    25,   372,   205,    21,   213,     5,   381,
-     347,    25,   301,    19,   299,   425,   426,   361,   383,   409,
-      22,    24,   438,   299,   312,   312,    24,   273,    24,   273,
-     296,    22,    20,   387,   300,    24,    29,    30,    31,    32,
-      33,    34,    48,    49,    71,   189,   190,   271,   273,   276,
-     282,   283,   284,   285,   286,   287,   288,   289,   290,   292,
-     439,   441,   442,   443,   444,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   462,   470,
-     300,   361,    73,    74,    75,    76,    80,    81,    82,    83,
-      84,    85,    86,   233,   235,   237,   238,   240,   241,   242,
-     247,   248,   254,   255,   325,   326,   328,   329,   330,   208,
-      20,    20,   111,    20,    25,   306,   312,   417,    20,   353,
-     417,    20,   355,   312,   369,   312,   368,   384,    25,    27,
-      25,   378,   361,   246,   247,    19,    26,    28,   299,   319,
-     320,   321,   322,   471,   312,   312,    27,   210,    25,   312,
-       5,   471,   234,   236,   238,   240,   242,   248,   326,   330,
-     382,   206,   312,   370,   375,   385,   386,   387,    18,   425,
-      21,   469,    21,    25,    22,   300,   439,   383,   383,   294,
-     298,    25,   300,   383,   281,   281,   281,   281,   281,   281,
-     273,   273,    24,    24,    26,    48,    49,   361,    23,    58,
-      59,    60,    61,    62,    63,    64,    65,    66,    67,    34,
-      35,    36,    32,    33,    50,    51,    37,    38,    52,    53,
-      54,    55,    29,    39,    40,    56,    41,    57,    25,   440,
-      25,   189,   244,   245,   239,   243,   233,    91,    91,    91,
-     361,   361,    91,   332,   336,    91,   233,    20,   312,   318,
+     288,   291,   295,   297,   293,   299,    20,   190,   404,   425,
+     426,   416,     9,    11,   300,    25,    24,   361,   303,   398,
+      11,   302,    25,   372,    20,   111,   387,   420,   421,   422,
+     426,   429,   260,   371,   361,    91,    21,    19,   312,   361,
+      19,   312,   361,   368,   369,   473,    19,   312,   312,    27,
+     302,    24,   386,    26,   312,   308,   195,   307,   308,   316,
+     317,   309,   361,    91,    27,   312,    24,   361,   205,   376,
+     377,   473,    25,    21,   312,   382,   473,    22,    25,   435,
+      25,    18,    25,    19,   281,   383,    25,    21,    25,   302,
+     412,    25,   422,    11,    24,    21,    25,    27,   473,   473,
+      42,    43,   280,   289,    22,   300,   290,    20,    20,   429,
+     434,    24,    25,   397,   371,    24,    27,   207,    25,    20,
+      20,   111,    20,   111,   421,   387,   420,   413,   312,    23,
+     305,   348,    20,   357,    19,    20,   359,    19,    20,    21,
+      23,   367,    27,    25,   361,   378,    27,   302,    24,    21,
+     312,   312,   312,    23,   470,   302,    25,   372,   205,    21,
+     213,     5,   381,   347,    25,   301,    19,   299,   427,   428,
+     361,   383,   409,    22,    24,   440,   299,   312,   312,    24,
+     273,    24,   273,   296,    22,    20,   387,   300,    24,    29,
+      30,    31,    32,    33,    34,    48,    49,    71,   189,   190,
+     271,   273,   276,   282,   283,   284,   285,   286,   287,   288,
+     289,   290,   292,   441,   443,   444,   445,   446,   447,   448,
+     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
+     459,   464,   472,   300,   361,    73,    74,    75,    76,    80,
+      81,    82,    83,    84,    85,    86,   233,   235,   237,   238,
+     240,   241,   242,   247,   248,   254,   255,   325,   326,   328,
+     329,   330,   208,    20,    20,    25,   306,   312,   417,    20,
+     353,   417,    20,   355,   312,   369,   312,   368,   384,    25,
+      27,    25,   378,   361,   246,   247,    19,    26,    28,   299,
+     319,   320,   321,   322,   473,   312,   312,    27,   210,    25,
+     312,     5,   473,   234,   236,   238,   240,   242,   248,   326,
+     330,   382,   206,   312,   370,   375,   385,   386,   387,    18,
+     427,    21,   471,    21,    25,    22,   300,   441,   383,   383,
+     294,   298,    25,   300,   383,   281,   281,   281,   281,   281,
+     281,   273,   273,    24,    24,    26,    48,    49,   361,    23,
+      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
+      34,    35,    36,    32,    33,    50,    51,    37,    38,    52,
+      53,    54,    55,    29,    39,    40,    56,    41,    57,    25,
+     442,    25,   189,   244,   245,   239,   243,   233,    91,    91,
+      91,   361,   361,    91,   332,   336,    91,   233,   312,   318,
      215,   347,   362,   363,   417,   362,   417,   302,    20,    25,
-      25,   307,    18,   319,   323,   302,   471,   319,    23,   322,
+      25,   307,    18,   319,   323,   302,   473,   319,    23,   322,
       22,   319,    91,   361,   234,   211,    25,   214,   234,    24,
-     312,   195,   370,   394,   469,   426,    20,   274,   471,    25,
+     312,   195,   370,   394,   471,   428,    20,   274,   473,    25,
       25,    25,    25,   294,    18,    25,    25,   299,    25,   272,
      300,    28,    45,   299,   299,   299,   299,   299,   299,   299,
      299,   299,   299,   299,   281,   281,   281,   282,   282,   283,
      283,   284,   284,   284,   284,   285,   285,   286,   287,   288,
-     289,   458,   460,   290,    21,    18,   442,    40,    89,    90,
+     289,   460,   462,   290,    21,    18,   444,    40,    89,    90,
      121,   122,   135,   249,   250,   251,   253,    24,    34,   189,
-     190,   262,   263,   265,   468,   470,   327,     5,    24,    34,
+     190,   262,   263,   265,   470,   472,   327,     5,    24,    34,
      184,   185,   189,   192,   217,   218,   224,   225,   226,   228,
-     229,   230,   231,   333,   470,   331,   319,    18,    21,   312,
+     229,   230,   231,   333,   472,   331,   319,    18,    21,   312,
      361,   363,   418,   362,   418,   362,   312,    20,    21,    27,
-     318,   234,   468,   361,   301,    20,    25,    26,    28,    18,
-     413,   281,    21,    25,    27,   471,   471,    22,   300,   441,
-     244,    21,   468,   189,   252,   303,   470,   251,   263,   263,
-      26,    28,    45,    21,   468,    24,    34,   189,   266,   268,
-     470,   220,   228,   230,    24,   230,    23,    56,   187,   223,
-      52,    53,    54,   227,    26,    28,    45,   219,    24,   468,
+     318,   234,   470,   361,   301,    20,    25,    26,    28,    18,
+     413,   281,    21,    25,    27,   473,   473,    22,   300,   443,
+     244,    21,   470,   189,   252,   303,   472,   251,   263,   263,
+      26,    28,    45,    21,   470,    24,    34,   189,   266,   268,
+     472,   220,   228,   230,    24,   230,    23,    56,   187,   223,
+      52,    53,    54,   227,    26,    28,    45,   219,    24,   470,
      267,   268,   318,   312,   361,    18,    22,   364,   365,   371,
-     358,   418,   360,   418,    20,   319,   468,    91,   375,   395,
-     312,   300,   471,   194,   463,   383,   312,   312,   459,    22,
-     250,    25,    27,   263,   264,   442,   471,   471,   263,   266,
-     266,    26,    28,    45,    21,   468,    22,    32,    33,   232,
+     358,   418,   360,   418,    20,   319,   470,    91,   375,   395,
+     312,   300,   473,   194,   465,   383,   312,   312,   461,    22,
+     250,    25,    27,   263,   264,   444,   473,   473,   263,   266,
+     266,    26,    28,    45,    21,   470,    22,    32,    33,   232,
       25,   230,   218,   221,   230,   224,   230,   228,    27,   192,
-     471,   471,    22,   228,   312,   468,    18,   308,   312,    21,
+     473,   473,    22,   228,   312,   470,    18,   308,   312,    21,
      312,   361,    22,    20,   354,    20,   356,    91,    25,    27,
-     416,    25,   294,   461,    27,    25,    27,   264,   471,   471,
+     416,    25,   294,   463,    27,    25,    27,   264,   473,   473,
      266,   312,   196,   222,   228,    40,    27,   222,    25,   312,
      312,   302,   365,    18,   312,    20,    20,   294,    27,    25,
      221,   361,   302,   351
@@ -4272,72 +4261,72 @@ yyreduce:
   switch (yyn)
     {
         case 4:
-#line 333 "cgrammar.y"
+
     { context_checkGlobalScope (); ;}
     break;
 
   case 5:
-#line 334 "cgrammar.y"
+
     { context_checkGlobalScope (); ;}
     break;
 
   case 6:
-#line 338 "cgrammar.y"
+
     { uentry_clearDecl (); ;}
     break;
 
   case 7:
-#line 339 "cgrammar.y"
+
     { uentry_clearDecl (); ;}
     break;
 
   case 8:
-#line 340 "cgrammar.y"
+
     { uentry_clearDecl (); ;}
     break;
 
   case 9:
-#line 341 "cgrammar.y"
+
     { uentry_clearDecl (); ;}
     break;
 
   case 10:
-#line 342 "cgrammar.y"
+
     { uentry_clearDecl (); ;}
     break;
 
   case 11:
-#line 343 "cgrammar.y"
+
     { uentry_checkDecl (); exprNode_free ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
   case 12:
-#line 344 "cgrammar.y"
+
     { uentry_clearDecl (); lltok_free ((yyvsp[(1) - (1)].tok)); /* evans 2002-02-08: okay to have a null statement */ ;}
     break;
 
   case 13:
-#line 345 "cgrammar.y"
+
     { uentry_clearDecl (); ;}
     break;
 
   case 14:
-#line 350 "cgrammar.y"
+
     { checkConstant ((yyvsp[(2) - (8)].qtyp), (yyvsp[(4) - (8)].ntyp)); lltok_free2 ((yyvsp[(1) - (8)].tok), (yyvsp[(8) - (8)].tok)); ;}
     break;
 
   case 15:
-#line 352 "cgrammar.y"
+
     { checkValueConstant ((yyvsp[(2) - (11)].qtyp), (yyvsp[(4) - (11)].ntyp), (yyvsp[(8) - (11)].expr)); lltok_free3 ((yyvsp[(1) - (11)].tok), (yyvsp[(6) - (11)].tok), (yyvsp[(11) - (11)].tok)); ;}
     break;
 
   case 16:
-#line 356 "cgrammar.y"
+
     { context_enterFunctionHeader (); ;}
     break;
 
   case 17:
-#line 357 "cgrammar.y"
+
     { 
      declareStaticFunction ((yyvsp[(3) - (5)].ntyp)); context_quietExitFunction (); 
      context_exitFunctionHeader (); 
@@ -4346,7 +4335,7 @@ yyreduce:
     break;
 
   case 18:
-#line 366 "cgrammar.y"
+
     { 
      qtype qint = qtype_create (ctype_int);
      (yyval.ntyp) = idDecl_fixBase ((yyvsp[(1) - (1)].ntyp), qint);
@@ -4355,32 +4344,32 @@ yyreduce:
     break;
 
   case 19:
-#line 372 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_fixBase ((yyvsp[(3) - (3)].ntyp), (yyvsp[(1) - (3)].qtyp)); ;}
     break;
 
   case 21:
-#line 378 "cgrammar.y"
+
     { (yyval.ntyp) = (yyvsp[(2) - (2)].ntyp); qtype_adjustPointers ((yyvsp[(1) - (2)].pointers), idDecl_getTyp ((yyval.ntyp))); ;}
     break;
 
   case 22:
-#line 382 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_create ((yyvsp[(1) - (1)].cname), qtype_unknown ()); ;}
     break;
 
   case 23:
-#line 384 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_expectFunction ((yyvsp[(4) - (6)].ntyp)); lltok_free2 ((yyvsp[(2) - (6)].tok), (yyvsp[(6) - (6)].tok)); ;}
     break;
 
   case 24:
-#line 386 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_replaceCtype ((yyvsp[(1) - (3)].ntyp), ctype_makeInnerArray (idDecl_getCtype ((yyvsp[(1) - (3)].ntyp)))); lltok_free2 ((yyvsp[(2) - (3)].tok), (yyvsp[(3) - (3)].tok)); ;}
     break;
 
   case 25:
-#line 388 "cgrammar.y"
+
     {
      exprNode_findValue ((yyvsp[(4) - (6)].expr));
      idDecl_notExpectingFunction ((yyvsp[(1) - (6)].ntyp));
@@ -4400,12 +4389,12 @@ yyreduce:
     break;
 
   case 26:
-#line 405 "cgrammar.y"
+
     { setCurrentParams (uentryList_missingParams); ;}
     break;
 
   case 27:
-#line 407 "cgrammar.y"
+
     { /* need to support globals and modifies here! */
      functionClauseList fcl;
      ctype ct = ctype_makeFunction (idDecl_getCtype ((yyvsp[(1) - (6)].ntyp)), 
@@ -4437,12 +4426,12 @@ yyreduce:
     break;
 
   case 28:
-#line 436 "cgrammar.y"
+
     { setCurrentParams ((yyvsp[(4) - (5)].entrylist)); ;}
     break;
 
   case 29:
-#line 438 "cgrammar.y"
+
     {
      functionClauseList fcl;
      setImplicitfcnConstraints ();
@@ -4470,24 +4459,24 @@ yyreduce:
     break;
 
   case 30:
-#line 465 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_create ((yyvsp[(1) - (1)].cname), qtype_unknown ()); ;}
     break;
 
   case 31:
-#line 467 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_expectFunction ((yyvsp[(4) - (6)].ntyp)); lltok_free2 ((yyvsp[(2) - (6)].tok), (yyvsp[(6) - (6)].tok)); ;}
     break;
 
   case 32:
-#line 469 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_replaceCtype ((yyvsp[(1) - (3)].ntyp), ctype_makeInnerArray (idDecl_getCtype ((yyvsp[(1) - (3)].ntyp)))); 
      lltok_free2 ((yyvsp[(2) - (3)].tok), (yyvsp[(3) - (3)].tok)); 
    ;}
     break;
 
   case 33:
-#line 473 "cgrammar.y"
+
     { 
      int value;
 
@@ -4507,12 +4496,12 @@ yyreduce:
     break;
 
   case 34:
-#line 490 "cgrammar.y"
+
     { setCurrentParams (uentryList_missingParams); ;}
     break;
 
   case 35:
-#line 492 "cgrammar.y"
+
     {
      ctype ct = ctype_makeFunction (idDecl_getCtype ((yyvsp[(1) - (6)].ntyp)), 
 				    uentryList_makeMissingParams ());
@@ -4525,12 +4514,12 @@ yyreduce:
     break;
 
   case 36:
-#line 502 "cgrammar.y"
+
     { setCurrentParams ((yyvsp[(4) - (5)].entrylist)); ;}
     break;
 
   case 37:
-#line 504 "cgrammar.y"
+
     { 
      clearCurrentParams ();
      (yyval.ntyp) = idDecl_replaceCtype ((yyvsp[(1) - (7)].ntyp), ctype_makeFunction (idDecl_getCtype ((yyvsp[(1) - (7)].ntyp)), (yyvsp[(4) - (7)].entrylist)));
@@ -4542,59 +4531,59 @@ yyreduce:
     break;
 
   case 38:
-#line 516 "cgrammar.y"
+
     { setCurrentParams ((yyvsp[(4) - (5)].entrylist)); ;}
     break;
 
   case 39:
-#line 517 "cgrammar.y"
+
     { clearCurrentParams (); ;}
     break;
 
   case 40:
-#line 518 "cgrammar.y"
+
     { declareCIter ((yyvsp[(2) - (10)].cname), (yyvsp[(4) - (10)].entrylist)); 
      lltok_free3 ((yyvsp[(1) - (10)].tok), (yyvsp[(3) - (10)].tok), (yyvsp[(5) - (10)].tok)); 
    ;}
     break;
 
   case 41:
-#line 524 "cgrammar.y"
+
     { exprNode_checkMacroBody ((yyvsp[(2) - (3)].expr)); lltok_free2 ((yyvsp[(1) - (3)].tok), (yyvsp[(3) - (3)].tok)); ;}
     break;
 
   case 42:
-#line 525 "cgrammar.y"
+
     { exprNode_checkIterBody ((yyvsp[(2) - (3)].expr)); lltok_free2 ((yyvsp[(1) - (3)].tok), (yyvsp[(3) - (3)].tok)); ;}
     break;
 
   case 43:
-#line 526 "cgrammar.y"
+
     { exprNode_checkIterEnd ((yyvsp[(2) - (3)].expr)); lltok_free2 ((yyvsp[(1) - (3)].tok), (yyvsp[(3) - (3)].tok));;}
     break;
 
   case 44:
-#line 527 "cgrammar.y"
+
     { exprChecks_checkEmptyMacroBody (); lltok_free2 ((yyvsp[(1) - (2)].tok), (yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 45:
-#line 531 "cgrammar.y"
+
     { clabstract_declareFunction ((yyvsp[(1) - (1)].ntyp)); ;}
     break;
 
   case 46:
-#line 536 "cgrammar.y"
+
     { (yyval.msconstraint) = metaStateConstraint_create ((yyvsp[(1) - (3)].msspec), (yyvsp[(3) - (3)].msexpr)); lltok_free ((yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 47:
-#line 540 "cgrammar.y"
+
     { cscannerHelp_expectingMetaStateName (); ;}
     break;
 
   case 48:
-#line 541 "cgrammar.y"
+
     { cscannerHelp_clearExpectingMetaStateName ();
       (yyval.msspec) = metaStateSpecifier_create ((yyvsp[(1) - (4)].sr), (yyvsp[(4) - (4)].msinfo)); 
       lltok_free ((yyvsp[(3) - (4)].tok)); 
@@ -4602,12 +4591,12 @@ yyreduce:
     break;
 
   case 49:
-#line 545 "cgrammar.y"
+
     { cscannerHelp_expectingMetaStateName (); ;}
     break;
 
   case 50:
-#line 546 "cgrammar.y"
+
     { cscannerHelp_clearExpectingMetaStateName ();
       (yyval.msspec) = metaStateSpecifier_createElipsis ((yyvsp[(4) - (4)].msinfo)); 
       lltok_free2 ((yyvsp[(1) - (4)].tok), (yyvsp[(3) - (4)].tok));
@@ -4615,71 +4604,71 @@ yyreduce:
     break;
 
   case 51:
-#line 553 "cgrammar.y"
+
     { (yyval.msexpr) = metaStateExpression_create ((yyvsp[(1) - (1)].msspec)); ;}
     break;
 
   case 52:
-#line 554 "cgrammar.y"
+
     { (yyval.msexpr) = metaStateExpression_createMerge ((yyvsp[(1) - (3)].msspec), (yyvsp[(3) - (3)].msexpr)); lltok_free ((yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 56:
-#line 569 "cgrammar.y"
+
     { (yyval.conL) = constraintList_add ((yyvsp[(3) - (3)].conL), (yyvsp[(1) - (3)].con)); ;}
     break;
 
   case 57:
-#line 570 "cgrammar.y"
+
     { (yyval.conL) = constraintList_single ((yyvsp[(1) - (1)].con)); ;}
     break;
 
   case 58:
-#line 574 "cgrammar.y"
+
     {
  (yyval.con) = makeConstraintParse3 ((yyvsp[(1) - (3)].conE), (yyvsp[(2) - (3)].tok), (yyvsp[(3) - (3)].conE));
  DPRINTF(("Done BufConstraint1\n")); ;}
     break;
 
   case 65:
-#line 592 "cgrammar.y"
+
     {(yyval.conE) = constraintExpr_parseMakeUnaryOp ((yyvsp[(1) - (4)].tok), (yyvsp[(3) - (4)].conE));  DPRINTF( ("Got BufConstraintExpr UNary Op ") ); ;}
     break;
 
   case 66:
-#line 593 "cgrammar.y"
+
     {
    DPRINTF( ("Got BufConstraintExpr BINary Op ") );
    (yyval.conE) = constraintExpr_parseMakeBinaryOp ((yyvsp[(2) - (5)].conE), (yyvsp[(3) - (5)].tok), (yyvsp[(4) - (5)].conE)); ;}
     break;
 
   case 67:
-#line 599 "cgrammar.y"
+
     { (yyval.conE) =  constraintExpr_makeTermsRef ((yyvsp[(1) - (1)].sr));;}
     break;
 
   case 68:
-#line 600 "cgrammar.y"
+
     { (yyval.conE) = constraintExpr_makeIntLiteral (exprNode_getLongValue ((yyvsp[(1) - (1)].expr))); ;}
     break;
 
   case 69:
-#line 605 "cgrammar.y"
+
     { /*@-onlytrans@*/ (yyval.sr) = checkbufferConstraintClausesId ((yyvsp[(1) - (1)].entry)); /*@=onlytrans@*/ /*@i523@*/ ;}
     break;
 
   case 70:
-#line 607 "cgrammar.y"
+
     { (yyval.sr) = fixStateClausesId ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 71:
-#line 609 "cgrammar.y"
+
     { (yyval.sr) = sRef_makeAnyArrayFetch ((yyvsp[(1) - (3)].sr)); ;}
     break;
 
   case 72:
-#line 611 "cgrammar.y"
+
     {
     /*
     char *t; int c; 
@@ -4691,117 +4680,117 @@ yyreduce:
     break;
 
   case 73:
-#line 620 "cgrammar.y"
+
     { (yyval.sr) = sRef_constructPointer ((yyvsp[(2) - (2)].sr)); ;}
     break;
 
   case 74:
-#line 622 "cgrammar.y"
+
     { (yyval.sr) = (yyvsp[(2) - (3)].sr); ;}
     break;
 
   case 75:
-#line 624 "cgrammar.y"
+
     { cstring_markOwned ((yyvsp[(3) - (3)].cname)); (yyval.sr) = sRef_buildField ((yyvsp[(1) - (3)].sr), (yyvsp[(3) - (3)].cname)); ;}
     break;
 
   case 76:
-#line 626 "cgrammar.y"
+
     { cstring_markOwned ((yyvsp[(3) - (3)].cname)); (yyval.sr) = sRef_makeArrow ((yyvsp[(1) - (3)].sr), (yyvsp[(3) - (3)].cname)); ;}
     break;
 
   case 80:
-#line 654 "cgrammar.y"
+
     { (yyval.funcclauselist) = functionClauseList_new (); ;}
     break;
 
   case 81:
-#line 656 "cgrammar.y"
+
     { (yyval.funcclauselist) = functionClauseList_prepend ((yyvsp[(2) - (2)].funcclauselist), (yyvsp[(1) - (2)].funcclause)); ;}
     break;
 
   case 82:
-#line 665 "cgrammar.y"
+
     { (yyval.funcclauselist) = functionClauseList_new (); ;}
     break;
 
   case 83:
-#line 667 "cgrammar.y"
+
     { (yyval.funcclauselist) = functionClauseList_prepend ((yyvsp[(2) - (2)].funcclauselist), (yyvsp[(1) - (2)].funcclause)); ;}
     break;
 
   case 84:
-#line 671 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createGlobals ((yyvsp[(1) - (1)].globsclause)); ;}
     break;
 
   case 85:
-#line 672 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createModifies ((yyvsp[(1) - (1)].modsclause)); ;}
     break;
 
   case 86:
-#line 673 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createModifies ((yyvsp[(1) - (1)].modsclause)); ;}
     break;
 
   case 87:
-#line 674 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createState ((yyvsp[(1) - (1)].stateclause)); ;}
     break;
 
   case 88:
-#line 675 "cgrammar.y"
+
     { (yyval.funcclause) = (yyvsp[(1) - (1)].funcclause); ;}
     break;
 
   case 89:
-#line 676 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createWarn ((yyvsp[(1) - (1)].warnclause)); ;}
     break;
 
   case 90:
-#line 680 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createGlobals ((yyvsp[(1) - (1)].globsclause)); ;}
     break;
 
   case 91:
-#line 681 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createModifies ((yyvsp[(1) - (1)].modsclause)); ;}
     break;
 
   case 92:
-#line 682 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createModifies ((yyvsp[(1) - (1)].modsclause)); ;}
     break;
 
   case 93:
-#line 683 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createState ((yyvsp[(1) - (1)].stateclause)); ;}
     break;
 
   case 94:
-#line 684 "cgrammar.y"
+
     { (yyval.funcclause) = (yyvsp[(1) - (1)].funcclause); ;}
     break;
 
   case 95:
-#line 685 "cgrammar.y"
+
     { (yyval.funcclause) = functionClause_createWarn ((yyvsp[(1) - (1)].warnclause)); ;}
     break;
 
   case 96:
-#line 689 "cgrammar.y"
+
     { (yyval.globsclause) = (yyvsp[(1) - (2)].globsclause); ;}
     break;
 
   case 97:
-#line 693 "cgrammar.y"
+
     { setProcessingGlobalsList (); ;}
     break;
 
   case 98:
-#line 695 "cgrammar.y"
+
     { 
      unsetProcessingGlobals (); 
      (yyval.globsclause) = globalsClause_create ((yyvsp[(1) - (4)].tok), (yyvsp[(3) - (4)].globset)); 
@@ -4809,17 +4798,17 @@ yyreduce:
     break;
 
   case 99:
-#line 702 "cgrammar.y"
+
     { (yyval.modsclause) = modifiesClause_createNoMods ((yyvsp[(1) - (1)].tok)); ;}
     break;
 
   case 100:
-#line 706 "cgrammar.y"
+
     { (yyval.modsclause) = (yyvsp[(1) - (2)].modsclause); ;}
     break;
 
   case 101:
-#line 711 "cgrammar.y"
+
     {
      context_setProtectVars (); enterParamsTemp (); 
      sRef_setGlobalScopeSafe (); 
@@ -4827,7 +4816,7 @@ yyreduce:
     break;
 
   case 102:
-#line 716 "cgrammar.y"
+
     { 
      exitParamsTemp ();
      sRef_clearGlobalScopeSafe (); 
@@ -4837,27 +4826,27 @@ yyreduce:
     break;
 
   case 103:
-#line 726 "cgrammar.y"
+
     { (yyval.flagspec) = flagSpec_createPlain ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 104:
-#line 728 "cgrammar.y"
+
     { (yyval.flagspec) = flagSpec_createOr ((yyvsp[(1) - (3)].cname), (yyvsp[(3) - (3)].flagspec)); ;}
     break;
 
   case 107:
-#line 737 "cgrammar.y"
+
     { (yyval.warnclause) = warnClause_undefined; ;}
     break;
 
   case 108:
-#line 741 "cgrammar.y"
+
     { (yyval.warnclause) = (yyvsp[(1) - (2)].warnclause); ;}
     break;
 
   case 109:
-#line 746 "cgrammar.y"
+
     {      
      llassert (exprNode_knownStringValue ((yyvsp[(3) - (3)].expr)));
      (yyval.warnclause) = warnClause_create ((yyvsp[(1) - (3)].tok), (yyvsp[(2) - (3)].flagspec), cstring_copy (multiVal_forceString (exprNode_getValue ((yyvsp[(3) - (3)].expr))))); 
@@ -4866,77 +4855,77 @@ yyreduce:
     break;
 
   case 110:
-#line 752 "cgrammar.y"
+
     { (yyval.warnclause) = warnClause_create ((yyvsp[(1) - (2)].tok), (yyvsp[(2) - (2)].flagspec), cstring_undefined); ;}
     break;
 
   case 111:
-#line 756 "cgrammar.y"
+
     { (yyval.globset) = globSet_single ((yyvsp[(1) - (1)].sr)); ;}
     break;
 
   case 112:
-#line 757 "cgrammar.y"
+
     { (yyval.globset) = globSet_insert ((yyvsp[(1) - (3)].globset), (yyvsp[(3) - (3)].sr)); ;}
     break;
 
   case 113:
-#line 761 "cgrammar.y"
+
     { (yyval.sr) = clabstract_createGlobal ((yyvsp[(2) - (2)].sr), (yyvsp[(1) - (2)].tquallist)); ;}
     break;
 
   case 114:
-#line 765 "cgrammar.y"
+
     { (yyval.tquallist) = qualList_undefined; ;}
     break;
 
   case 115:
-#line 766 "cgrammar.y"
+
     { (yyval.tquallist) = qualList_add ((yyvsp[(2) - (2)].tquallist), (yyvsp[(1) - (2)].typequal)); ;}
     break;
 
   case 116:
-#line 770 "cgrammar.y"
+
     { (yyval.sr) = uentry_getSref ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
   case 117:
-#line 771 "cgrammar.y"
+
     { (yyval.sr) = clabstract_unrecognizedGlobal ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 118:
-#line 772 "cgrammar.y"
+
     { (yyval.sr) = clabstract_checkGlobal ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
   case 119:
-#line 776 "cgrammar.y"
+
     { (yyval.typequal) = qual_createUndef (); ;}
     break;
 
   case 120:
-#line 777 "cgrammar.y"
+
     { (yyval.typequal) = qual_createKilled (); ;}
     break;
 
   case 121:
-#line 778 "cgrammar.y"
+
     { (yyval.typequal) = qual_createOut (); ;}
     break;
 
   case 122:
-#line 779 "cgrammar.y"
+
     { (yyval.typequal) = qual_createIn (); ;}
     break;
 
   case 123:
-#line 780 "cgrammar.y"
+
     { (yyval.typequal) = qual_createPartial (); ;}
     break;
 
   case 131:
-#line 798 "cgrammar.y"
+
     { 
      /**!!! deal with fred; fred (int); declarations! **/
      qtype qint = qtype_create (ctype_int); 
@@ -4946,17 +4935,17 @@ yyreduce:
     break;
 
   case 132:
-#line 805 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_fixBase ((yyvsp[(3) - (3)].ntyp), (yyvsp[(1) - (3)].qtyp)); ;}
     break;
 
   case 133:
-#line 809 "cgrammar.y"
+
     { checkDoneParams (); context_enterInnerContext (); ;}
     break;
 
   case 134:
-#line 811 "cgrammar.y"
+
     {  
      exprNode_checkFunctionBody ((yyvsp[(3) - (3)].expr)); (yyval.expr) = (yyvsp[(3) - (3)].expr); 
      context_exitInner ((yyvsp[(3) - (3)].expr)); 
@@ -4964,17 +4953,17 @@ yyreduce:
     break;
 
   case 135:
-#line 815 "cgrammar.y"
+
     { context_enterOldStyleScope (); ;}
     break;
 
   case 136:
-#line 816 "cgrammar.y"
+
     { oldStyleDoneParams (); context_enterInnerContext (); ;}
     break;
 
   case 137:
-#line 818 "cgrammar.y"
+
     {
      exprNode_checkFunctionBody ((yyvsp[(4) - (4)].expr)); 
      (yyval.expr) = (yyvsp[(4) - (4)].expr); /* oldstyle */ 
@@ -4983,7 +4972,7 @@ yyreduce:
     break;
 
   case 138:
-#line 827 "cgrammar.y"
+
     { 
      context_setFunctionDefined (exprNode_loc ((yyvsp[(2) - (2)].expr))); 
      exprNode_checkFunction (context_getHeader (),  (yyvsp[(2) - (2)].expr)); 
@@ -4994,129 +4983,129 @@ yyreduce:
     break;
 
   case 139:
-#line 837 "cgrammar.y"
+
     { (yyval.srset) = (yyvsp[(1) - (2)].srset); ;}
     break;
 
   case 140:
-#line 838 "cgrammar.y"
+
     { (yyval.srset) = sRefSet_new (); ;}
     break;
 
   case 141:
-#line 842 "cgrammar.y"
+
     { (yyval.sr) = uentry_getSref ((yyvsp[(1) - (1)].entry)); checkModifiesId ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
   case 142:
-#line 843 "cgrammar.y"
+
     { (yyval.sr) = fixModifiesId ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 143:
-#line 844 "cgrammar.y"
+
     { (yyval.sr) = fixModifiesId ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 144:
-#line 845 "cgrammar.y"
+
     { (yyval.sr) = modListArrayFetch ((yyvsp[(1) - (3)].sr), sRef_undefined); ;}
     break;
 
   case 145:
-#line 846 "cgrammar.y"
+
     { (yyval.sr) = modListArrayFetch ((yyvsp[(1) - (4)].sr), (yyvsp[(3) - (4)].sr)); ;}
     break;
 
   case 146:
-#line 847 "cgrammar.y"
+
     { (yyval.sr) = modListPointer ((yyvsp[(2) - (2)].sr)); ;}
     break;
 
   case 147:
-#line 848 "cgrammar.y"
+
     { (yyval.sr) = (yyvsp[(2) - (3)].sr); ;}
     break;
 
   case 148:
-#line 849 "cgrammar.y"
+
     { (yyval.sr) = modListFieldAccess ((yyvsp[(1) - (3)].sr), (yyvsp[(3) - (3)].cname)); ;}
     break;
 
   case 149:
-#line 850 "cgrammar.y"
+
     { (yyval.sr) = modListArrowAccess ((yyvsp[(1) - (3)].sr), (yyvsp[(3) - (3)].cname)); ;}
     break;
 
   case 150:
-#line 854 "cgrammar.y"
+
     { (yyval.sr) = (yyvsp[(1) - (1)].sr); ;}
     break;
 
   case 151:
-#line 855 "cgrammar.y"
+
     { (yyval.sr) = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;}
     break;
 
   case 152:
-#line 860 "cgrammar.y"
+
     { (yyval.srset) = sRefSet_single ((yyvsp[(1) - (1)].sr)); ;}
     break;
 
   case 153:
-#line 861 "cgrammar.y"
+
     { (yyval.srset) = sRefSet_insert ((yyvsp[(1) - (3)].srset), (yyvsp[(3) - (3)].sr)); ;}
     break;
 
   case 154:
-#line 866 "cgrammar.y"
+
     { (yyval.sr) = checkStateClausesId ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
   case 155:
-#line 868 "cgrammar.y"
+
     { (yyval.sr) = fixStateClausesId ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 156:
-#line 869 "cgrammar.y"
+
     { (yyval.sr) = sRef_makeAnyArrayFetch ((yyvsp[(1) - (3)].sr)); ;}
     break;
 
   case 157:
-#line 870 "cgrammar.y"
+
     { (yyval.sr) = sRef_makeAnyArrayFetch ((yyvsp[(1) - (4)].sr)); ;}
     break;
 
   case 158:
-#line 871 "cgrammar.y"
+
     { (yyval.sr) = sRef_constructPointer ((yyvsp[(2) - (2)].sr)); ;}
     break;
 
   case 159:
-#line 872 "cgrammar.y"
+
     { (yyval.sr) = (yyvsp[(2) - (3)].sr); ;}
     break;
 
   case 160:
-#line 873 "cgrammar.y"
+
     { cstring_markOwned ((yyvsp[(3) - (3)].cname));
 					    (yyval.sr) = sRef_buildField ((yyvsp[(1) - (3)].sr), (yyvsp[(3) - (3)].cname)); ;}
     break;
 
   case 161:
-#line 875 "cgrammar.y"
+
     { cstring_markOwned ((yyvsp[(3) - (3)].cname));
                                             (yyval.sr) = sRef_makeArrow ((yyvsp[(1) - (3)].sr), (yyvsp[(3) - (3)].cname)); ;}
     break;
 
   case 162:
-#line 880 "cgrammar.y"
+
     { DPRINTF ((message("Empty optSpecClauseList") )); (yyval.srset) = sRefSet_undefined ;}
     break;
 
   case 164:
-#line 886 "cgrammar.y"
+
     { if (sRef_isValid ((yyvsp[(1) - (1)].sr))) { (yyval.srset) = sRefSet_single ((yyvsp[(1) - (1)].sr)); } 
       else {
 	DPRINTF((message("returning sRefSEt_undefined ")  ));
@@ -5125,7 +5114,7 @@ yyreduce:
     break;
 
   case 165:
-#line 892 "cgrammar.y"
+
     { if (sRef_isValid ((yyvsp[(3) - (3)].sr)))
 	{
 	  (yyval.srset) = sRefSet_insert ((yyvsp[(1) - (3)].srset), (yyvsp[(3) - (3)].sr)); 
@@ -5138,300 +5127,300 @@ yyreduce:
     break;
 
   case 166:
-#line 904 "cgrammar.y"
+
     { (yyval.expr) = exprNode_fromIdentifier ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
   case 167:
-#line 905 "cgrammar.y"
+
     { (yyval.expr) = exprNode_fromUIO ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 169:
-#line 907 "cgrammar.y"
+
     { (yyval.expr) = exprNode_addParens ((yyvsp[(1) - (3)].tok), (yyvsp[(2) - (3)].expr)); ;}
     break;
 
   case 170:
-#line 908 "cgrammar.y"
+
     { (yyval.expr) = exprNode_fromIdentifier (cscannerHelp_coerceId ((yyvsp[(1) - (1)].cname))); ;}
     break;
 
   case 171:
-#line 909 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeError (); ;}
     break;
 
   case 172:
-#line 910 "cgrammar.y"
+
     { exprChecks_inCompoundStatementExpression (); ;}
     break;
 
   case 173:
-#line 912 "cgrammar.y"
+
     { exprChecks_leaveCompoundStatementExpression (); (yyval.expr) = exprNode_compoundStatementExpression ((yyvsp[(1) - (4)].tok), (yyvsp[(3) - (4)].expr)); ;}
     break;
 
   case 175:
-#line 917 "cgrammar.y"
+
     { (yyval.expr) = exprNode_arrayFetch ((yyvsp[(1) - (4)].expr), (yyvsp[(3) - (4)].expr)); ;}
     break;
 
   case 176:
-#line 918 "cgrammar.y"
+
     { (yyval.expr) = exprNode_functionCall ((yyvsp[(1) - (3)].expr), exprNodeList_new ()); ;}
     break;
 
   case 177:
-#line 919 "cgrammar.y"
+
     { (yyval.expr) = exprNode_functionCall ((yyvsp[(1) - (4)].expr), (yyvsp[(3) - (4)].exprlist)); ;}
     break;
 
   case 178:
-#line 920 "cgrammar.y"
+
     { (yyval.expr) = exprNode_vaArg ((yyvsp[(1) - (6)].tok), (yyvsp[(3) - (6)].expr), (yyvsp[(5) - (6)].qtyp)); ;}
     break;
 
   case 179:
-#line 921 "cgrammar.y"
+
     { (yyval.expr) = exprNode_fieldAccess ((yyvsp[(1) - (5)].expr), (yyvsp[(3) - (5)].tok), (yyvsp[(4) - (5)].cname)); ;}
     break;
 
   case 180:
-#line 922 "cgrammar.y"
+
     { (yyval.expr) = exprNode_arrowAccess ((yyvsp[(1) - (5)].expr), (yyvsp[(3) - (5)].tok), (yyvsp[(4) - (5)].cname)); ;}
     break;
 
   case 181:
-#line 923 "cgrammar.y"
+
     { (yyval.expr) = exprNode_postOp ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 182:
-#line 924 "cgrammar.y"
+
     { (yyval.expr) = exprNode_postOp ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 183:
-#line 926 "cgrammar.y"
+
     { /* added for C99 */ (yyval.expr) = exprNode_undefined; /*@i87 no checking */ ;}
     break;
 
   case 184:
-#line 930 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_singleton ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
   case 185:
-#line 931 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_push ((yyvsp[(1) - (3)].exprlist), (yyvsp[(3) - (3)].expr)); ;}
     break;
 
   case 187:
-#line 936 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 188:
-#line 937 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 189:
-#line 938 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 190:
-#line 939 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 191:
-#line 940 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 192:
-#line 941 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 193:
-#line 942 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 194:
-#line 943 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 195:
-#line 944 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(2) - (3)].expr); ;}
     break;
 
   case 196:
-#line 945 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 197:
-#line 949 "cgrammar.y"
+
     { (yyval.cstringlist) = cstringList_add ((yyvsp[(1) - (3)].cstringlist), (yyvsp[(3) - (3)].cname)); lltok_free ((yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 198:
-#line 950 "cgrammar.y"
+
     { (yyval.cstringlist) = (yyvsp[(1) - (4)].cstringlist); lltok_free2 ((yyvsp[(2) - (4)].tok), (yyvsp[(4) - (4)].tok)); ;}
     break;
 
   case 199:
-#line 952 "cgrammar.y"
+
     { (yyval.cstringlist) = cstringList_single ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 200:
-#line 957 "cgrammar.y"
+
     { (yyval.expr) = exprNode_offsetof ((yyvsp[(4) - (9)].qtyp), (yyvsp[(7) - (9)].cstringlist)); 
      lltok_free3 ((yyvsp[(1) - (9)].tok), (yyvsp[(3) - (9)].tok), (yyvsp[(6) - (9)].tok)); lltok_free ((yyvsp[(8) - (9)].tok)); ;}
     break;
 
   case 201:
-#line 962 "cgrammar.y"
+
     { context_setProtectVars (); ;}
     break;
 
   case 202:
-#line 963 "cgrammar.y"
+
     { context_sizeofReleaseVars (); (yyval.expr) = (yyvsp[(3) - (3)].expr); ;}
     break;
 
   case 203:
-#line 966 "cgrammar.y"
+
     {context_enterSizeof();}
     break;
 
   case 204:
-#line 969 "cgrammar.y"
+
     {context_leaveSizeof();}
     break;
 
   case 205:
-#line 973 "cgrammar.y"
+
     { (yyval.expr) = exprNode_sizeofType ((yyvsp[(3) - (4)].qtyp)); lltok_free3 ((yyvsp[(1) - (4)].tok), (yyvsp[(2) - (4)].tok), (yyvsp[(4) - (4)].tok));  ;}
     break;
 
   case 206:
-#line 974 "cgrammar.y"
+
     { (yyval.expr) = exprNode_sizeofExpr ((yyvsp[(2) - (2)].expr)); lltok_free ((yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 207:
-#line 975 "cgrammar.y"
+
     { (yyval.expr) = exprNode_alignofType ((yyvsp[(3) - (4)].qtyp)); lltok_free3 ((yyvsp[(1) - (4)].tok), (yyvsp[(2) - (4)].tok), (yyvsp[(4) - (4)].tok)); ;}
     break;
 
   case 208:
-#line 976 "cgrammar.y"
+
     { (yyval.expr) = exprNode_alignofExpr ((yyvsp[(2) - (2)].expr)); lltok_free ((yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 210:
-#line 984 "cgrammar.y"
+
     { (yyval.expr) = exprNode_cast ((yyvsp[(1) - (4)].tok), (yyvsp[(4) - (4)].expr), (yyvsp[(2) - (4)].qtyp)); lltok_free ((yyvsp[(3) - (4)].tok)); ;}
     break;
 
   case 212:
-#line 989 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 213:
-#line 990 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 214:
-#line 991 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 216:
-#line 996 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 217:
-#line 997 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 219:
-#line 1002 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 220:
-#line 1003 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 222:
-#line 1008 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 223:
-#line 1009 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 224:
-#line 1010 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 225:
-#line 1011 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 227:
-#line 1016 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 228:
-#line 1017 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 230:
-#line 1022 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 232:
-#line 1027 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 234:
-#line 1032 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 236:
-#line 1038 "cgrammar.y"
+
     { exprNode_produceGuards ((yyvsp[(1) - (2)].expr)); 
      context_enterAndClause ((yyvsp[(1) - (2)].expr)); 
    ;}
     break;
 
   case 237:
-#line 1042 "cgrammar.y"
+
     { 
      (yyval.expr) = exprNode_op ((yyvsp[(1) - (4)].expr), (yyvsp[(4) - (4)].expr), (yyvsp[(2) - (4)].tok)); 
      context_exitAndClause ((yyval.expr), (yyvsp[(4) - (4)].expr));
@@ -5439,7 +5428,7 @@ yyreduce:
     break;
 
   case 239:
-#line 1051 "cgrammar.y"
+
     { 
      exprNode_produceGuards ((yyvsp[(1) - (2)].expr));
      context_enterOrClause ((yyvsp[(1) - (2)].expr)); 
@@ -5447,7 +5436,7 @@ yyreduce:
     break;
 
   case 240:
-#line 1056 "cgrammar.y"
+
     { 
      (yyval.expr) = exprNode_op ((yyvsp[(1) - (4)].expr), (yyvsp[(4) - (4)].expr), (yyvsp[(2) - (4)].tok)); 
      context_exitOrClause ((yyval.expr), (yyvsp[(4) - (4)].expr));
@@ -5455,123 +5444,123 @@ yyreduce:
     break;
 
   case 242:
-#line 1065 "cgrammar.y"
+
     { /* GCC extension: conditional with empty if */
      exprNode_produceGuards ((yyvsp[(1) - (2)].expr)); context_enterTrueClause ((yyvsp[(1) - (2)].expr)); ;}
     break;
 
   case 243:
-#line 1067 "cgrammar.y"
+
     { context_enterFalseClause ((yyvsp[(1) - (4)].expr)); ;}
     break;
 
   case 244:
-#line 1068 "cgrammar.y"
+
     { (yyval.expr) = exprNode_condIfOmit ((yyvsp[(1) - (6)].expr), (yyvsp[(6) - (6)].expr)); context_exitClause ((yyvsp[(1) - (6)].expr), exprNode_undefined, (yyvsp[(6) - (6)].expr)); ;}
     break;
 
   case 245:
-#line 1069 "cgrammar.y"
+
     { exprNode_produceGuards ((yyvsp[(1) - (2)].expr)); context_enterTrueClause ((yyvsp[(1) - (2)].expr)); ;}
     break;
 
   case 246:
-#line 1070 "cgrammar.y"
+
     { context_enterFalseClause ((yyvsp[(1) - (5)].expr)); ;}
     break;
 
   case 247:
-#line 1071 "cgrammar.y"
+
     { (yyval.expr) = exprNode_cond ((yyvsp[(1) - (7)].expr), (yyvsp[(4) - (7)].expr), (yyvsp[(7) - (7)].expr)); context_exitClause ((yyvsp[(1) - (7)].expr), (yyvsp[(4) - (7)].expr), (yyvsp[(7) - (7)].expr)); ;}
     break;
 
   case 249:
-#line 1076 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 250:
-#line 1077 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 251:
-#line 1078 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 252:
-#line 1079 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 253:
-#line 1080 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 254:
-#line 1081 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 255:
-#line 1082 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 256:
-#line 1083 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 257:
-#line 1084 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 258:
-#line 1085 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 259:
-#line 1086 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 261:
-#line 1091 "cgrammar.y"
+
     { (yyval.expr) = exprNode_comma ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); ;}
     break;
 
   case 262:
-#line 1095 "cgrammar.y"
+
     { (yyval.expr) = exprNode_undefined; ;}
     break;
 
   case 265:
-#line 1106 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 266:
-#line 1107 "cgrammar.y"
+
     { doVaDcl (); (yyval.expr) = exprNode_makeError (); ;}
     break;
 
   case 267:
-#line 1108 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeError (); ;}
     break;
 
   case 268:
-#line 1113 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeError (); ;}
     break;
 
   case 269:
-#line 1127 "cgrammar.y"
+
     {
      setProcessingVars ((yyvsp[(1) - (4)].qtyp)); 
      processNamedDecl ((yyvsp[(3) - (4)].ntyp)); 
@@ -5579,7 +5568,7 @@ yyreduce:
     break;
 
   case 270:
-#line 1132 "cgrammar.y"
+
     { 
      unsetProcessingVars (); 
      (yyval.expr) = exprNode_makeEmptyInitialization ((yyvsp[(3) - (9)].ntyp)); 
@@ -5588,29 +5577,29 @@ yyreduce:
     break;
 
   case 271:
-#line 1138 "cgrammar.y"
+
     { setProcessingVars ((yyvsp[(1) - (5)].qtyp)); processNamedDecl ((yyvsp[(3) - (5)].ntyp)); ;}
     break;
 
   case 272:
-#line 1140 "cgrammar.y"
+
     { (yyval.expr) = exprNode_concat ((yyvsp[(9) - (11)].expr), exprNode_makeInitialization ((yyvsp[(3) - (11)].ntyp), (yyvsp[(8) - (11)].expr))); 
      unsetProcessingVars ();
    ;}
     break;
 
   case 273:
-#line 1146 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 274:
-#line 1147 "cgrammar.y"
+
     { (yyval.expr) = exprNode_fromIdentifier (usymtab_getTypeEntry (ctype_typeId ((yyvsp[(1) - (1)].ctyp)))); ;}
     break;
 
   case 275:
-#line 1152 "cgrammar.y"
+
     { 
      processNamedDecl ((yyvsp[(1) - (2)].ntyp)); 
      (yyval.expr) = exprNode_makeEmptyInitialization ((yyvsp[(1) - (2)].ntyp));
@@ -5618,173 +5607,173 @@ yyreduce:
     break;
 
   case 276:
-#line 1156 "cgrammar.y"
+
     { processNamedDecl ((yyvsp[(1) - (3)].ntyp)); ;}
     break;
 
   case 277:
-#line 1157 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeInitialization ((yyvsp[(1) - (6)].ntyp), (yyvsp[(6) - (6)].expr)); ;}
     break;
 
   case 278:
-#line 1161 "cgrammar.y"
+
     { setProcessingTypedef ((yyvsp[(2) - (2)].qtyp)); ;}
     break;
 
   case 279:
-#line 1163 "cgrammar.y"
+
     { clabstract_declareType ((yyvsp[(5) - (8)].exprlist), (yyvsp[(7) - (8)].warnclause)); ;}
     break;
 
   case 280:
-#line 1164 "cgrammar.y"
+
     { /* in the ANSI grammar, semantics unclear */ ;}
     break;
 
   case 281:
-#line 1165 "cgrammar.y"
+
     { /* in the ANSI grammar, semantics unclear */ ;}
     break;
 
   case 282:
-#line 1169 "cgrammar.y"
+
     { cscannerHelp_setExpectingTypeName (); ;}
     break;
 
   case 283:
-#line 1173 "cgrammar.y"
+
     { cscannerHelp_setExpectingTypeName (); context_pushLoc (); ;}
     break;
 
   case 284:
-#line 1177 "cgrammar.y"
+
     { (yyval.exprlist) = (yyvsp[(1) - (2)].exprlist); ;}
     break;
 
   case 285:
-#line 1181 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_singleton ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
   case 286:
-#line 1182 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_push ((yyvsp[(1) - (4)].exprlist), (yyvsp[(4) - (4)].expr)); ;}
     break;
 
   case 287:
-#line 1186 "cgrammar.y"
+
     { (yyval.exprlist) = (yyvsp[(1) - (2)].exprlist); ;}
     break;
 
   case 288:
-#line 1190 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_singleton ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
   case 289:
-#line 1191 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_push ((yyvsp[(1) - (4)].exprlist), (yyvsp[(4) - (4)].expr)); ;}
     break;
 
   case 290:
-#line 1195 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeError (); ;}
     break;
 
   case 291:
-#line 1196 "cgrammar.y"
+
     { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (4)].expr), (yyvsp[(4) - (4)].expr)); ;}
     break;
 
   case 293:
-#line 1201 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeInitBlock ((yyvsp[(1) - (3)].tok), (yyvsp[(2) - (3)].exprlist)); lltok_free ((yyvsp[(3) - (3)].tok)); ;}
     break;
 
   case 294:
-#line 1202 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeInitBlock ((yyvsp[(1) - (4)].tok), (yyvsp[(2) - (4)].exprlist)); lltok_free2 ((yyvsp[(3) - (4)].tok), (yyvsp[(4) - (4)].tok)); ;}
     break;
 
   case 295:
-#line 1203 "cgrammar.y"
+
     { (yyval.expr) = exprNode_undefined; ;}
     break;
 
   case 296:
-#line 1211 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (2)].expr); ;}
     break;
 
   case 297:
-#line 1212 "cgrammar.y"
+
     { (yyval.expr) = exprNode_undefined; 
                                      /* gcc extension, obsolete since 2.5 */ ;}
     break;
 
   case 298:
-#line 1217 "cgrammar.y"
+
     { (yyval.expr) = exprNode_undefined; ;}
     break;
 
   case 299:
-#line 1218 "cgrammar.y"
+
     { (yyval.expr) = exprNode_undefined; ;}
     break;
 
   case 300:
-#line 1222 "cgrammar.y"
+
     { (yyval.expr) = exprNode_undefined; ;}
     break;
 
   case 301:
-#line 1223 "cgrammar.y"
+
     { (yyval.expr) = exprNode_undefined; ;}
     break;
 
   case 302:
-#line 1228 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_singleton ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
   case 303:
-#line 1230 "cgrammar.y"
+
     { (yyval.exprlist) = exprNodeList_push ((yyvsp[(1) - (3)].exprlist), (yyvsp[(3) - (3)].expr)); ;}
     break;
 
   case 304:
-#line 1239 "cgrammar.y"
+
     { setStorageClass (SCEXTERN); (yyval.typequal) = qual_createExtern (); ;}
     break;
 
   case 305:
-#line 1240 "cgrammar.y"
+
     { (yyval.typequal) = qual_createInline (); ;}
     break;
 
   case 306:
-#line 1241 "cgrammar.y"
+
     { setStorageClass (SCSTATIC); (yyval.typequal) = qual_createStatic (); ;}
     break;
 
   case 307:
-#line 1242 "cgrammar.y"
+
     { (yyval.typequal) = qual_createAuto (); ;}
     break;
 
   case 308:
-#line 1243 "cgrammar.y"
+
     { (yyval.typequal) = qual_createRegister (); ;}
     break;
 
   case 309:
-#line 1247 "cgrammar.y"
+
     { (yyval.stateclause) = (yyvsp[(1) - (2)].stateclause); ;}
     break;
 
   case 310:
-#line 1252 "cgrammar.y"
+
     {
      context_setProtectVars (); 
      enterParamsTemp (); 
@@ -5793,7 +5782,7 @@ yyreduce:
     break;
 
   case 311:
-#line 1258 "cgrammar.y"
+
     { 
      exitParamsTemp ();
      sRef_clearGlobalScopeSafe (); 
@@ -5803,17 +5792,17 @@ yyreduce:
     break;
 
   case 312:
-#line 1267 "cgrammar.y"
+
     { (yyval.funcclause) = (yyvsp[(1) - (2)].funcclause); ;}
     break;
 
   case 313:
-#line 1271 "cgrammar.y"
+
     { (yyval.tok) = (yyvsp[(1) - (2)].tok); context_enterFunctionHeader (); ;}
     break;
 
   case 314:
-#line 1276 "cgrammar.y"
+
     {
      context_exitFunctionHeader ();
      context_setProtectVars (); 
@@ -5823,7 +5812,7 @@ yyreduce:
     break;
 
   case 315:
-#line 1283 "cgrammar.y"
+
     { 
      exitParamsTemp ();
      sRef_clearGlobalScopeSafe (); 
@@ -5833,7 +5822,7 @@ yyreduce:
     break;
 
   case 316:
-#line 1290 "cgrammar.y"
+
     {
      context_setProtectVars (); 
      enterParamsTemp (); 
@@ -5842,7 +5831,7 @@ yyreduce:
     break;
 
   case 317:
-#line 1296 "cgrammar.y"
+
     {
      context_exitFunctionHeader ();
      exitParamsTemp ();
@@ -5868,577 +5857,577 @@ yyreduce:
     break;
 
   case 318:
-#line 1321 "cgrammar.y"
+
     { (yyval.fcnconstraint) = functionConstraint_createBufferConstraint ((yyvsp[(1) - (1)].conL)); ;}
     break;
 
   case 319:
-#line 1322 "cgrammar.y"
+
     { (yyval.fcnconstraint) = functionConstraint_createMetaStateConstraint ((yyvsp[(1) - (1)].msconstraint)); DPRINTF (("Made constraint: %s", functionConstraint_unparse ((yyval.fcnconstraint)))); ;}
     break;
 
   case 320:
-#line 1326 "cgrammar.y"
+
     { (yyval.typequal) = qual_createExits (); ;}
     break;
 
   case 321:
-#line 1327 "cgrammar.y"
+
     { (yyval.typequal) = qual_createMayExit (); ;}
     break;
 
   case 322:
-#line 1328 "cgrammar.y"
+
     { (yyval.typequal) = qual_createTrueExit (); ;}
     break;
 
   case 323:
-#line 1329 "cgrammar.y"
+
     { (yyval.typequal) = qual_createFalseExit (); ;}
     break;
 
   case 324:
-#line 1330 "cgrammar.y"
+
     { (yyval.typequal) = qual_createNeverExit (); ;}
     break;
 
   case 325:
-#line 1334 "cgrammar.y"
+
     { (yyval.typequal) = qual_createChecked (); ;}
     break;
 
   case 326:
-#line 1335 "cgrammar.y"
+
     { (yyval.typequal) = qual_createCheckMod (); ;}
     break;
 
   case 327:
-#line 1336 "cgrammar.y"
+
     { (yyval.typequal) = qual_createUnchecked (); ;}
     break;
 
   case 328:
-#line 1337 "cgrammar.y"
+
     { (yyval.typequal) = qual_createCheckedStrict (); ;}
     break;
 
   case 329:
-#line 1341 "cgrammar.y"
+
     { (yyval.typequal) = qual_createOwned (); ;}
     break;
 
   case 330:
-#line 1342 "cgrammar.y"
+
     { (yyval.typequal) = qual_createDependent (); ;}
     break;
 
   case 331:
-#line 1343 "cgrammar.y"
+
     { (yyval.typequal) = qual_createYield (); ;}
     break;
 
   case 332:
-#line 1344 "cgrammar.y"
+
     { (yyval.typequal) = qual_createTemp (); ;}
     break;
 
   case 333:
-#line 1345 "cgrammar.y"
+
     { (yyval.typequal) = qual_createOnly (); ;}
     break;
 
   case 334:
-#line 1346 "cgrammar.y"
+
     { (yyval.typequal) = qual_createKeep (); ;}
     break;
 
   case 335:
-#line 1347 "cgrammar.y"
+
     { (yyval.typequal) = qual_createKept (); ;}
     break;
 
   case 336:
-#line 1348 "cgrammar.y"
+
     { (yyval.typequal) = qual_createShared (); ;}
     break;
 
   case 337:
-#line 1349 "cgrammar.y"
+
     { (yyval.typequal) = qual_createUnique (); ;}
     break;
 
   case 338:
-#line 1350 "cgrammar.y"
+
     { (yyval.typequal) = qual_createNull (); ;}
     break;
 
   case 339:
-#line 1351 "cgrammar.y"
+
     { (yyval.typequal) = qual_createIsNull (); ;}
     break;
 
   case 340:
-#line 1352 "cgrammar.y"
+
     { (yyval.typequal) = qual_createRelNull (); ;}
     break;
 
   case 341:
-#line 1353 "cgrammar.y"
+
     { (yyval.typequal) = qual_createNotNull (); ;}
     break;
 
   case 342:
-#line 1354 "cgrammar.y"
+
     { (yyval.typequal) = qual_createExposed (); ;}
     break;
 
   case 343:
-#line 1355 "cgrammar.y"
+
     { (yyval.typequal) = qual_createObserver (); ;}
     break;
 
   case 344:
-#line 1356 "cgrammar.y"
+
     { (yyval.typequal) = qual_createNullTerminated (); ;}
     break;
 
   case 345:
-#line 1357 "cgrammar.y"
+
     { (yyval.typequal) = qual_createMetaState ((yyvsp[(1) - (1)].annotation)); ;}
     break;
 
   case 346:
-#line 1361 "cgrammar.y"
+
     { (yyval.typequal) = qual_createReturned (); ;}
     break;
 
   case 347:
-#line 1362 "cgrammar.y"
+
     { (yyval.typequal) = qual_createSef (); ;}
     break;
 
   case 348:
-#line 1366 "cgrammar.y"
+
     { (yyval.typequal) = qual_createUnused (); ;}
     break;
 
   case 349:
-#line 1367 "cgrammar.y"
+
     { (yyval.typequal) = qual_createExternal (); ;}
     break;
 
   case 350:
-#line 1371 "cgrammar.y"
+
     { (yyval.typequal) = qual_createTrueNull (); ;}
     break;
 
   case 351:
-#line 1372 "cgrammar.y"
+
     { (yyval.typequal) = qual_createFalseNull (); ;}
     break;
 
   case 352:
-#line 1376 "cgrammar.y"
+
     { (yyval.typequal) = qual_createAbstract (); ;}
     break;
 
   case 353:
-#line 1377 "cgrammar.y"
+
     { (yyval.typequal) = qual_createNumAbstract (); ;}
     break;
 
   case 354:
-#line 1378 "cgrammar.y"
+
     { (yyval.typequal) = qual_createConcrete (); ;}
     break;
 
   case 355:
-#line 1379 "cgrammar.y"
+
     { (yyval.typequal) = qual_createMutable (); ;}
     break;
 
   case 356:
-#line 1380 "cgrammar.y"
+
     { (yyval.typequal) = qual_createImmutable (); ;}
     break;
 
   case 357:
-#line 1384 "cgrammar.y"
+
     { (yyval.typequal) = qual_createRefCounted (); ;}
     break;
 
   case 358:
-#line 1385 "cgrammar.y"
+
     { (yyval.typequal) = qual_createRefs (); ;}
     break;
 
   case 359:
-#line 1386 "cgrammar.y"
+
     { (yyval.typequal) = qual_createKillRef (); ;}
     break;
 
   case 360:
-#line 1387 "cgrammar.y"
+
     { (yyval.typequal) = qual_createRelDef (); ;}
     break;
 
   case 361:
-#line 1388 "cgrammar.y"
+
     { (yyval.typequal) = qual_createNewRef (); ;}
     break;
 
   case 362:
-#line 1389 "cgrammar.y"
+
     { (yyval.typequal) = qual_createTempRef (); ;}
     break;
 
   case 363:
-#line 1393 "cgrammar.y"
+
     { (yyval.typequal) = qual_createShort (); ;}
     break;
 
   case 364:
-#line 1394 "cgrammar.y"
+
     { (yyval.typequal) = qual_createLong (); ;}
     break;
 
   case 365:
-#line 1395 "cgrammar.y"
+
     { (yyval.typequal) = qual_createSigned (); ;}
     break;
 
   case 366:
-#line 1396 "cgrammar.y"
+
     { (yyval.typequal) = qual_createUnsigned (); ;}
     break;
 
   case 367:
-#line 1400 "cgrammar.y"
+
     { (yyval.typequal) = qual_createOut (); ;}
     break;
 
   case 368:
-#line 1401 "cgrammar.y"
+
     { (yyval.typequal) = qual_createIn (); ;}
     break;
 
   case 369:
-#line 1402 "cgrammar.y"
+
     { (yyval.typequal) = qual_createPartial (); ;}
     break;
 
   case 370:
-#line 1403 "cgrammar.y"
+
     { (yyval.typequal) = qual_createSpecial (); ;}
     break;
 
   case 371:
-#line 1407 "cgrammar.y"
+
     { (yyval.typequal) = qual_createConst (); ;}
     break;
 
   case 372:
-#line 1408 "cgrammar.y"
+
     { (yyval.typequal) = qual_createVolatile (); ;}
     break;
 
   case 373:
-#line 1409 "cgrammar.y"
+
     { (yyval.typequal) = qual_createRestrict (); ;}
     break;
 
   case 374:
-#line 1410 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 375:
-#line 1411 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 376:
-#line 1412 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 377:
-#line 1413 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 378:
-#line 1414 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 379:
-#line 1415 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 380:
-#line 1416 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 381:
-#line 1417 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 382:
-#line 1418 "cgrammar.y"
+
     { (yyval.typequal) = (yyvsp[(1) - (2)].typequal); ;}
     break;
 
   case 389:
-#line 1432 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeAnytype (); ;}
     break;
 
   case 390:
-#line 1433 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_anyintegral; ;}
     break;
 
   case 391:
-#line 1434 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_unsignedintegral; ;}
     break;
 
   case 392:
-#line 1435 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_signedintegral; ;}
     break;
 
   case 396:
-#line 1439 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_fromQual ((yyvsp[(1) - (2)].typequal)); ;}
     break;
 
   case 397:
-#line 1444 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_resolve ((yyvsp[(2) - (3)].qtyp)); ;}
     break;
 
   case 398:
-#line 1448 "cgrammar.y"
+
     { (yyval.qtyp) = (yyvsp[(1) - (1)].qtyp); ;}
     break;
 
   case 399:
-#line 1450 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_mergeAlt ((yyvsp[(1) - (4)].qtyp), (yyvsp[(3) - (4)].qtyp)); ;}
     break;
 
   case 401:
-#line 1456 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_mergeAlt ((yyvsp[(1) - (3)].qtyp), (yyvsp[(3) - (3)].qtyp)); ;}
     break;
 
   case 402:
-#line 1460 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_addQual ((yyvsp[(2) - (2)].qtyp), (yyvsp[(1) - (2)].typequal)); ;}
     break;
 
   case 403:
-#line 1461 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_addQual ((yyvsp[(2) - (2)].qtyp), (yyvsp[(1) - (2)].typequal)); ;}
     break;
 
   case 404:
-#line 1462 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_combine ((yyvsp[(2) - (2)].qtyp), (yyvsp[(1) - (2)].ctyp)); ;}
     break;
 
   case 405:
-#line 1466 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_unknown (); ;}
     break;
 
   case 406:
-#line 1467 "cgrammar.y"
+
     { (yyval.qtyp) = (yyvsp[(1) - (1)].qtyp); ;}
     break;
 
   case 407:
-#line 1471 "cgrammar.y"
+
     { (yyval.conL) = constraintList_undefined; ;}
     break;
 
   case 408:
-#line 1478 "cgrammar.y"
+
     { sRef_setGlobalScopeSafe (); ;}
     break;
 
   case 409:
-#line 1480 "cgrammar.y"
+
     { sRef_clearGlobalScopeSafe (); ;}
     break;
 
   case 410:
-#line 1483 "cgrammar.y"
+
     { ctype ct; ct = declareStruct ((yyvsp[(3) - (12)].cname), (yyvsp[(8) - (12)].flist)); /* context_setGlobalStructInfo(ct, $12); */ (yyval.ctyp) = ct; ;}
     break;
 
   case 411:
-#line 1484 "cgrammar.y"
+
     { sRef_setGlobalScopeSafe (); ;}
     break;
 
   case 412:
-#line 1486 "cgrammar.y"
+
     { sRef_clearGlobalScopeSafe (); ;}
     break;
 
   case 413:
-#line 1488 "cgrammar.y"
+
     { (yyval.ctyp) = declareUnion ((yyvsp[(3) - (11)].cname), (yyvsp[(8) - (11)].flist)); ;}
     break;
 
   case 414:
-#line 1490 "cgrammar.y"
+
     { (yyval.ctyp) = declareStruct ((yyvsp[(3) - (6)].cname), uentryList_new ()); ;}
     break;
 
   case 415:
-#line 1492 "cgrammar.y"
+
     { (yyval.ctyp) = declareUnion ((yyvsp[(3) - (6)].cname), uentryList_new ()); ;}
     break;
 
   case 416:
-#line 1493 "cgrammar.y"
+
     { sRef_setGlobalScopeSafe (); ;}
     break;
 
   case 417:
-#line 1495 "cgrammar.y"
+
     { sRef_clearGlobalScopeSafe (); ;}
     break;
 
   case 418:
-#line 1497 "cgrammar.y"
+
     { (yyval.ctyp) = declareUnnamedStruct ((yyvsp[(7) - (10)].flist)); ;}
     break;
 
   case 419:
-#line 1498 "cgrammar.y"
+
     { sRef_setGlobalScopeSafe (); ;}
     break;
 
   case 420:
-#line 1500 "cgrammar.y"
+
     { sRef_clearGlobalScopeSafe (); ;}
     break;
 
   case 421:
-#line 1502 "cgrammar.y"
+
     { (yyval.ctyp) = declareUnnamedUnion ((yyvsp[(7) - (10)].flist)); ;}
     break;
 
   case 422:
-#line 1504 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_createUnnamedStruct (uentryList_new ()); ;}
     break;
 
   case 423:
-#line 1506 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_createUnnamedUnion (uentryList_new ()); ;}
     break;
 
   case 424:
-#line 1507 "cgrammar.y"
+
     { (yyval.ctyp) = handleStruct ((yyvsp[(3) - (4)].cname)); ;}
     break;
 
   case 425:
-#line 1508 "cgrammar.y"
+
     { (yyval.ctyp) = handleUnion ((yyvsp[(3) - (4)].cname)); ;}
     break;
 
   case 426:
-#line 1512 "cgrammar.y"
+
     { cscannerHelp_clearExpectingTypeName (); ;}
     break;
 
   case 428:
-#line 1517 "cgrammar.y"
+
     { (yyval.flist) = uentryList_undefined; /* bogus! */ ;}
     break;
 
   case 429:
-#line 1518 "cgrammar.y"
+
     { (yyval.flist) = uentryList_mergeFields ((yyvsp[(1) - (2)].flist), (yyvsp[(2) - (2)].flist)); ;}
     break;
 
   case 430:
-#line 1523 "cgrammar.y"
+
     { (yyval.flist) = fixUentryList ((yyvsp[(3) - (5)].ntyplist), (yyvsp[(1) - (5)].qtyp)); ;}
     break;
 
   case 431:
-#line 1525 "cgrammar.y"
+
     { (yyval.flist) = fixUnnamedDecl ((yyvsp[(1) - (3)].qtyp)); ;}
     break;
 
   case 432:
-#line 1530 "cgrammar.y"
+
     { (yyval.ntyplist) = idDeclList_singleton ((yyvsp[(1) - (2)].ntyp)); ;}
     break;
 
   case 433:
-#line 1532 "cgrammar.y"
+
     { (yyval.ntyplist) = idDeclList_add ((yyvsp[(1) - (4)].ntyplist), (yyvsp[(3) - (4)].ntyp)); ;}
     break;
 
   case 434:
-#line 1536 "cgrammar.y"
+
     { (yyval.ntyp) = (yyvsp[(1) - (1)].ntyp); ;}
     break;
 
   case 435:
-#line 1537 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_undefined; ;}
     break;
 
   case 436:
-#line 1538 "cgrammar.y"
+
     { (yyval.ntyp) = (yyvsp[(1) - (4)].ntyp); ;}
     break;
 
   case 437:
-#line 1544 "cgrammar.y"
+
     { (yyval.ctyp) = declareUnnamedEnum ((yyvsp[(4) - (6)].enumnamelist)); ;}
     break;
 
   case 438:
-#line 1545 "cgrammar.y"
+
     { context_pushLoc (); ;}
     break;
 
   case 439:
-#line 1546 "cgrammar.y"
+
     { context_popLoc (); (yyval.ctyp) = declareEnum ((yyvsp[(3) - (8)].cname), (yyvsp[(6) - (8)].enumnamelist)); ;}
     break;
 
   case 440:
-#line 1547 "cgrammar.y"
+
     { (yyval.ctyp) = handleEnum ((yyvsp[(3) - (4)].cname)); ;}
     break;
 
   case 441:
-#line 1552 "cgrammar.y"
+
     { (yyval.enumnamelist) = enumNameList_single ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
   case 442:
-#line 1554 "cgrammar.y"
+
     { (yyval.enumnamelist) = enumNameList_push ((yyvsp[(1) - (3)].enumnamelist), (yyvsp[(3) - (3)].cname)); ;}
     break;
 
   case 444:
-#line 1560 "cgrammar.y"
+
     { uentry ue = uentry_makeEnumConstant ((yyvsp[(1) - (1)].cname), ctype_unknown);
      usymtab_supGlobalEntry (ue);
      (yyval.cname) = (yyvsp[(1) - (1)].cname);
@@ -6446,7 +6435,7 @@ yyreduce:
     break;
 
   case 445:
-#line 1565 "cgrammar.y"
+
     { uentry ue = uentry_makeEnumInitializedConstant ((yyvsp[(1) - (4)].cname), ctype_unknown, (yyvsp[(4) - (4)].expr));
      usymtab_supGlobalEntry (ue);
      (yyval.cname) = (yyvsp[(1) - (4)].cname); 
@@ -6454,12 +6443,12 @@ yyreduce:
     break;
 
   case 447:
-#line 1573 "cgrammar.y"
+
     { (yyval.ntyp) = idDecl_create (cstring_undefined, qtype_create ((yyvsp[(1) - (1)].ctyp))); ;}
     break;
 
   case 448:
-#line 1575 "cgrammar.y"
+
     { 
      qtype qt = qtype_unknown ();
      qtype_adjustPointers ((yyvsp[(1) - (2)].pointers), qt);
@@ -6468,117 +6457,117 @@ yyreduce:
     break;
 
   case 449:
-#line 1581 "cgrammar.y"
+
     { (yyval.ntyp) = (yyvsp[(2) - (2)].ntyp); qtype_adjustPointers ((yyvsp[(1) - (2)].pointers), idDecl_getTyp ((yyval.ntyp))); ;}
     break;
 
   case 451:
-#line 1587 "cgrammar.y"
+
     { (yyval.ntyp) = (yyvsp[(2) - (2)].ntyp); qtype_adjustPointers ((yyvsp[(1) - (2)].pointers), idDecl_getTyp ((yyval.ntyp))); ;}
     break;
 
   case 452:
-#line 1591 "cgrammar.y"
+
     { (yyval.entrylist) = handleParamTypeList ((yyvsp[(1) - (1)].entrylist)); ;}
     break;
 
   case 453:
-#line 1592 "cgrammar.y"
+
     { (yyval.entrylist) = handleParamIdList ((yyvsp[(2) - (2)].entrylist)); ;}
     break;
 
   case 454:
-#line 1596 "cgrammar.y"
+
     { (yyval.typequal) = qual_createConst (); ;}
     break;
 
   case 455:
-#line 1597 "cgrammar.y"
+
     { (yyval.typequal) = qual_createRestrict (); ;}
     break;
 
   case 456:
-#line 1598 "cgrammar.y"
+
     { (yyval.typequal) = qual_createVolatile (); ;}
     break;
 
   case 457:
-#line 1602 "cgrammar.y"
+
     { (yyval.tquallist) = qualList_single ((yyvsp[(1) - (1)].typequal)); ;}
     break;
 
   case 458:
-#line 1603 "cgrammar.y"
+
     { (yyval.tquallist) = qualList_add ((yyvsp[(1) - (2)].tquallist), (yyvsp[(2) - (2)].typequal)); ;}
     break;
 
   case 459:
-#line 1607 "cgrammar.y"
+
     { (yyval.pointers) = pointers_create ((yyvsp[(1) - (1)].tok)); ;}
     break;
 
   case 460:
-#line 1608 "cgrammar.y"
+
     { (yyval.pointers) = pointers_createMods ((yyvsp[(1) - (2)].tok), (yyvsp[(2) - (2)].tquallist)); ;}
     break;
 
   case 461:
-#line 1609 "cgrammar.y"
+
     { (yyval.pointers) = pointers_extend (pointers_create ((yyvsp[(1) - (2)].tok)), (yyvsp[(2) - (2)].pointers)); ;}
     break;
 
   case 462:
-#line 1610 "cgrammar.y"
+
     { (yyval.pointers) = pointers_extend (pointers_createMods ((yyvsp[(1) - (3)].tok), (yyvsp[(2) - (3)].tquallist)), (yyvsp[(3) - (3)].pointers)); ;}
     break;
 
   case 464:
-#line 1615 "cgrammar.y"
+
     { (yyval.entrylist) = uentryList_add ((yyvsp[(1) - (3)].entrylist), uentry_makeElipsisMarker ()); ;}
     break;
 
   case 465:
-#line 1619 "cgrammar.y"
+
     { (yyval.entrylist) = uentryList_single (uentry_makeVariableLoc ((yyvsp[(1) - (1)].cname), ctype_int)); ;}
     break;
 
   case 466:
-#line 1620 "cgrammar.y"
+
     { (yyval.entrylist) = uentryList_add ((yyvsp[(1) - (3)].entrylist), uentry_makeVariableLoc ((yyvsp[(3) - (3)].cname), ctype_int)); ;}
     break;
 
   case 467:
-#line 1624 "cgrammar.y"
+
     { (yyval.entrylist) = uentryList_single (uentry_makeElipsisMarker ()); ;}
     break;
 
   case 469:
-#line 1626 "cgrammar.y"
+
     { (yyval.entrylist) = uentryList_add ((yyvsp[(1) - (3)].entrylist), uentry_makeElipsisMarker ()); ;}
     break;
 
   case 470:
-#line 1630 "cgrammar.y"
+
     { storeLoc (); ;}
     break;
 
   case 471:
-#line 1630 "cgrammar.y"
+
     { (yyval.entrylist) = uentryList_single ((yyvsp[(2) - (2)].oentry)); ;}
     break;
 
   case 472:
-#line 1631 "cgrammar.y"
+
     { storeLoc (); ;}
     break;
 
   case 473:
-#line 1632 "cgrammar.y"
+
     { (yyval.entrylist) = uentryList_add ((yyvsp[(1) - (4)].entrylist), (yyvsp[(4) - (4)].oentry)); ;}
     break;
 
   case 474:
-#line 1637 "cgrammar.y"
+
     { 
      if (isFlipOldStyle ()) 
        { 
@@ -6593,7 +6582,7 @@ yyreduce:
     break;
 
   case 475:
-#line 1649 "cgrammar.y"
+
     { 
      idDecl tparam = idDecl_create ((yyvsp[(1) - (1)].cname), qtype_unknown ());
 
@@ -6610,422 +6599,420 @@ yyreduce:
     break;
 
   case 477:
-#line 1666 "cgrammar.y"
+
     { (yyval.qtyp) = qtype_newBase ((yyvsp[(1) - (2)].qtyp), (yyvsp[(2) - (2)].ctyp)); ;}
     break;
 
   case 478:
-#line 1670 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_adjustPointers ((yyvsp[(1) - (1)].pointers), ctype_unknown); ;}
     break;
 
   case 480:
-#line 1672 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_adjustPointers ((yyvsp[(1) - (2)].pointers), (yyvsp[(2) - (2)].ctyp)); ;}
     break;
 
   case 481:
-#line 1676 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_unknown; ;}
     break;
 
   case 483:
-#line 1682 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_expectFunction ((yyvsp[(4) - (5)].ctyp)); ;}
     break;
 
   case 484:
-#line 1683 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeArray (ctype_unknown); ;}
     break;
 
   case 485:
-#line 1685 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeFixedArray (ctype_unknown, exprNode_getLongValue ((yyvsp[(2) - (3)].expr))); ;}
     break;
 
   case 486:
-#line 1686 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeInnerArray ((yyvsp[(1) - (3)].ctyp)); ;}
     break;
 
   case 487:
-#line 1688 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeInnerFixedArray ((yyvsp[(1) - (4)].ctyp), exprNode_getLongValue ((yyvsp[(3) - (4)].expr))); ;}
     break;
 
   case 488:
-#line 1690 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;}
     break;
 
   case 489:
-#line 1692 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeParamsFunction (ctype_unknown, (yyvsp[(3) - (4)].entrylist)); ;}
     break;
 
   case 490:
-#line 1694 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeFunction ((yyvsp[(1) - (4)].ctyp), uentryList_makeMissingParams ()); ;}
     break;
 
   case 491:
-#line 1696 "cgrammar.y"
+
     { (yyval.ctyp) = ctype_makeParamsFunction ((yyvsp[(1) - (5)].ctyp), (yyvsp[(4) - (5)].entrylist)); ;}
     break;
 
   case 502:
-#line 1715 "cgrammar.y"
+
     { exprNode_revealState ((yyvsp[(3) - (4)].expr)); (yyval.expr) = exprNode_undefined; ;}
     break;
 
   case 503:
-#line 1719 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 506:
-#line 1729 "cgrammar.y"
+
     { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 507:
-#line 1734 "cgrammar.y"
+
     { (yyval.expr) = exprNode_while ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 508:
-#line 1736 "cgrammar.y"
+
     { (yyval.expr) = exprNode_doWhile ((yyvsp[(2) - (7)].expr), (yyvsp[(5) - (7)].expr)); ;}
     break;
 
   case 509:
-#line 1738 "cgrammar.y"
+
     { (yyval.expr) = exprNode_doWhile ((yyvsp[(2) - (6)].expr), (yyvsp[(5) - (6)].expr)); ;}
     break;
 
   case 510:
-#line 1740 "cgrammar.y"
+
     { (yyval.expr) = exprNode_for ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 511:
-#line 1745 "cgrammar.y"
+
     { context_setProtectVars (); ;}
     break;
 
   case 512:
-#line 1745 "cgrammar.y"
+
     { context_sizeofReleaseVars (); ;}
     break;
 
   case 513:
-#line 1747 "cgrammar.y"
+
     { (yyval.expr) = exprNode_forPred ((yyvsp[(3) - (10)].expr), (yyvsp[(5) - (10)].expr), (yyvsp[(8) - (10)].expr)); 
      context_enterForClause ((yyvsp[(5) - (10)].expr)); ;}
     break;
 
   case 514:
-#line 1753 "cgrammar.y"
+
     { setProcessingIterVars ((yyvsp[(1) - (3)].entry)); ;}
     break;
 
   case 515:
-#line 1755 "cgrammar.y"
+
     { (yyval.expr) = exprNode_iterStart ((yyvsp[(1) - (6)].entry), (yyvsp[(5) - (6)].exprlist)); ;}
     break;
 
   case 516:
-#line 1756 "cgrammar.y"
+
     { (yyval.expr) = exprNode_createId ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
   case 520:
-#line 1763 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (2)].expr); DPRINTF (("def stmt: %s", exprNode_unparse ((yyval.expr)))); ;}
     break;
 
   case 528:
-#line 1771 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(2) - (3)].expr); ;}
     break;
 
   case 529:
-#line 1772 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeError (); ;}
     break;
 
   case 530:
-#line 1776 "cgrammar.y"
+
     { exprNode_checkIfPred ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
   case 531:
-#line 1777 "cgrammar.y"
+
     { /* don't: context_exitTrueClause ($1, $2); */
      (yyval.expr) = exprNode_if ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); 
    ;}
     break;
 
   case 532:
-#line 1783 "cgrammar.y"
+
     { (yyval.expr) = exprNode_createTok ((yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 533:
-#line 1787 "cgrammar.y"
+
     { (yyval.expr) = exprNode_createTok ((yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 544:
-#line 1804 "cgrammar.y"
+
     { (yyval.expr) = exprNode_addParens ((yyvsp[(1) - (3)].tok), (yyvsp[(2) - (3)].expr)); ;}
     break;
 
   case 547:
-#line 1807 "cgrammar.y"
+
     { (yyval.expr) = exprNode_makeError (); ;}
     break;
 
   case 548:
-#line 1811 "cgrammar.y"
+
     { (yyval.expr) = exprNode_labelMarker ((yyvsp[(1) - (2)].cname)); ;}
     break;
 
   case 549:
-#line 1812 "cgrammar.y"
+
     { (yyval.expr) = exprNode_notReached ((yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 550:
-#line 1820 "cgrammar.y"
+
     { ; ;}
     break;
 
   case 551:
-#line 1821 "cgrammar.y"
+
     { ; ;}
     break;
 
   case 552:
-#line 1828 "cgrammar.y"
+
     { context_enterCaseClause ((yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 553:
-#line 1829 "cgrammar.y"
+
     { (yyval.expr) = exprNode_caseMarker ((yyvsp[(2) - (4)].expr), FALSE); ;}
     break;
 
   case 554:
-#line 1830 "cgrammar.y"
+
     { context_enterCaseClause ((yyvsp[(4) - (4)].expr)); ;}
     break;
 
   case 555:
-#line 1831 "cgrammar.y"
+
     { (yyval.expr) = exprNode_caseMarker ((yyvsp[(4) - (6)].expr), TRUE); ;}
     break;
 
   case 556:
-#line 1835 "cgrammar.y"
+
     { context_enterCaseClause (exprNode_undefined); ;}
     break;
 
   case 557:
-#line 1836 "cgrammar.y"
+
     { (yyval.expr) = exprNode_defaultMarker ((yyvsp[(1) - (3)].tok), FALSE); ;}
     break;
 
   case 558:
-#line 1837 "cgrammar.y"
+
     { context_enterCaseClause (exprNode_undefined); ;}
     break;
 
   case 559:
-#line 1838 "cgrammar.y"
+
     { (yyval.expr) = exprNode_defaultMarker ((yyvsp[(3) - (5)].tok), TRUE); ;}
     break;
 
   case 560:
-#line 1842 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(2) - (3)].expr); ;}
     break;
 
   case 561:
-#line 1844 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(2) - (2)].expr); context_exitInner ((yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 562:
-#line 1848 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(2) - (3)].expr); ;}
     break;
 
   case 563:
-#line 1852 "cgrammar.y"
+
     { context_enterInnerContext (); ;}
     break;
 
   case 564:
-#line 1856 "cgrammar.y"
+
     { context_exitInnerPlain (); ;}
     break;
 
   case 565:
-#line 1860 "cgrammar.y"
+
     { context_enterStructInnerContext (); ;}
     break;
 
   case 566:
-#line 1864 "cgrammar.y"
+
     { context_exitStructInnerContext (); ;}
     break;
 
   case 567:
-#line 1868 "cgrammar.y"
-    { context_exitInnerSafe (); ;}
-    break;
 
-  case 568:
-#line 1872 "cgrammar.y"
-    { (yyval.expr) = exprNode_createTok ((yyvsp[(1) - (1)].tok)); ;}
+    { context_exitInnerSafe (); ;}
     break;
 
   case 569:
-#line 1873 "cgrammar.y"
-    { (yyval.expr) = exprNode_notReached (exprNode_createTok ((yyvsp[(2) - (2)].tok))); ;}
-    break;
 
-  case 570:
-#line 1874 "cgrammar.y"
-    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(1) - (2)].expr), lltok_getLoc ((yyvsp[(2) - (2)].tok))); ;}
+    { (yyval.expr) = exprNode_concat((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 571:
-#line 1876 "cgrammar.y"
-    { (yyval.expr) = exprNode_notReached (exprNode_updateLocation ((yyvsp[(1) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok)))); ;}
+
+    { (yyval.expr) = exprNode_concat((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 572:
-#line 1877 "cgrammar.y"
-    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(1) - (2)].expr), lltok_getLoc ((yyvsp[(2) - (2)].tok))); ;}
+
+    { (yyval.expr) = exprNode_createTok ((yyvsp[(1) - (1)].tok)); ;}
     break;
 
   case 573:
-#line 1879 "cgrammar.y"
-    { (yyval.expr) = exprNode_notReached (exprNode_updateLocation ((yyvsp[(1) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok)))); ;}
+
+    { (yyval.expr) = exprNode_notReached (exprNode_createTok ((yyvsp[(2) - (2)].tok))); ;}
     break;
 
   case 574:
-#line 1881 "cgrammar.y"
-    { (yyval.expr) = exprNode_updateLocation (exprNode_concat ((yyvsp[(1) - (3)].expr), (yyvsp[(2) - (3)].expr)), lltok_getLoc ((yyvsp[(3) - (3)].tok))); ;}
+
+    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(1) - (2)].expr), lltok_getLoc ((yyvsp[(2) - (2)].tok))); ;}
     break;
 
   case 575:
-#line 1883 "cgrammar.y"
-    { (yyval.expr) = exprNode_notReached (exprNode_updateLocation (exprNode_concat ((yyvsp[(1) - (4)].expr), (yyvsp[(2) - (4)].expr)), 
-							lltok_getLoc ((yyvsp[(3) - (4)].tok)))); 
-   ;}
+
+    { (yyval.expr) = exprNode_notReached (exprNode_updateLocation ((yyvsp[(1) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok)))); ;}
     break;
 
   case 576:
-#line 1890 "cgrammar.y"
-    { (yyval.expr) = exprNode_makeBlock ((yyvsp[(2) - (2)].expr)); ;}
+
+    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(1) - (2)].expr), lltok_getLoc ((yyvsp[(2) - (2)].tok))); ;}
     break;
 
   case 577:
-#line 1895 "cgrammar.y"
-    { (yyval.expr) = exprNode_createTok ((yyvsp[(2) - (2)].tok)); ;}
+
+    { (yyval.expr) = exprNode_notReached (exprNode_updateLocation ((yyvsp[(1) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok)))); ;}
     break;
 
   case 578:
-#line 1897 "cgrammar.y"
-    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(2) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok))); ;}
+
+    { (yyval.expr) = exprNode_makeBlock ((yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 579:
-#line 1899 "cgrammar.y"
-    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(2) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok))); ;}
+
+    { (yyval.expr) = exprNode_createTok ((yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 580:
-#line 1901 "cgrammar.y"
-    { (yyval.expr) = exprNode_updateLocation (exprNode_concat ((yyvsp[(2) - (4)].expr), (yyvsp[(3) - (4)].expr)), lltok_getLoc ((yyvsp[(4) - (4)].tok))); ;}
+
+    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(2) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok))); ;}
     break;
 
-  case 582:
-#line 1906 "cgrammar.y"
-    { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
+  case 581:
+
+    { (yyval.expr) = exprNode_updateLocation ((yyvsp[(2) - (3)].expr), lltok_getLoc ((yyvsp[(3) - (3)].tok))); ;}
     break;
 
-  case 583:
-#line 1910 "cgrammar.y"
-    { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
+  case 582:
+
+    { (yyval.expr) = exprNode_updateLocation (exprNode_concat ((yyvsp[(2) - (4)].expr), (yyvsp[(3) - (4)].expr)), lltok_getLoc ((yyvsp[(4) - (4)].tok))); ;}
     break;
 
   case 584:
-#line 1911 "cgrammar.y"
+
     { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 585:
-#line 1915 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 586:
-#line 1916 "cgrammar.y"
-    { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); ;}
+
+    { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 587:
-#line 1920 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 588:
-#line 1921 "cgrammar.y"
-    { (yyval.expr) = (yyvsp[(2) - (4)].expr); ;}
+
+    { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr)); ;}
     break;
 
   case 589:
-#line 1925 "cgrammar.y"
+
     { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 590:
-#line 1926 "cgrammar.y"
-    { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
+
+    { (yyval.expr) = (yyvsp[(2) - (4)].expr); ;}
     break;
 
   case 591:
-#line 1930 "cgrammar.y"
-    { (yyval.expr) = exprNode_createTok ((yyvsp[(1) - (1)].tok)); ;}
+
+    { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 592:
-#line 1931 "cgrammar.y"
-    { (yyval.expr) = exprNode_statement ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
+
+    { (yyval.expr) = exprNode_concat ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 593:
-#line 1935 "cgrammar.y"
+
     { (yyval.expr) = exprNode_createTok ((yyvsp[(1) - (1)].tok)); ;}
     break;
 
   case 594:
-#line 1936 "cgrammar.y"
+
     { (yyval.expr) = exprNode_statement ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 595:
-#line 1937 "cgrammar.y"
-    { (yyval.expr) = exprNode_checkExpr ((yyvsp[(1) - (1)].expr)); ;}
+
+    { (yyval.expr) = exprNode_createTok ((yyvsp[(1) - (1)].tok)); ;}
     break;
 
   case 596:
-#line 1942 "cgrammar.y"
+
+    { (yyval.expr) = exprNode_statement ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
+    break;
+
+  case 597:
+
+    { (yyval.expr) = exprNode_checkExpr ((yyvsp[(1) - (1)].expr)); ;}
+    break;
+
+  case 598:
+
     { 
      exprNode_produceGuards ((yyvsp[(3) - (4)].expr)); context_enterTrueClause ((yyvsp[(3) - (4)].expr)); 
      exprNode_checkIfPred ((yyvsp[(3) - (4)].expr));
@@ -7033,92 +7020,92 @@ yyreduce:
    ;}
     break;
 
-  case 597:
-#line 1956 "cgrammar.y"
+  case 599:
+
     { 
      context_exitTrueClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr));
      (yyval.expr) = exprNode_if ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); 
    ;}
     break;
 
-  case 598:
-#line 1960 "cgrammar.y"
+  case 600:
+
     { context_enterFalseClause ((yyvsp[(1) - (3)].expr)); ;}
     break;
 
-  case 599:
-#line 1961 "cgrammar.y"
+  case 601:
+
     {
      context_exitClause ((yyvsp[(1) - (5)].expr), (yyvsp[(2) - (5)].expr), (yyvsp[(5) - (5)].expr));
      (yyval.expr) = exprNode_ifelse ((yyvsp[(1) - (5)].expr), (yyvsp[(2) - (5)].expr), (yyvsp[(5) - (5)].expr)); 
    ;}
     break;
 
-  case 600:
-#line 1965 "cgrammar.y"
+  case 602:
+
     { context_enterSwitch ((yyvsp[(3) - (3)].expr)); ;}
     break;
 
-  case 601:
-#line 1966 "cgrammar.y"
+  case 603:
+
     { (yyval.expr) = exprNode_switch ((yyvsp[(3) - (6)].expr), (yyvsp[(6) - (6)].expr)); ;}
     break;
 
-  case 602:
-#line 1971 "cgrammar.y"
+  case 604:
+
     { (yyval.expr) = exprNode_whilePred ((yyvsp[(3) - (4)].expr)); context_enterWhileClause ((yyvsp[(3) - (4)].expr)); ;}
     break;
 
-  case 603:
-#line 1976 "cgrammar.y"
+  case 605:
+
     { (yyval.expr) = exprNode_whilePred((yyvsp[(3) - (4)].expr)); ;}
     break;
 
-  case 604:
-#line 1980 "cgrammar.y"
+  case 606:
+
     { context_enterIterClause (); ;}
     break;
 
-  case 605:
-#line 1981 "cgrammar.y"
+  case 607:
+
     { setProcessingIterVars ((yyvsp[(1) - (4)].entry)); ;}
     break;
 
-  case 606:
-#line 1984 "cgrammar.y"
+  case 608:
+
     { 
      (yyval.expr) = exprNode_iter ((yyvsp[(1) - (10)].entry), (yyvsp[(6) - (10)].exprlist), (yyvsp[(8) - (10)].expr), (yyvsp[(9) - (10)].entry)); 
 
    ;}
     break;
 
-  case 607:
-#line 1991 "cgrammar.y"
+  case 609:
+
     { (yyval.exprlist) = exprNodeList_singleton ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
-  case 608:
-#line 1992 "cgrammar.y"
+  case 610:
+
     { nextIterParam (); ;}
     break;
 
-  case 609:
-#line 1993 "cgrammar.y"
+  case 611:
+
     { (yyval.exprlist) = exprNodeList_push ((yyvsp[(1) - (4)].exprlist), (yyvsp[(4) - (4)].expr)); ;}
     break;
 
-  case 610:
-#line 1997 "cgrammar.y"
+  case 612:
+
     { (yyval.expr) = exprNode_iterExpr ((yyvsp[(1) - (1)].expr)); ;}
     break;
 
-  case 611:
-#line 1998 "cgrammar.y"
+  case 613:
+
     { (yyval.expr) = exprNode_iterId ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
-  case 612:
-#line 1999 "cgrammar.y"
+  case 614:
+
     { uentry ue = cscannerHelp_coerceIterId ((yyvsp[(1) - (1)].cname));
 
 		      if (uentry_isValid (ue)) 
@@ -7132,434 +7119,434 @@ yyreduce:
 		    ;}
     break;
 
-  case 613:
-#line 2010 "cgrammar.y"
+  case 615:
+
     { (yyval.expr) = exprNode_iterNewId ((yyvsp[(1) - (1)].cname)); ;}
     break;
 
-  case 615:
-#line 2019 "cgrammar.y"
+  case 617:
+
     { (yyval.expr) = exprNode_combineLiterals ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
-  case 617:
-#line 2024 "cgrammar.y"
+  case 619:
+
     { (yyval.expr) = exprNode_addParens ((yyvsp[(1) - (3)].tok), (yyvsp[(2) - (3)].expr)); ;}
     break;
 
-  case 619:
-#line 2029 "cgrammar.y"
+  case 621:
+
     { (yyval.expr) = exprNode_arrayFetch ((yyvsp[(1) - (4)].expr), (yyvsp[(3) - (4)].expr)); ;}
     break;
 
-  case 620:
-#line 2030 "cgrammar.y"
+  case 622:
+
     { (yyval.expr) = exprNode_functionCall ((yyvsp[(1) - (3)].expr), exprNodeList_new ()); ;}
     break;
 
-  case 621:
-#line 2031 "cgrammar.y"
+  case 623:
+
     { (yyval.expr) = exprNode_functionCall ((yyvsp[(1) - (4)].expr), (yyvsp[(3) - (4)].exprlist)); ;}
     break;
 
-  case 622:
-#line 2033 "cgrammar.y"
+  case 624:
+
     { (yyval.expr) = exprNode_vaArg ((yyvsp[(1) - (6)].tok), (yyvsp[(3) - (6)].expr), (yyvsp[(5) - (6)].qtyp)); ;}
     break;
 
-  case 623:
-#line 2034 "cgrammar.y"
+  case 625:
+
     { (yyval.expr) = exprNode_fieldAccess ((yyvsp[(1) - (5)].expr), (yyvsp[(3) - (5)].tok), (yyvsp[(4) - (5)].cname)); ;}
     break;
 
-  case 624:
-#line 2035 "cgrammar.y"
+  case 626:
+
     { (yyval.expr) = exprNode_arrowAccess ((yyvsp[(1) - (5)].expr), (yyvsp[(3) - (5)].tok), (yyvsp[(4) - (5)].cname)); ;}
     break;
 
-  case 625:
-#line 2036 "cgrammar.y"
-    { (yyval.expr) = exprNode_postOp ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
-    break;
+  case 627:
 
-  case 626:
-#line 2037 "cgrammar.y"
     { (yyval.expr) = exprNode_postOp ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 628:
-#line 2042 "cgrammar.y"
-    { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
-    break;
 
-  case 629:
-#line 2043 "cgrammar.y"
-    { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
+    { (yyval.expr) = exprNode_postOp ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].tok)); ;}
     break;
 
   case 630:
-#line 2044 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 631:
-#line 2045 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 632:
-#line 2046 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 633:
-#line 2047 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 634:
-#line 2048 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 635:
-#line 2049 "cgrammar.y"
+
     { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 636:
-#line 2050 "cgrammar.y"
-    { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
+
+    { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
+    break;
+
+  case 637:
+
+    { (yyval.expr) = exprNode_preOp ((yyvsp[(2) - (2)].expr), (yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 638:
-#line 2055 "cgrammar.y"
-    { (yyval.expr) = exprNode_cast ((yyvsp[(1) - (4)].tok), (yyvsp[(4) - (4)].expr), (yyvsp[(2) - (4)].qtyp)); ;}
+
+    { (yyval.expr) = (yyvsp[(1) - (1)].expr); ;}
     break;
 
   case 640:
-#line 2060 "cgrammar.y"
-    { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
+
+    { (yyval.expr) = exprNode_cast ((yyvsp[(1) - (4)].tok), (yyvsp[(4) - (4)].expr), (yyvsp[(2) - (4)].qtyp)); ;}
     break;
 
-  case 641:
-#line 2061 "cgrammar.y"
+  case 642:
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
-  case 642:
-#line 2062 "cgrammar.y"
+  case 643:
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 644:
-#line 2067 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
-  case 645:
-#line 2068 "cgrammar.y"
+  case 646:
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 647:
-#line 2073 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
-  case 648:
-#line 2074 "cgrammar.y"
+  case 649:
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 650:
-#line 2079 "cgrammar.y"
-    { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
-    break;
 
-  case 651:
-#line 2080 "cgrammar.y"
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 652:
-#line 2081 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 653:
-#line 2082 "cgrammar.y"
+
+    { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
+    break;
+
+  case 654:
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 655:
-#line 2087 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
-  case 656:
-#line 2088 "cgrammar.y"
+  case 657:
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 658:
-#line 2093 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 660:
-#line 2098 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 662:
-#line 2103 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 664:
-#line 2108 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 666:
-#line 2113 "cgrammar.y"
+
     { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 668:
-#line 2118 "cgrammar.y"
-    { context_enterTrueClause ((yyvsp[(1) - (2)].expr)); ;}
-    break;
 
-  case 669:
-#line 2119 "cgrammar.y"
-    { context_enterFalseClause ((yyvsp[(1) - (4)].expr)); ;}
+    { (yyval.expr) = exprNode_op ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 670:
-#line 2120 "cgrammar.y"
-    { (yyval.expr) = exprNode_condIfOmit ((yyvsp[(1) - (6)].expr), (yyvsp[(6) - (6)].expr)); ;}
+
+    { context_enterTrueClause ((yyvsp[(1) - (2)].expr)); ;}
     break;
 
   case 671:
-#line 2121 "cgrammar.y"
-    { context_enterTrueClause ((yyvsp[(1) - (2)].expr)); ;}
+
+    { context_enterFalseClause ((yyvsp[(1) - (4)].expr)); ;}
     break;
 
   case 672:
-#line 2122 "cgrammar.y"
-    { context_enterFalseClause ((yyvsp[(1) - (5)].expr)); ;}
+
+    { (yyval.expr) = exprNode_condIfOmit ((yyvsp[(1) - (6)].expr), (yyvsp[(6) - (6)].expr)); ;}
     break;
 
   case 673:
-#line 2123 "cgrammar.y"
-    { (yyval.expr) = exprNode_cond ((yyvsp[(1) - (7)].expr), (yyvsp[(4) - (7)].expr), (yyvsp[(7) - (7)].expr)); ;}
+
+    { context_enterTrueClause ((yyvsp[(1) - (2)].expr)); ;}
     break;
 
-  case 675:
-#line 2128 "cgrammar.y"
-    { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
+  case 674:
+
+    { context_enterFalseClause ((yyvsp[(1) - (5)].expr)); ;}
     break;
 
-  case 676:
-#line 2129 "cgrammar.y"
-    { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
+  case 675:
+
+    { (yyval.expr) = exprNode_cond ((yyvsp[(1) - (7)].expr), (yyvsp[(4) - (7)].expr), (yyvsp[(7) - (7)].expr)); ;}
     break;
 
   case 677:
-#line 2130 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 678:
-#line 2131 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 679:
-#line 2132 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 680:
-#line 2133 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 681:
-#line 2134 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 682:
-#line 2135 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 683:
-#line 2136 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 684:
-#line 2137 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 685:
-#line 2138 "cgrammar.y"
+
     { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 686:
-#line 2142 "cgrammar.y"
-    { (yyval.entry) = (yyvsp[(1) - (1)].entry); ;}
+
+    { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 687:
-#line 2143 "cgrammar.y"
-    { (yyval.entry) = uentry_undefined; ;}
+
+    { (yyval.expr) = exprNode_assign ((yyvsp[(1) - (3)].expr), (yyvsp[(3) - (3)].expr), (yyvsp[(2) - (3)].tok)); ;}
     break;
 
   case 688:
-#line 2147 "cgrammar.y"
-    { context_enterDoWhileClause (); (yyval.tok) = (yyvsp[(1) - (1)].tok); ;}
+
+    { (yyval.entry) = (yyvsp[(1) - (1)].entry); ;}
     break;
 
   case 689:
-#line 2152 "cgrammar.y"
-    { (yyval.expr) = exprNode_while ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitWhileClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
+
+    { (yyval.entry) = uentry_undefined; ;}
     break;
 
   case 690:
-#line 2154 "cgrammar.y"
-    { (yyval.expr) = exprNode_statement (exprNode_doWhile ((yyvsp[(2) - (7)].expr), (yyvsp[(5) - (7)].expr)), (yyvsp[(7) - (7)].tok)); ;}
+
+    { context_enterDoWhileClause (); (yyval.tok) = (yyvsp[(1) - (1)].tok); ;}
     break;
 
   case 691:
-#line 2156 "cgrammar.y"
-    { (yyval.expr) = exprNode_for ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitForClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
+
+    { (yyval.expr) = exprNode_while ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitWhileClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 692:
-#line 2160 "cgrammar.y"
-    { (yyval.expr) = exprNode_while ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitWhileClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
+
+    { (yyval.expr) = exprNode_statement (exprNode_doWhile ((yyvsp[(2) - (7)].expr), (yyvsp[(5) - (7)].expr)), (yyvsp[(7) - (7)].tok)); ;}
     break;
 
   case 693:
-#line 2162 "cgrammar.y"
-    { (yyval.expr) = exprNode_statement (exprNode_doWhile ((yyvsp[(2) - (7)].expr), (yyvsp[(5) - (7)].expr)), (yyvsp[(7) - (7)].tok)); ;}
+
+    { (yyval.expr) = exprNode_for ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitForClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 694:
-#line 2164 "cgrammar.y"
-    { (yyval.expr) = exprNode_doWhile ((yyvsp[(2) - (6)].expr), (yyvsp[(5) - (6)].expr)); ;}
+
+    { (yyval.expr) = exprNode_while ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitWhileClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 695:
-#line 2165 "cgrammar.y"
-    { (yyval.expr) = exprNode_for ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitForClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
+
+    { (yyval.expr) = exprNode_statement (exprNode_doWhile ((yyvsp[(2) - (7)].expr), (yyvsp[(5) - (7)].expr)), (yyvsp[(7) - (7)].tok)); ;}
     break;
 
   case 696:
-#line 2169 "cgrammar.y"
-    { (yyval.expr) = exprNode_goto ((yyvsp[(2) - (3)].cname)); ;}
+
+    { (yyval.expr) = exprNode_doWhile ((yyvsp[(2) - (6)].expr), (yyvsp[(5) - (6)].expr)); ;}
     break;
 
   case 697:
-#line 2170 "cgrammar.y"
-    { (yyval.expr) = exprNode_continue ((yyvsp[(1) - (2)].tok), BADTOK); ;}
+
+    { (yyval.expr) = exprNode_for ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); context_exitForClause ((yyvsp[(1) - (2)].expr), (yyvsp[(2) - (2)].expr)); ;}
     break;
 
   case 698:
-#line 2172 "cgrammar.y"
-    { (yyval.expr) = exprNode_continue ((yyvsp[(1) - (3)].tok), QINNERCONTINUE); ;}
+
+    { (yyval.expr) = exprNode_goto ((yyvsp[(2) - (3)].cname)); ;}
     break;
 
   case 699:
-#line 2173 "cgrammar.y"
-    { (yyval.expr) = exprNode_break ((yyvsp[(1) - (2)].tok), BADTOK); ;}
+
+    { (yyval.expr) = exprNode_continue ((yyvsp[(1) - (2)].tok), BADTOK); ;}
     break;
 
   case 700:
-#line 2174 "cgrammar.y"
-    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QSWITCHBREAK); ;}
+
+    { (yyval.expr) = exprNode_continue ((yyvsp[(1) - (3)].tok), QINNERCONTINUE); ;}
     break;
 
   case 701:
-#line 2175 "cgrammar.y"
-    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QLOOPBREAK); ;}
+
+    { (yyval.expr) = exprNode_break ((yyvsp[(1) - (2)].tok), BADTOK); ;}
     break;
 
   case 702:
-#line 2176 "cgrammar.y"
-    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QINNERBREAK); ;}
+
+    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QSWITCHBREAK); ;}
     break;
 
   case 703:
-#line 2177 "cgrammar.y"
-    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QSAFEBREAK); ;}
+
+    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QLOOPBREAK); ;}
     break;
 
   case 704:
-#line 2178 "cgrammar.y"
-    { (yyval.expr) = exprNode_nullReturn ((yyvsp[(1) - (2)].tok)); ;}
+
+    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QINNERBREAK); ;}
     break;
 
   case 705:
-#line 2179 "cgrammar.y"
-    { (yyval.expr) = exprNode_return ((yyvsp[(2) - (3)].expr)); ;}
+
+    { (yyval.expr) = exprNode_break ((yyvsp[(2) - (3)].tok), QSAFEBREAK); ;}
+    break;
+
+  case 706:
+
+    { (yyval.expr) = exprNode_nullReturn ((yyvsp[(1) - (2)].tok)); ;}
     break;
 
   case 707:
-#line 2184 "cgrammar.y"
-    { ; ;}
+
+    { (yyval.expr) = exprNode_return ((yyvsp[(2) - (3)].expr)); ;}
     break;
 
   case 709:
-#line 2189 "cgrammar.y"
+
     { ; ;}
     break;
 
-  case 712:
-#line 2198 "cgrammar.y"
+  case 711:
+
+    { ; ;}
+    break;
+
+  case 714:
+
     { (yyval.cname) = uentry_getName ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
-  case 713:
-#line 2199 "cgrammar.y"
+  case 715:
+
     { (yyval.cname) = uentry_getName ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
-  case 714:
-#line 2200 "cgrammar.y"
+  case 716:
+
     { (yyval.cname) = uentry_getName ((yyvsp[(1) - (1)].entry)); ;}
     break;
 
-  case 715:
-#line 2201 "cgrammar.y"
+  case 717:
+
     { (yyval.cname) = (yyvsp[(1) - (1)].cname); ;}
     break;
 
-  case 717:
-#line 2206 "cgrammar.y"
+  case 719:
+
     { (yyval.ctyp) = ctype_unknown; ;}
     break;
 
-  case 718:
-#line 2207 "cgrammar.y"
+  case 720:
+
     { (yyval.ctyp) = exprNode_getType ((yyvsp[(3) - (4)].expr)); exprNode_free ((yyvsp[(3) - (4)].expr)); ;}
     break;
 
-  case 719:
-#line 2208 "cgrammar.y"
+  case 721:
+
     { (yyval.ctyp) = qtype_getType ((yyvsp[(3) - (4)].qtyp)); ;}
     break;
 
 
 /* Line 1267 of yacc.c.  */
-#line 7505 "cgrammar.tab.c"
+
       default: break;
     }
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
@@ -7773,7 +7760,7 @@ yyreturn:
 }
 
 
-#line 2211 "cgrammar.y"
+
 
 
 /*@-redecl@*/ /*@-namechecks@*/
diff --git a/src/cgrammar.y b/src/cgrammar.y
index 0a4f0bb..6a5e8b7 100644
--- a/src/cgrammar.y
+++ b/src/cgrammar.y
@@ -307,7 +307,7 @@ extern void yyerror (char *);
 %type <expr> init macroBody iterBody endBody partialIterStmt iterSelectionStmt
 %type <expr> stmt stmtList fcnBody iterStmt iterDefStmt iterDefStmtList debugStmt
 %type <expr> labeledStmt caseStmt defaultStmt 
-%type <expr> compoundStmt compoundStmtAux compoundStmtRest compoundStmtAuxErr
+%type <expr> compoundStmt compoundStmtAux compoundStmtRest compoundStmtListNext compoundInitListNext compoundStmtAuxErr
 %type <expr> expressionStmt selectionStmt iterationStmt jumpStmt iterDefIterationStmt 
 %type <expr> stmtErr stmtListErr compoundStmtErr expressionStmtErr 
 %type <expr> iterationStmtErr initializerList typeInitializerList initializer
@@ -1868,21 +1868,25 @@ DeleteInnerScopeSafe
  : { context_exitInnerSafe (); }
 ;
 
+compoundInitListNext
+ : initializerList
+ | initializerList compoundStmtListNext { $$ = exprNode_concat($1, $2); }
+;
+
+compoundStmtListNext
+ : stmtList
+ | stmtList compoundInitListNext { $$ = exprNode_concat($1, $2); }
+;
+
 compoundStmtRest
  : TRBRACE { $$ = exprNode_createTok ($1); }
  | QNOTREACHED TRBRACE { $$ = exprNode_notReached (exprNode_createTok ($2)); }
- | stmtList TRBRACE { $$ = exprNode_updateLocation ($1, lltok_getLoc ($2)); }
- | stmtList QNOTREACHED TRBRACE 
+ | compoundInitListNext TRBRACE { $$ = exprNode_updateLocation ($1, lltok_getLoc ($2)); }
+ | compoundInitListNext QNOTREACHED TRBRACE 
    { $$ = exprNode_notReached (exprNode_updateLocation ($1, lltok_getLoc ($3))); }
- | initializerList TRBRACE { $$ = exprNode_updateLocation ($1, lltok_getLoc ($2)); }
- | initializerList QNOTREACHED TRBRACE 
+ | compoundStmtListNext TRBRACE { $$ = exprNode_updateLocation ($1, lltok_getLoc ($2)); }
+ | compoundStmtListNext QNOTREACHED TRBRACE 
    { $$ = exprNode_notReached (exprNode_updateLocation ($1, lltok_getLoc ($3))); }
- | initializerList stmtList TRBRACE
-   { $$ = exprNode_updateLocation (exprNode_concat ($1, $2), lltok_getLoc ($3)); }
- | initializerList stmtList QNOTREACHED TRBRACE
-   { $$ = exprNode_notReached (exprNode_updateLocation (exprNode_concat ($1, $2), 
-							lltok_getLoc ($3))); 
-   }
 ;
 
 compoundStmtAux
diff --git a/src/llgrammar.c.der b/src/llgrammar.c.der
index 7339b8f..7dda394 100644
--- a/src/llgrammar.c.der
+++ b/src/llgrammar.c.der
@@ -408,7 +408,7 @@
 
 
 /* Copy the first part of user declarations.  */
-#line 27 "llgrammar.y"
+
 
 
 # include "splintMacros.nf"
@@ -471,7 +471,7 @@ bool g_inTypeDef = FALSE;
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 72 "llgrammar.y"
+
 {
   ltoken ltok;  /* a leaf is also an ltoken */
   qual typequal;
@@ -539,7 +539,7 @@ typedef union YYSTYPE
   /*@-redef@*/
 }
 /* Line 187 of yacc.c.  */
-#line 485 "llgrammar.tab.c"
+
 	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
@@ -552,7 +552,7 @@ typedef union YYSTYPE
 
 
 /* Line 216 of yacc.c.  */
-#line 498 "llgrammar.tab.c"
+
 
 #ifdef short
 # undef short
@@ -2996,209 +2996,209 @@ yyreduce:
   switch (yyn)
     {
         case 2:
-#line 382 "llgrammar.y"
+
     { lhExternals ((yyvsp[(1) - (1)].interfacelist)); ;}
     break;
 
   case 3:
-#line 383 "llgrammar.y"
+
     { interfaceNodeList_free ((yyvsp[(1) - (3)].interfacelist)); interfaceNodeList_free ((yyvsp[(3) - (3)].interfacelist)); ;}
     break;
 
   case 4:
-#line 387 "llgrammar.y"
+
     { (yyval.interfacelist) = interfaceNodeList_new (); ;}
     break;
 
   case 5:
-#line 388 "llgrammar.y"
+
     { (yyval.interfacelist) = interfaceNodeList_addh ((yyvsp[(1) - (2)].interfacelist), (yyvsp[(2) - (2)].iface));;}
     break;
 
   case 8:
-#line 397 "llgrammar.y"
+
     { (yyval.interfacelist) = interfaceNodeList_new (); ;}
     break;
 
   case 9:
-#line 398 "llgrammar.y"
+
     { (yyval.interfacelist) = consInterfaceNode ((yyvsp[(1) - (2)].iface), (yyvsp[(2) - (2)].interfacelist));;}
     break;
 
   case 10:
-#line 399 "llgrammar.y"
+
     { (yyval.interfacelist) = consInterfaceNode ((yyvsp[(1) - (2)].iface), (yyvsp[(2) - (2)].interfacelist));;}
     break;
 
   case 11:
-#line 403 "llgrammar.y"
+
     { (yyval.interfacelist) = interfaceNodeList_new (); ;}
     break;
 
   case 12:
-#line 404 "llgrammar.y"
+
     { (yyval.interfacelist) = interfaceNodeList_addh ((yyvsp[(1) - (2)].interfacelist), (yyvsp[(2) - (2)].iface));;}
     break;
 
   case 16:
-#line 415 "llgrammar.y"
+
     { (yyval.iface) = makeInterfaceNodeImports ((yyvsp[(2) - (3)].importlist));
      /* assume subspecs are already processed, symbol table info in external file */
    ;}
     break;
 
   case 17:
-#line 422 "llgrammar.y"
+
     { (yyval.iface) = makeInterfaceNodeUses ((yyvsp[(2) - (3)].traitreflist)); readlsignatures ((yyval.iface));;}
     break;
 
   case 18:
-#line 427 "llgrammar.y"
+
     { declareConstant ((yyvsp[(1) - (1)].constdeclaration)); (yyval.iface) = interfaceNode_makeConst ((yyvsp[(1) - (1)].constdeclaration)); ;}
     break;
 
   case 19:
-#line 429 "llgrammar.y"
+
     { declareVar ((yyvsp[(1) - (1)].vardeclaration)); (yyval.iface) = interfaceNode_makeVar ((yyvsp[(1) - (1)].vardeclaration)); ;}
     break;
 
   case 20:
-#line 431 "llgrammar.y"
+
     { declareType ((yyvsp[(1) - (1)].type)); (yyval.iface) = interfaceNode_makeType ((yyvsp[(1) - (1)].type)); ;}
     break;
 
   case 21:
-#line 433 "llgrammar.y"
+
     { declareFcn ((yyvsp[(1) - (1)].fcn), typeId_invalid); (yyval.iface) = interfaceNode_makeFcn ((yyvsp[(1) - (1)].fcn)); ;}
     break;
 
   case 22:
-#line 435 "llgrammar.y"
+
     { (yyval.iface) = interfaceNode_makeClaim ((yyvsp[(1) - (1)].claim)); ;}
     break;
 
   case 23:
-#line 437 "llgrammar.y"
+
     { declareIter ((yyvsp[(1) - (1)].iter)); (yyval.iface) = interfaceNode_makeIter ((yyvsp[(1) - (1)].iter)); ;}
     break;
 
   case 24:
-#line 442 "llgrammar.y"
+
     { (yyval.iter) = makeIterNode ((yyvsp[(2) - (6)].ltok), (yyvsp[(4) - (6)].paramlist)); ;}
     break;
 
   case 25:
-#line 446 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_new (); ;}
     break;
 
   case 26:
-#line 447 "llgrammar.y"
+
     { (yyval.paramlist) = (yyvsp[(1) - (1)].paramlist); ;}
     break;
 
   case 27:
-#line 452 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_add (paramNodeList_new (),  (yyvsp[(1) - (1)].param)); ;}
     break;
 
   case 28:
-#line 454 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_add ((yyvsp[(1) - (3)].paramlist),(yyvsp[(3) - (3)].param)); ;}
     break;
 
   case 29:
-#line 458 "llgrammar.y"
+
     { (yyval.param) = markYieldParamNode ((yyvsp[(2) - (2)].param)); ;}
     break;
 
   case 30:
-#line 459 "llgrammar.y"
+
     { (yyval.param) = (yyvsp[(1) - (1)].param); ;}
     break;
 
   case 31:
-#line 463 "llgrammar.y"
+
     { symtable_export (g_symtab, FALSE); ;}
     break;
 
   case 32:
-#line 464 "llgrammar.y"
+
     { (yyval.iface) = (yyvsp[(3) - (3)].iface); symtable_export (g_symtab, TRUE); ;}
     break;
 
   case 33:
-#line 469 "llgrammar.y"
+
     { declarePrivConstant ((yyvsp[(1) - (1)].constdeclaration)); (yyval.iface) =  interfaceNode_makePrivConst ((yyvsp[(1) - (1)].constdeclaration)); ;}
     break;
 
   case 34:
-#line 471 "llgrammar.y"
+
     { declarePrivVar ((yyvsp[(1) - (1)].vardeclaration)); (yyval.iface) = interfaceNode_makePrivVar ((yyvsp[(1) - (1)].vardeclaration)); ;}
     break;
 
   case 35:
-#line 473 "llgrammar.y"
+
     { declarePrivType ((yyvsp[(1) - (1)].type)); (yyval.iface) = interfaceNode_makePrivType ((yyvsp[(1) - (1)].type)); ;}
     break;
 
   case 36:
-#line 475 "llgrammar.y"
+
     { declarePrivFcn ((yyvsp[(1) - (1)].fcn), typeId_invalid); (yyval.iface) = interfaceNode_makePrivFcn ((yyvsp[(1) - (1)].fcn)); ;}
     break;
 
   case 37:
-#line 480 "llgrammar.y"
+
     { (yyval.constdeclaration) = makeConstDeclarationNode ((yyvsp[(2) - (4)].lcltypespec), (yyvsp[(3) - (4)].initdecls)); ;}
     break;
 
   case 38:
-#line 485 "llgrammar.y"
+
     { (yyval.vardeclaration) = makeVarDeclarationNode ((yyvsp[(1) - (3)].lcltypespec), (yyvsp[(2) - (3)].initdecls), FALSE, FALSE); (yyval.vardeclaration)->qualifier = QLF_NONE; ;}
     break;
 
   case 39:
-#line 487 "llgrammar.y"
+
     { (yyval.vardeclaration) = makeVarDeclarationNode ((yyvsp[(2) - (4)].lcltypespec), (yyvsp[(3) - (4)].initdecls), FALSE, FALSE); (yyval.vardeclaration)->qualifier = QLF_CONST; ;}
     break;
 
   case 40:
-#line 489 "llgrammar.y"
+
     { (yyval.vardeclaration) = makeVarDeclarationNode ((yyvsp[(2) - (4)].lcltypespec), (yyvsp[(3) - (4)].initdecls), FALSE, FALSE); (yyval.vardeclaration)->qualifier = QLF_VOLATILE; ;}
     break;
 
   case 41:
-#line 493 "llgrammar.y"
+
     { (yyval.type) = makeAbstractTypeNode ((yyvsp[(1) - (1)].abstract)); ;}
     break;
 
   case 42:
-#line 494 "llgrammar.y"
+
     { (yyval.type) = makeExposedTypeNode ((yyvsp[(1) - (1)].exposed)); ;}
     break;
 
   case 43:
-#line 498 "llgrammar.y"
+
     { (yyval.typequal) = qual_createPrintfLike (); ;}
     break;
 
   case 44:
-#line 499 "llgrammar.y"
+
     { (yyval.typequal) = qual_createScanfLike (); ;}
     break;
 
   case 45:
-#line 500 "llgrammar.y"
+
     { (yyval.typequal) = qual_createMessageLike (); ;}
     break;
 
   case 46:
-#line 504 "llgrammar.y"
+
     { enteringFcnScope ((yyvsp[(1) - (3)].lcltypespec), (yyvsp[(2) - (3)].declare), (yyvsp[(3) - (3)].globals)); ;}
     break;
 
   case 47:
-#line 506 "llgrammar.y"
+
     { (yyval.fcn) = makeFcnNode (qual_createUnknown (),  (yyvsp[(1) - (13)].lcltypespec), (yyvsp[(2) - (13)].declare), (yyvsp[(3) - (13)].globals), (yyvsp[(6) - (13)].vardeclarationlist), (yyvsp[(7) - (13)].letdecls), 
 		       (yyvsp[(8) - (13)].lclpredicate), (yyvsp[(9) - (13)].lclpredicate), (yyvsp[(10) - (13)].modify), (yyvsp[(11) - (13)].lclpredicate), (yyvsp[(12) - (13)].lclpredicate)); 
      /* type, declarator, glovbls, privateinits,
@@ -3208,12 +3208,12 @@ yyreduce:
     break;
 
   case 48:
-#line 512 "llgrammar.y"
+
     { enteringFcnScope ((yyvsp[(2) - (4)].lcltypespec), (yyvsp[(3) - (4)].declare), (yyvsp[(4) - (4)].globals)); ;}
     break;
 
   case 49:
-#line 516 "llgrammar.y"
+
     { (yyval.fcn) = makeFcnNode ((yyvsp[(1) - (14)].typequal), (yyvsp[(2) - (14)].lcltypespec), (yyvsp[(3) - (14)].declare), (yyvsp[(4) - (14)].globals), (yyvsp[(7) - (14)].vardeclarationlist), 
 		       (yyvsp[(8) - (14)].letdecls), (yyvsp[(9) - (14)].lclpredicate), (yyvsp[(10) - (14)].lclpredicate), (yyvsp[(11) - (14)].modify), (yyvsp[(12) - (14)].lclpredicate), (yyvsp[(13) - (14)].lclpredicate)); 
      /* type, declarator, glovbls, privateinits,
@@ -3223,484 +3223,484 @@ yyreduce:
     break;
 
   case 50:
-#line 526 "llgrammar.y"
+
     { enteringClaimScope ((yyvsp[(4) - (6)].paramlist), (yyvsp[(6) - (6)].globals)); ;}
     break;
 
   case 51:
-#line 528 "llgrammar.y"
+
     {      (yyval.claim) = makeClaimNode ((yyvsp[(2) - (13)].ltok), (yyvsp[(4) - (13)].paramlist), (yyvsp[(6) - (13)].globals), (yyvsp[(9) - (13)].letdecls), (yyvsp[(10) - (13)].lclpredicate), (yyvsp[(11) - (13)].program), (yyvsp[(12) - (13)].lclpredicate)); 
      symtable_exitScope (g_symtab); ;}
     break;
 
   case 52:
-#line 531 "llgrammar.y"
+
     { (yyval.claim) = (claimNode) 0; ;}
     break;
 
   case 53:
-#line 535 "llgrammar.y"
+
     {g_inTypeDef = TRUE; ;}
     break;
 
   case 54:
-#line 535 "llgrammar.y"
+
     {g_inTypeDef = FALSE; ;}
     break;
 
   case 55:
-#line 536 "llgrammar.y"
+
     { (yyval.abstract) = makeAbstractNode ((yyvsp[(1) - (6)].ltok), (yyvsp[(4) - (6)].ltok), TRUE, FALSE, (yyvsp[(6) - (6)].abstbody)); ;}
     break;
 
   case 56:
-#line 537 "llgrammar.y"
+
     {g_inTypeDef = TRUE; ;}
     break;
 
   case 57:
-#line 538 "llgrammar.y"
+
     {g_inTypeDef = FALSE; ;}
     break;
 
   case 58:
-#line 539 "llgrammar.y"
+
     { (yyval.abstract) = makeAbstractNode ((yyvsp[(1) - (7)].ltok), (yyvsp[(5) - (7)].ltok), TRUE, TRUE, (yyvsp[(7) - (7)].abstbody)); ;}
     break;
 
   case 59:
-#line 540 "llgrammar.y"
+
     {g_inTypeDef = TRUE; ;}
     break;
 
   case 60:
-#line 541 "llgrammar.y"
+
     {g_inTypeDef = FALSE; ;}
     break;
 
   case 61:
-#line 542 "llgrammar.y"
+
     { (yyval.abstract) = makeAbstractNode ((yyvsp[(2) - (7)].ltok), (yyvsp[(5) - (7)].ltok), TRUE, TRUE, (yyvsp[(7) - (7)].abstbody)); ;}
     break;
 
   case 62:
-#line 543 "llgrammar.y"
+
     {g_inTypeDef = TRUE; ;}
     break;
 
   case 63:
-#line 543 "llgrammar.y"
+
     {g_inTypeDef = FALSE; ;}
     break;
 
   case 64:
-#line 544 "llgrammar.y"
+
     { (yyval.abstract) = makeAbstractNode ((yyvsp[(1) - (6)].ltok), (yyvsp[(4) - (6)].ltok), FALSE, FALSE, (yyvsp[(6) - (6)].abstbody)); ;}
     break;
 
   case 65:
-#line 548 "llgrammar.y"
+
     { g_inTypeDef = TRUE; setExposedType ((yyvsp[(2) - (2)].lcltypespec)); ;}
     break;
 
   case 66:
-#line 549 "llgrammar.y"
+
     { g_inTypeDef = FALSE; ;}
     break;
 
   case 67:
-#line 550 "llgrammar.y"
+
     { (yyval.exposed) = makeExposedNode ((yyvsp[(1) - (6)].ltok), (yyvsp[(2) - (6)].lcltypespec), (yyvsp[(4) - (6)].declaratorinvs)); /* to support mutually recursive types */ ;}
     break;
 
   case 68:
-#line 552 "llgrammar.y"
+
     { (yyval.exposed) = makeExposedNode ((yyvsp[(2) - (2)].ltok), makeLclTypeSpecNodeSU ((yyvsp[(1) - (2)].structorunion)), declaratorInvNodeList_new ()); ;}
     break;
 
   case 69:
-#line 554 "llgrammar.y"
+
     { (yyval.exposed) = makeExposedNode ((yyvsp[(2) - (2)].ltok), makeLclTypeSpecNodeEnum ((yyvsp[(1) - (2)].enumspec)), declaratorInvNodeList_new ()); ;}
     break;
 
   case 70:
-#line 571 "llgrammar.y"
+
     { (yyval.importlist) = importNodeList_add (importNodeList_new (),  (yyvsp[(1) - (1)].import)); ;}
     break;
 
   case 71:
-#line 573 "llgrammar.y"
+
     { (yyval.importlist) = importNodeList_add ((yyvsp[(1) - (3)].importlist), (yyvsp[(3) - (3)].import)); ;}
     break;
 
   case 72:
-#line 577 "llgrammar.y"
+
     { (yyval.import) = importNode_makePlain ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 73:
-#line 579 "llgrammar.y"
+
     { checkBrackets ((yyvsp[(1) - (3)].ltok), (yyvsp[(3) - (3)].ltok)); (yyval.import) = importNode_makeBracketed ((yyvsp[(2) - (3)].ltok)); ;}
     break;
 
   case 74:
-#line 580 "llgrammar.y"
+
     { (yyval.import) = importNode_makeQuoted ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 75:
-#line 584 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_singleton ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 76:
-#line 585 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_push ((yyvsp[(1) - (3)].ltokenList), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 78:
-#line 595 "llgrammar.y"
+
     { (yyval.traitreflist) = traitRefNodeList_add (traitRefNodeList_new (),  (yyvsp[(1) - (1)].traitref)); ;}
     break;
 
   case 79:
-#line 597 "llgrammar.y"
+
     { (yyval.traitreflist) = traitRefNodeList_add ((yyvsp[(1) - (3)].traitreflist), (yyvsp[(3) - (3)].traitref)); ;}
     break;
 
   case 80:
-#line 602 "llgrammar.y"
+
     { (yyval.traitref) = makeTraitRefNode (ltokenList_singleton ((yyvsp[(1) - (1)].ltok)), (renamingNode)0); ;}
     break;
 
   case 81:
-#line 604 "llgrammar.y"
+
     { (yyval.traitref) = makeTraitRefNode (ltokenList_singleton ((yyvsp[(1) - (4)].ltok)), (yyvsp[(3) - (4)].renaming)); ;}
     break;
 
   case 82:
-#line 606 "llgrammar.y"
+
     { (yyval.traitref) = makeTraitRefNode ((yyvsp[(2) - (3)].ltokenList), (renamingNode)0); ;}
     break;
 
   case 83:
-#line 608 "llgrammar.y"
+
     { (yyval.traitref) = makeTraitRefNode ((yyvsp[(2) - (6)].ltokenList), (yyvsp[(5) - (6)].renaming)); ;}
     break;
 
   case 84:
-#line 612 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_singleton ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 85:
-#line 613 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_push ((yyvsp[(1) - (3)].ltokenList), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 86:
-#line 618 "llgrammar.y"
+
     { (yyval.renaming) = makeRenamingNode (typeNameNodeList_new (),  (yyvsp[(1) - (1)].replacelist)); ;}
     break;
 
   case 87:
-#line 620 "llgrammar.y"
+
     { (yyval.renaming) = makeRenamingNode ((yyvsp[(1) - (1)].namelist), replaceNodeList_new ()); ;}
     break;
 
   case 88:
-#line 621 "llgrammar.y"
+
     { (yyval.renaming) = makeRenamingNode ((yyvsp[(1) - (3)].namelist), (yyvsp[(3) - (3)].replacelist)); ;}
     break;
 
   case 89:
-#line 626 "llgrammar.y"
+
     { (yyval.namelist) = typeNameNodeList_add (typeNameNodeList_new (),  (yyvsp[(1) - (1)].typname)); ;}
     break;
 
   case 90:
-#line 627 "llgrammar.y"
+
     { (yyval.namelist) = typeNameNodeList_add ((yyvsp[(1) - (3)].namelist), (yyvsp[(3) - (3)].typname)); ;}
     break;
 
   case 91:
-#line 632 "llgrammar.y"
+
     { (yyval.replacelist) = replaceNodeList_add (replaceNodeList_new (),  (yyvsp[(1) - (1)].replace)); ;}
     break;
 
   case 92:
-#line 633 "llgrammar.y"
+
     { (yyval.replacelist) = replaceNodeList_add ((yyvsp[(1) - (3)].replacelist), (yyvsp[(3) - (3)].replace)); ;}
     break;
 
   case 93:
-#line 637 "llgrammar.y"
+
     { (yyval.replace) = makeReplaceNode ((yyvsp[(2) - (3)].ltok), (yyvsp[(1) - (3)].typname), TRUE, (yyvsp[(3) - (3)].ltok), NULL, NULL); ;}
     break;
 
   case 94:
-#line 638 "llgrammar.y"
+
     { (yyval.replace) = makeReplaceNameNode ((yyvsp[(2) - (3)].ltok), (yyvsp[(1) - (3)].typname), (yyvsp[(3) - (3)].name)); ;}
     break;
 
   case 95:
-#line 639 "llgrammar.y"
+
     { (yyval.replace) = makeReplaceNode ((yyvsp[(2) - (4)].ltok), (yyvsp[(1) - (4)].typname), FALSE, ltoken_undefined,
 							 (yyvsp[(3) - (4)].name), (yyvsp[(4) - (4)].signature)); ;}
     break;
 
   case 96:
-#line 644 "llgrammar.y"
+
     { (yyval.name) = makeNameNodeId ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 97:
-#line 645 "llgrammar.y"
+
     { (yyval.name) = makeNameNodeForm ((yyvsp[(1) - (1)].opform)); ;}
     break;
 
   case 100:
-#line 656 "llgrammar.y"
+
     { (yyval.initdecls) = initDeclNodeList_add (initDeclNodeList_new (),  (yyvsp[(1) - (1)].initdecl)); ;}
     break;
 
   case 101:
-#line 658 "llgrammar.y"
+
     { (yyval.initdecls) = initDeclNodeList_add ((yyvsp[(1) - (3)].initdecls), (yyvsp[(3) - (3)].initdecl)); ;}
     break;
 
   case 102:
-#line 662 "llgrammar.y"
+
     { (yyval.initdecl) = makeInitDeclNode ((yyvsp[(1) - (1)].declare), (termNode)0); ;}
     break;
 
   case 103:
-#line 663 "llgrammar.y"
+
     { (yyval.initdecl) = makeInitDeclNode ((yyvsp[(1) - (3)].declare), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 104:
-#line 668 "llgrammar.y"
+
     { (yyval.globals) = varDeclarationNodeList_new (); ;}
     break;
 
   case 105:
-#line 670 "llgrammar.y"
+
     { varDeclarationNodeList_addh ((yyvsp[(1) - (2)].globals), (yyvsp[(2) - (2)].vardeclaration)); (yyval.globals) = (yyvsp[(1) - (2)].globals); ;}
     break;
 
   case 106:
-#line 674 "llgrammar.y"
+
     { (yyval.vardeclaration) = makeVarDeclarationNode ((yyvsp[(1) - (3)].lcltypespec), (yyvsp[(2) - (3)].initdecls), TRUE, FALSE); ;}
     break;
 
   case 107:
-#line 675 "llgrammar.y"
+
     { (yyval.vardeclaration) = makeInternalStateNode (); ;}
     break;
 
   case 108:
-#line 676 "llgrammar.y"
+
     { (yyval.vardeclaration) = makeFileSystemNode (); ;}
     break;
 
   case 109:
-#line 680 "llgrammar.y"
+
     { (yyval.vardeclarationlist) = varDeclarationNodeList_new (); ;}
     break;
 
   case 110:
-#line 681 "llgrammar.y"
+
     { varDeclarationNodeList_addh ((yyvsp[(1) - (2)].vardeclarationlist), (yyvsp[(2) - (2)].vardeclaration)); (yyval.vardeclarationlist) = (yyvsp[(1) - (2)].vardeclarationlist); ;}
     break;
 
   case 111:
-#line 686 "llgrammar.y"
+
     { (yyval.vardeclaration) = makeVarDeclarationNode ((yyvsp[(2) - (4)].lcltypespec), (yyvsp[(3) - (4)].initdecls), FALSE, TRUE); ;}
     break;
 
   case 112:
-#line 690 "llgrammar.y"
+
     { (yyval.letdecls) = letDeclNodeList_new (); ;}
     break;
 
   case 113:
-#line 691 "llgrammar.y"
+
     { (yyval.letdecls) = (yyvsp[(2) - (3)].letdecls); ;}
     break;
 
   case 114:
-#line 695 "llgrammar.y"
+
     { (yyval.letdecls) = letDeclNodeList_add (letDeclNodeList_new (),  (yyvsp[(1) - (1)].letdecl)); ;}
     break;
 
   case 115:
-#line 696 "llgrammar.y"
+
     { (yyval.letdecls) = letDeclNodeList_add ((yyvsp[(1) - (3)].letdecls), (yyvsp[(3) - (3)].letdecl)); ;}
     break;
 
   case 116:
-#line 700 "llgrammar.y"
+
     { (yyval.letdecl) = makeLetDeclNode ((yyvsp[(1) - (5)].ltok), (yyvsp[(3) - (5)].lcltypespec), (yyvsp[(5) - (5)].term)); ;}
     break;
 
   case 117:
-#line 701 "llgrammar.y"
+
     { (yyval.letdecl) = makeLetDeclNode ((yyvsp[(1) - (3)].ltok), (lclTypeSpecNode)0, (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 119:
-#line 708 "llgrammar.y"
+
     { (yyval.lclpredicate) = (lclPredicateNode)0; ;}
     break;
 
   case 120:
-#line 709 "llgrammar.y"
+
     { checkLclPredicate ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate)); (yyval.lclpredicate) = makeChecksNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate)); ;}
     break;
 
   case 121:
-#line 713 "llgrammar.y"
+
     { (yyval.lclpredicate) = (lclPredicateNode)0; ;}
     break;
 
   case 122:
-#line 714 "llgrammar.y"
+
     { checkLclPredicate ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate)); (yyval.lclpredicate) = makeRequiresNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate));;}
     break;
 
   case 123:
-#line 718 "llgrammar.y"
+
     { (yyval.modify) = (modifyNode)0; ;}
     break;
 
   case 124:
-#line 719 "llgrammar.y"
+
     { (yyval.modify) = makeModifyNodeSpecial ((yyvsp[(1) - (3)].ltok), TRUE); ;}
     break;
 
   case 125:
-#line 720 "llgrammar.y"
+
     { (yyval.modify) = makeModifyNodeSpecial ((yyvsp[(1) - (3)].ltok), FALSE); ;}
     break;
 
   case 126:
-#line 721 "llgrammar.y"
+
     { (yyval.modify) = makeModifyNodeRef ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].storereflist)); ;}
     break;
 
   case 127:
-#line 725 "llgrammar.y"
+
     { (yyval.storereflist) = storeRefNodeList_add (storeRefNodeList_new (),  (yyvsp[(1) - (1)].storeref)); ;}
     break;
 
   case 128:
-#line 726 "llgrammar.y"
+
     { (yyval.storereflist) = storeRefNodeList_add ((yyvsp[(1) - (3)].storereflist), (yyvsp[(3) - (3)].storeref)); ;}
     break;
 
   case 129:
-#line 730 "llgrammar.y"
+
     { (yyval.storeref) = makeStoreRefNodeTerm ((yyvsp[(1) - (1)].term)); ;}
     break;
 
   case 130:
-#line 731 "llgrammar.y"
+
     { (yyval.storeref) = makeStoreRefNodeType ((yyvsp[(1) - (1)].lcltypespec), FALSE); ;}
     break;
 
   case 131:
-#line 732 "llgrammar.y"
+
     { (yyval.storeref) = makeStoreRefNodeType ((yyvsp[(2) - (2)].lcltypespec), TRUE); ;}
     break;
 
   case 132:
-#line 733 "llgrammar.y"
+
     { (yyval.storeref) = makeStoreRefNodeInternal (); ;}
     break;
 
   case 133:
-#line 734 "llgrammar.y"
+
     { (yyval.storeref) = makeStoreRefNodeSystem (); ;}
     break;
 
   case 134:
-#line 738 "llgrammar.y"
+
     { (yyval.lclpredicate) = (lclPredicateNode)0; ;}
     break;
 
   case 135:
-#line 739 "llgrammar.y"
+
     { checkLclPredicate ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate)); (yyval.lclpredicate) = makeEnsuresNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate));;}
     break;
 
   case 136:
-#line 743 "llgrammar.y"
+
     { (yyval.lclpredicate) = (lclPredicateNode)0; ;}
     break;
 
   case 137:
-#line 744 "llgrammar.y"
+
     { checkLclPredicate ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate)); (yyval.lclpredicate) = makeIntraClaimNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate));;}
     break;
 
   case 138:
-#line 748 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_new (); ;}
     break;
 
   case 139:
-#line 749 "llgrammar.y"
+
     { (yyval.paramlist) = (yyvsp[(1) - (1)].paramlist); ;}
     break;
 
   case 141:
-#line 754 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_add (paramNodeList_new (),  paramNode_elipsis ()); ;}
     break;
 
   case 142:
-#line 755 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_add ((yyvsp[(1) - (3)].paramlist), paramNode_elipsis ()); ;}
     break;
 
   case 143:
-#line 759 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_single ((yyvsp[(1) - (1)].param)); ;}
     break;
 
   case 144:
-#line 760 "llgrammar.y"
+
     { (yyval.paramlist) = paramNodeList_add ((yyvsp[(1) - (3)].paramlist), (yyvsp[(3) - (3)].param)); ;}
     break;
 
   case 145:
-#line 764 "llgrammar.y"
+
     { (yyval.program) = (programNode)0; ;}
     break;
 
   case 146:
-#line 765 "llgrammar.y"
+
     { (yyval.program) = (yyvsp[(3) - (4)].program); ;}
     break;
 
   case 147:
-#line 766 "llgrammar.y"
+
     { (yyval.program) = (yyvsp[(3) - (5)].program); ;}
     break;
 
   case 148:
-#line 770 "llgrammar.y"
+
     { (yyval.program) = makeProgramNode ((yyvsp[(1) - (1)].stmt)); ;}
     break;
 
   case 149:
-#line 773 "llgrammar.y"
+
     { (yyval.program) = (yyvsp[(2) - (3)].program); (yyval.program)->wrapped = (yyval.program)->wrapped + 1; ;}
     break;
 
   case 150:
-#line 775 "llgrammar.y"
+
     { programNodeList x = programNodeList_new ();
      programNodeList_addh (x, (yyvsp[(1) - (2)].program));
      (yyval.program) = makeProgramNodeAction (x, ACT_ITER); 
@@ -3708,7 +3708,7 @@ yyreduce:
     break;
 
   case 151:
-#line 780 "llgrammar.y"
+
     { programNodeList x = programNodeList_new ();
      programNodeList_addh (x, (yyvsp[(1) - (3)].program));
      programNodeList_addh (x, (yyvsp[(3) - (3)].program));
@@ -3717,7 +3717,7 @@ yyreduce:
     break;
 
   case 152:
-#line 786 "llgrammar.y"
+
     { programNodeList x = programNodeList_new ();
      programNodeList_addh (x, (yyvsp[(1) - (3)].program));
      programNodeList_addh (x, (yyvsp[(3) - (3)].program));
@@ -3726,112 +3726,112 @@ yyreduce:
     break;
 
   case 153:
-#line 795 "llgrammar.y"
+
     { (yyval.stmt) = makeStmtNode (ltoken_undefined, (yyvsp[(1) - (4)].ltok), (yyvsp[(3) - (4)].termlist)); ;}
     break;
 
   case 154:
-#line 797 "llgrammar.y"
+
     { (yyval.stmt) = makeStmtNode (ltoken_undefined, (yyvsp[(1) - (3)].ltok), termNodeList_new ()); ;}
     break;
 
   case 155:
-#line 799 "llgrammar.y"
+
     { (yyval.stmt) = makeStmtNode ((yyvsp[(1) - (5)].ltok), (yyvsp[(3) - (5)].ltok), termNodeList_new ()); ;}
     break;
 
   case 156:
-#line 801 "llgrammar.y"
+
     { (yyval.stmt) = makeStmtNode ((yyvsp[(1) - (6)].ltok), (yyvsp[(3) - (6)].ltok), (yyvsp[(5) - (6)].termlist)); ;}
     break;
 
   case 157:
-#line 805 "llgrammar.y"
+
     { (yyval.termlist) = termNodeList_push (termNodeList_new (),  (yyvsp[(1) - (1)].term)); ;}
     break;
 
   case 158:
-#line 806 "llgrammar.y"
+
     { (yyval.termlist) = termNodeList_push ((yyvsp[(1) - (3)].termlist), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 160:
-#line 811 "llgrammar.y"
+
     { (yyval.term) = makeSimpleTermNode ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 161:
-#line 812 "llgrammar.y"
+
     { (yyval.term) = makePrefixTermNode ((yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].term)); ;}
     break;
 
   case 162:
-#line 813 "llgrammar.y"
+
     { (yyval.term) = makePostfixTermNode2 ((yyvsp[(1) - (2)].term), (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 163:
-#line 814 "llgrammar.y"
+
     { (yyval.term) = makeInfixTermNode ((yyvsp[(1) - (3)].term), (yyvsp[(2) - (3)].ltok), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 164:
-#line 815 "llgrammar.y"
+
     { (yyval.term) = (yyvsp[(2) - (3)].term); (yyval.term)->wrapped = (yyval.term)->wrapped + 1; ;}
     break;
 
   case 165:
-#line 817 "llgrammar.y"
+
     { (yyval.term) = makeOpCallTermNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].ltok), termNodeList_new (),  (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 166:
-#line 819 "llgrammar.y"
+
     { (yyval.term) = makeOpCallTermNode ((yyvsp[(1) - (4)].ltok), (yyvsp[(2) - (4)].ltok), (yyvsp[(3) - (4)].termlist), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 167:
-#line 823 "llgrammar.y"
+
     { (yyval.abstbody) = (abstBodyNode)0; ;}
     break;
 
   case 168:
-#line 824 "llgrammar.y"
+
     { (yyval.abstbody) = makeAbstBodyNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].fcns)); ;}
     break;
 
   case 169:
-#line 825 "llgrammar.y"
+
     { (yyval.abstbody) = makeAbstBodyNode2 ((yyvsp[(1) - (4)].ltok), (yyvsp[(2) - (4)].ltokenList)); ;}
     break;
 
   case 170:
-#line 826 "llgrammar.y"
+
     { (yyval.abstbody) = (abstBodyNode)0; ;}
     break;
 
   case 171:
-#line 830 "llgrammar.y"
+
     { (yyval.fcns) = fcnNodeList_new (); ;}
     break;
 
   case 172:
-#line 831 "llgrammar.y"
+
     { (yyval.fcns) = fcnNodeList_add ((yyvsp[(1) - (2)].fcns), (yyvsp[(2) - (2)].fcn)); ;}
     break;
 
   case 173:
-#line 835 "llgrammar.y"
+
     { (yyval.lclpredicate) = (lclPredicateNode)0; ;}
     break;
 
   case 175:
-#line 840 "llgrammar.y"
+
     { g_inTypeDef = FALSE; ;}
     break;
 
   case 176:
-#line 841 "llgrammar.y"
+
     { (yyvsp[(5) - (6)].lclpredicate)->tok = (yyvsp[(1) - (6)].ltok); (yyvsp[(5) - (6)].lclpredicate)->kind = LPD_CONSTRAINT;
      checkLclPredicate ((yyvsp[(1) - (6)].ltok), (yyvsp[(5) - (6)].lclpredicate));
      (yyval.lclpredicate) = (yyvsp[(5) - (6)].lclpredicate);
@@ -3841,954 +3841,954 @@ yyreduce:
     break;
 
   case 177:
-#line 850 "llgrammar.y"
+
     { (yyval.declaratorinvs) = declaratorInvNodeList_add (declaratorInvNodeList_new (),  (yyvsp[(1) - (1)].declaratorinv)); ;}
     break;
 
   case 178:
-#line 852 "llgrammar.y"
+
     { (yyval.declaratorinvs) = declaratorInvNodeList_add ((yyvsp[(1) - (3)].declaratorinvs), (yyvsp[(3) - (3)].declaratorinv)); ;}
     break;
 
   case 179:
-#line 856 "llgrammar.y"
+
     { declareForwardType ((yyvsp[(1) - (1)].declare)); ;}
     break;
 
   case 180:
-#line 857 "llgrammar.y"
+
     { (yyval.declaratorinv) = makeDeclaratorInvNode ((yyvsp[(1) - (3)].declare), (yyvsp[(3) - (3)].abstbody)); ;}
     break;
 
   case 181:
-#line 861 "llgrammar.y"
+
     { (yyval.abstbody) = (abstBodyNode)0; ;}
     break;
 
   case 182:
-#line 862 "llgrammar.y"
+
     { (yyval.abstbody) = makeExposedBodyNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].lclpredicate)); ;}
     break;
 
   case 183:
-#line 866 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_VOID, 0)); ;}
     break;
 
   case 184:
-#line 867 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_CHAR, 0)); ;}
     break;
 
   case 185:
-#line 868 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_DOUBLE, 0)); ;}
     break;
 
   case 186:
-#line 869 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_FLOAT, 0)); ;}
     break;
 
   case 187:
-#line 870 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_INT, 0)); ;}
     break;
 
   case 188:
-#line 871 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_LONG, 0)); ;}
     break;
 
   case 189:
-#line 872 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_SHORT, 0)); ;}
     break;
 
   case 190:
-#line 873 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_SIGNED, 0)); ;}
     break;
 
   case 191:
-#line 874 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_UNSIGNED, 0)); ;}
     break;
 
   case 192:
-#line 875 "llgrammar.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ltoken_setIntField ((yyval.ltok), fixBits (TS_UNKNOWN, 0)); ;}
     break;
 
   case 193:
-#line 884 "llgrammar.y"
+
     { (yyval.ctypes) = makeCTypesNode ((CTypesNode)0, (yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 194:
-#line 885 "llgrammar.y"
+
     { (yyval.ctypes) = makeCTypesNode ((yyvsp[(1) - (2)].ctypes), (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 195:
-#line 892 "llgrammar.y"
+
     { (yyval.ctypes) = makeTypeSpecifier ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 196:
-#line 894 "llgrammar.y"
+
     { (yyval.ctypes) = (yyvsp[(1) - (1)].ctypes); (yyval.ctypes)->sort = sort_lookupName (lclctype_toSort ((yyvsp[(1) - (1)].ctypes)->intfield)); ;}
     break;
 
   case 197:
-#line 900 "llgrammar.y"
+
     { (yyval.typequal) = qual_createOut (); ;}
     break;
 
   case 198:
-#line 901 "llgrammar.y"
+
     { (yyval.typequal) = qual_createUnused (); ;}
     break;
 
   case 199:
-#line 902 "llgrammar.y"
+
     { (yyval.typequal) = qual_createSef (); ;}
     break;
 
   case 200:
-#line 903 "llgrammar.y"
+
     { (yyval.typequal) = qual_createOnly (); ;}
     break;
 
   case 201:
-#line 904 "llgrammar.y"
+
     { (yyval.typequal) = qual_createOwned (); ;}
     break;
 
   case 202:
-#line 905 "llgrammar.y"
+
     { (yyval.typequal) = qual_createDependent (); ;}
     break;
 
   case 203:
-#line 906 "llgrammar.y"
+
     { (yyval.typequal) = qual_createKeep (); ;}
     break;
 
   case 204:
-#line 907 "llgrammar.y"
+
     { (yyval.typequal) = qual_createKept (); ;}
     break;
 
   case 205:
-#line 908 "llgrammar.y"
+
     { (yyval.typequal) = qual_createObserver (); ;}
     break;
 
   case 206:
-#line 909 "llgrammar.y"
+
     { (yyval.typequal) = qual_createExits (); ;}
     break;
 
   case 207:
-#line 910 "llgrammar.y"
+
     { (yyval.typequal) = qual_createMayExit (); ;}
     break;
 
   case 208:
-#line 911 "llgrammar.y"
+
     { (yyval.typequal) = qual_createTrueExit (); ;}
     break;
 
   case 209:
-#line 912 "llgrammar.y"
+
     { (yyval.typequal) = qual_createFalseExit (); ;}
     break;
 
   case 210:
-#line 913 "llgrammar.y"
+
     { (yyval.typequal) = qual_createNeverExit (); ;}
     break;
 
   case 211:
-#line 914 "llgrammar.y"
+
     { (yyval.typequal) = qual_createOnly (); ;}
     break;
 
   case 212:
-#line 915 "llgrammar.y"
+
     { (yyval.typequal) = qual_createShared (); ;}
     break;
 
   case 213:
-#line 916 "llgrammar.y"
+
     { (yyval.typequal) = qual_createUnique (); ;}
     break;
 
   case 214:
-#line 917 "llgrammar.y"
+
     { (yyval.typequal) = qual_createChecked (); ;}
     break;
 
   case 215:
-#line 918 "llgrammar.y"
+
     { (yyval.typequal) = qual_createUnchecked (); ;}
     break;
 
   case 216:
-#line 919 "llgrammar.y"
+
     { (yyval.typequal) = qual_createCheckedStrict (); ;}
     break;
 
   case 217:
-#line 920 "llgrammar.y"
+
     { (yyval.typequal) = qual_createTrueNull (); ;}
     break;
 
   case 218:
-#line 921 "llgrammar.y"
+
     { (yyval.typequal) = qual_createFalseNull (); ;}
     break;
 
   case 219:
-#line 922 "llgrammar.y"
+
     { (yyval.typequal) = qual_createRelNull (); ;}
     break;
 
   case 220:
-#line 923 "llgrammar.y"
+
     { (yyval.typequal) = qual_createRelDef (); ;}
     break;
 
   case 221:
-#line 924 "llgrammar.y"
+
     { (yyval.typequal) = qual_createRefCounted (); ;}
     break;
 
   case 222:
-#line 925 "llgrammar.y"
+
     { (yyval.typequal) = qual_createRefs (); ;}
     break;
 
   case 223:
-#line 926 "llgrammar.y"
+
     { (yyval.typequal) = qual_createNewRef (); ;}
     break;
 
   case 224:
-#line 927 "llgrammar.y"
+
     { (yyval.typequal) = qual_createKillRef (); ;}
     break;
 
   case 225:
-#line 928 "llgrammar.y"
+
     { (yyval.typequal) = qual_createNull (); ;}
     break;
 
   case 226:
-#line 929 "llgrammar.y"
+
     { (yyval.typequal) = qual_createNotNull (); ;}
     break;
 
   case 227:
-#line 930 "llgrammar.y"
+
     { (yyval.typequal) = qual_createReturned (); ;}
     break;
 
   case 228:
-#line 931 "llgrammar.y"
+
     { (yyval.typequal) = qual_createExposed (); ;}
     break;
 
   case 229:
-#line 932 "llgrammar.y"
+
     { (yyval.typequal) = qual_createPartial (); ;}
     break;
 
   case 230:
-#line 933 "llgrammar.y"
+
     { (yyval.typequal) = qual_createNullTerminated () ; ;}
     break;
 
   case 231:
-#line 934 "llgrammar.y"
+
     { (yyval.typequal) = qual_createUndef (); ;}
     break;
 
   case 232:
-#line 935 "llgrammar.y"
+
     { (yyval.typequal) = qual_createKilled (); ;}
     break;
 
   case 233:
-#line 940 "llgrammar.y"
+
     { (yyval.lcltypespec) = makeLclTypeSpecNodeType ((yyvsp[(1) - (1)].ctypes)); ;}
     break;
 
   case 234:
-#line 942 "llgrammar.y"
+
     { (yyval.lcltypespec) = makeLclTypeSpecNodeSU ((yyvsp[(1) - (1)].structorunion)); ;}
     break;
 
   case 235:
-#line 944 "llgrammar.y"
+
     { (yyval.lcltypespec) = makeLclTypeSpecNodeEnum ((yyvsp[(1) - (1)].enumspec)); ;}
     break;
 
   case 236:
-#line 946 "llgrammar.y"
+
     { (yyval.lcltypespec) = lclTypeSpecNode_addQual ((yyvsp[(2) - (2)].lcltypespec), (yyvsp[(1) - (2)].typequal)); ;}
     break;
 
   case 237:
-#line 948 "llgrammar.y"
+
     { (yyval.lcltypespec) = makeLclTypeSpecNodeConj ((yyvsp[(2) - (5)].lcltypespec), (yyvsp[(4) - (5)].lcltypespec)); ;}
     break;
 
   case 239:
-#line 959 "llgrammar.y"
+
     { llassert (lclTypeSpecNode_isDefined ((yyvsp[(1) - (2)].lcltypespec)));
      (yyvsp[(1) - (2)].lcltypespec)->pointers = (yyvsp[(2) - (2)].pointers); (yyval.lcltypespec) = (yyvsp[(1) - (2)].lcltypespec); ;}
     break;
 
   case 240:
-#line 964 "llgrammar.y"
+
     { (yyval.pointers) = pointers_createLt ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 241:
-#line 965 "llgrammar.y"
+
     { (yyval.pointers) = pointers_extend ((yyvsp[(1) - (2)].pointers), pointers_createLt ((yyvsp[(2) - (2)].ltok))); ;}
     break;
 
   case 242:
-#line 970 "llgrammar.y"
+
     { (void) checkAndEnterTag (TAG_FWDSTRUCT, ltoken_copy ((yyvsp[(2) - (2)].ltok))); ;}
     break;
 
   case 243:
-#line 972 "llgrammar.y"
+
     { (yyval.structorunion) = makestrOrUnionNode ((yyvsp[(1) - (6)].ltok), SU_STRUCT, (yyvsp[(2) - (6)].ltok), (yyvsp[(5) - (6)].structdecls)); ;}
     break;
 
   case 244:
-#line 974 "llgrammar.y"
+
     { (void) checkAndEnterTag (TAG_FWDUNION, ltoken_copy ((yyvsp[(2) - (2)].ltok))); ;}
     break;
 
   case 245:
-#line 976 "llgrammar.y"
+
     { (yyval.structorunion) = makestrOrUnionNode ((yyvsp[(1) - (6)].ltok), SU_UNION, (yyvsp[(2) - (6)].ltok), (yyvsp[(5) - (6)].structdecls)); ;}
     break;
 
   case 246:
-#line 978 "llgrammar.y"
+
     { (yyval.structorunion) = makeForwardstrOrUnionNode ((yyvsp[(1) - (2)].ltok), SU_STRUCT, (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 247:
-#line 980 "llgrammar.y"
+
     { (yyval.structorunion) = makeForwardstrOrUnionNode ((yyvsp[(1) - (2)].ltok), SU_UNION, (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 248:
-#line 984 "llgrammar.y"
+
     { (yyval.ltok) = ltoken_undefined; ;}
     break;
 
   case 250:
-#line 989 "llgrammar.y"
+
     { (yyval.structdecls) = stDeclNodeList_add (stDeclNodeList_new (),  (yyvsp[(1) - (1)].structdecl)); ;}
     break;
 
   case 251:
-#line 990 "llgrammar.y"
+
     { (yyval.structdecls) = stDeclNodeList_add ((yyvsp[(1) - (2)].structdecls), (yyvsp[(2) - (2)].structdecl)); ;}
     break;
 
   case 252:
-#line 996 "llgrammar.y"
+
     { (yyval.structdecl) = makestDeclNode ((yyvsp[(1) - (3)].lcltypespec), (yyvsp[(2) - (3)].declarelist)); ;}
     break;
 
   case 253:
-#line 1001 "llgrammar.y"
+
     { (yyval.declarelist) = declaratorNodeList_add (declaratorNodeList_new (),  (yyvsp[(1) - (1)].declare)); ;}
     break;
 
   case 254:
-#line 1003 "llgrammar.y"
+
     { (yyval.declarelist) = declaratorNodeList_add ((yyvsp[(1) - (3)].declarelist), (yyvsp[(3) - (3)].declare)); ;}
     break;
 
   case 255:
-#line 1007 "llgrammar.y"
+
     { ; ;}
     break;
 
   case 256:
-#line 1008 "llgrammar.y"
+
     { ; ;}
     break;
 
   case 257:
-#line 1013 "llgrammar.y"
+
     { (yyval.enumspec) = makeEnumSpecNode ((yyvsp[(1) - (6)].ltok), (yyvsp[(2) - (6)].ltok), (yyvsp[(4) - (6)].ltokenList)); ;}
     break;
 
   case 258:
-#line 1015 "llgrammar.y"
+
     { (yyval.enumspec) = makeEnumSpecNode2 ((yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 259:
-#line 1019 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_singleton ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 260:
-#line 1020 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_push ((yyvsp[(1) - (3)].ltokenList), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 261:
-#line 1031 "llgrammar.y"
+
     { (yyval.declare) = makeDeclaratorNode ((yyvsp[(1) - (1)].typeexpr)); ;}
     break;
 
   case 262:
-#line 1032 "llgrammar.y"
+
     { (yyval.declare) = makeDeclaratorNode ((yyvsp[(1) - (1)].typeexpr)); ;}
     break;
 
   case 263:
-#line 1036 "llgrammar.y"
+
     { (yyval.typeexpr) = makeTypeExpr ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 264:
-#line 1037 "llgrammar.y"
+
     { (yyval.typeexpr) = (yyvsp[(2) - (3)].typeexpr); (yyval.typeexpr)->wrapped = (yyval.typeexpr)->wrapped + 1; ;}
     break;
 
   case 265:
-#line 1038 "llgrammar.y"
+
     { (yyval.typeexpr) = makePointerNode ((yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].typeexpr)); ;}
     break;
 
   case 266:
-#line 1039 "llgrammar.y"
+
     { (yyval.typeexpr) = makeArrayNode ((yyvsp[(1) - (2)].typeexpr), (yyvsp[(2) - (2)].array)); ;}
     break;
 
   case 267:
-#line 1040 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (3)].typeexpr), paramNodeList_new ()); ;}
     break;
 
   case 268:
-#line 1041 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (4)].typeexpr), (yyvsp[(3) - (4)].paramlist)); ;}
     break;
 
   case 269:
-#line 1045 "llgrammar.y"
+
     { (yyval.typeexpr) = makeTypeExpr ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 270:
-#line 1046 "llgrammar.y"
+
     { (yyval.typeexpr) = (yyvsp[(2) - (3)].typeexpr); (yyval.typeexpr)->wrapped = (yyval.typeexpr)->wrapped + 1; ;}
     break;
 
   case 271:
-#line 1047 "llgrammar.y"
+
     { (yyval.typeexpr) = makePointerNode ((yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].typeexpr)); ;}
     break;
 
   case 272:
-#line 1048 "llgrammar.y"
+
     { (yyval.typeexpr) = makeArrayNode ((yyvsp[(1) - (2)].typeexpr), (yyvsp[(2) - (2)].array)); ;}
     break;
 
   case 273:
-#line 1049 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (3)].typeexpr), paramNodeList_new ()); ;}
     break;
 
   case 274:
-#line 1050 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (4)].typeexpr), (yyvsp[(3) - (4)].paramlist)); ;}
     break;
 
   case 275:
-#line 1060 "llgrammar.y"
+
     { (yyval.typeexpr) = makeTypeExpr ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 276:
-#line 1061 "llgrammar.y"
+
     { (yyval.typeexpr) = makePointerNode ((yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].typeexpr)); ;}
     break;
 
   case 277:
-#line 1062 "llgrammar.y"
+
     { (yyval.typeexpr) = makeArrayNode ((yyvsp[(1) - (2)].typeexpr), (yyvsp[(2) - (2)].array)); ;}
     break;
 
   case 278:
-#line 1063 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (3)].typeexpr), paramNodeList_new ()); ;}
     break;
 
   case 279:
-#line 1064 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (4)].typeexpr), (yyvsp[(3) - (4)].paramlist)); ;}
     break;
 
   case 280:
-#line 1071 "llgrammar.y"
+
     { (yyval.param) = makeParamNode ((yyvsp[(1) - (2)].lcltypespec), (yyvsp[(2) - (2)].typeexpr)); ;}
     break;
 
   case 281:
-#line 1072 "llgrammar.y"
+
     { (yyval.param) = makeParamNode ((yyvsp[(1) - (2)].lcltypespec), (yyvsp[(2) - (2)].typeexpr)); ;}
     break;
 
   case 282:
-#line 1073 "llgrammar.y"
+
     { (yyval.param) = makeParamNode ((yyvsp[(1) - (2)].lcltypespec), (yyvsp[(2) - (2)].abstDecl)); ;}
     break;
 
   case 283:
-#line 1084 "llgrammar.y"
+
     { (yyval.typname) = makeTypeNameNode (FALSE, (yyvsp[(1) - (2)].lcltypespec), (yyvsp[(2) - (2)].abstDecl)); ;}
     break;
 
   case 284:
-#line 1085 "llgrammar.y"
+
     { (yyval.typname) = makeTypeNameNode (TRUE, (yyvsp[(2) - (3)].lcltypespec), (yyvsp[(3) - (3)].abstDecl)); ;}
     break;
 
   case 285:
-#line 1086 "llgrammar.y"
+
     { (yyval.typname) = makeTypeNameNodeOp ((yyvsp[(1) - (1)].opform)); ;}
     break;
 
   case 286:
-#line 1092 "llgrammar.y"
+
     { (yyval.abstDecl) = (abstDeclaratorNode)0; ;}
     break;
 
   case 287:
-#line 1093 "llgrammar.y"
+
     { (yyval.abstDecl) = (abstDeclaratorNode)(yyvsp[(1) - (1)].typeexpr); ;}
     break;
 
   case 288:
-#line 1097 "llgrammar.y"
+
     { (yyval.typeexpr) = (yyvsp[(2) - (3)].typeexpr); (yyval.typeexpr)->wrapped = (yyval.typeexpr)->wrapped + 1; ;}
     break;
 
   case 289:
-#line 1098 "llgrammar.y"
+
     { (yyval.typeexpr) = makePointerNode ((yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].typeexpr)); ;}
     break;
 
   case 290:
-#line 1099 "llgrammar.y"
+
     { (yyval.typeexpr) = makePointerNode ((yyvsp[(1) - (1)].ltok), (typeExpr)0); ;}
     break;
 
   case 291:
-#line 1100 "llgrammar.y"
+
     { (yyval.typeexpr) = makeArrayNode ((typeExpr)0, (yyvsp[(1) - (1)].array)); ;}
     break;
 
   case 292:
-#line 1101 "llgrammar.y"
+
     { (yyval.typeexpr) = makeArrayNode ((yyvsp[(1) - (2)].typeexpr), (yyvsp[(2) - (2)].array)); ;}
     break;
 
   case 293:
-#line 1102 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (3)].typeexpr), paramNodeList_new ()); ;}
     break;
 
   case 294:
-#line 1103 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((typeExpr)0, (yyvsp[(2) - (3)].paramlist)); ;}
     break;
 
   case 295:
-#line 1104 "llgrammar.y"
+
     { (yyval.typeexpr) = makeFunctionNode ((yyvsp[(1) - (4)].typeexpr), (yyvsp[(3) - (4)].paramlist)); ;}
     break;
 
   case 296:
-#line 1108 "llgrammar.y"
+
     { (yyval.array) = makeArrayQualNode ((yyvsp[(1) - (2)].ltok), (termNode)0); ;}
     break;
 
   case 297:
-#line 1109 "llgrammar.y"
+
     { (yyval.array) = makeArrayQualNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].term)); ;}
     break;
 
   case 298:
-#line 1114 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (6)].ltok), OPF_IF, opFormUnion_createMiddle (0), ltoken_undefined); ;}
     break;
 
   case 299:
-#line 1116 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (1)].ltok), OPF_ANYOP, opFormUnion_createAnyOp ((yyvsp[(1) - (1)].ltok)), ltoken_undefined); ;}
     break;
 
   case 300:
-#line 1118 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (2)].ltok), OPF_MANYOP, opFormUnion_createAnyOp ((yyvsp[(2) - (2)].ltok)), ltoken_undefined); ;}
     break;
 
   case 301:
-#line 1120 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (2)].ltok), OPF_ANYOPM, opFormUnion_createAnyOp ((yyvsp[(1) - (2)].ltok)), ltoken_undefined); ;}
     break;
 
   case 302:
-#line 1122 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MANYOPM, 
 			  opFormUnion_createAnyOp ((yyvsp[(2) - (3)].ltok)), ltoken_undefined); ;}
     break;
 
   case 303:
-#line 1125 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MIDDLE, opFormUnion_createMiddle ((yyvsp[(2) - (3)].count)), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 304:
-#line 1127 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (4)].ltok), OPF_MMIDDLE, opFormUnion_createMiddle ((yyvsp[(3) - (4)].count)), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 305:
-#line 1129 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (4)].ltok), OPF_MIDDLEM, opFormUnion_createMiddle ((yyvsp[(2) - (4)].count)), (yyvsp[(3) - (4)].ltok)); ;}
     break;
 
   case 306:
-#line 1131 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(2) - (5)].ltok), OPF_MMIDDLEM, opFormUnion_createMiddle ((yyvsp[(3) - (5)].count)), (yyvsp[(4) - (5)].ltok)); ;}
     break;
 
   case 307:
-#line 1133 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_BMIDDLE, opFormUnion_createMiddle ((yyvsp[(2) - (3)].count)), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 308:
-#line 1135 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (4)].ltok), OPF_BMIDDLEM, opFormUnion_createMiddle ((yyvsp[(2) - (4)].count)), (yyvsp[(3) - (4)].ltok)); ;}
     break;
 
   case 309:
-#line 1143 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(2) - (4)].ltok), OPF_BMMIDDLE, opFormUnion_createMiddle ((yyvsp[(3) - (4)].count)), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 310:
-#line 1145 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(2) - (5)].ltok), OPF_BMMIDDLEM, opFormUnion_createMiddle ((yyvsp[(3) - (5)].count)), (yyvsp[(4) - (5)].ltok)); ;}
     break;
 
   case 311:
-#line 1147 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (2)].ltok), OPF_SELECT, 
 			  opFormUnion_createAnyOp ((yyvsp[(2) - (2)].ltok)), ltoken_undefined); ;}
     break;
 
   case 312:
-#line 1150 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (2)].ltok), OPF_MAP, 
 			  opFormUnion_createAnyOp ((yyvsp[(2) - (2)].ltok)), ltoken_undefined); ;}
     break;
 
   case 313:
-#line 1153 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MSELECT, 
 			  opFormUnion_createAnyOp ((yyvsp[(3) - (3)].ltok)), ltoken_undefined); ;}
     break;
 
   case 314:
-#line 1156 "llgrammar.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MMAP, 
 			  opFormUnion_createAnyOp ((yyvsp[(3) - (3)].ltok)), ltoken_undefined); ;}
     break;
 
   case 322:
-#line 1177 "llgrammar.y"
+
     { (yyval.count) = 0; ;}
     break;
 
   case 324:
-#line 1182 "llgrammar.y"
+
     { (yyval.count) = 1; ;}
     break;
 
   case 325:
-#line 1183 "llgrammar.y"
+
     { (yyval.count) = (yyvsp[(1) - (3)].count) + 1; ;}
     break;
 
   case 328:
-#line 1192 "llgrammar.y"
+
     { (yyval.signature) = makesigNode ((yyvsp[(1) - (4)].ltok), (yyvsp[(2) - (4)].ltokenList), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 329:
-#line 1196 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_new (); ;}
     break;
 
   case 331:
-#line 1201 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_singleton ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 332:
-#line 1202 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_push ((yyvsp[(1) - (3)].ltokenList), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 333:
-#line 1206 "llgrammar.y"
+
     { (yyval.lclpredicate) = makeLclPredicateNode (ltoken_undefined, (yyvsp[(1) - (1)].term), LPD_PLAIN);;}
     break;
 
   case 334:
-#line 1210 "llgrammar.y"
+
     { (yyval.term) = checkSort ((yyvsp[(1) - (1)].term)); ;}
     break;
 
   case 335:
-#line 1218 "llgrammar.y"
+
     { (yyval.term) = makeIfTermNode ((yyvsp[(1) - (6)].ltok),(yyvsp[(2) - (6)].term),(yyvsp[(3) - (6)].ltok),(yyvsp[(4) - (6)].term),(yyvsp[(5) - (6)].ltok),(yyvsp[(6) - (6)].term)); ;}
     break;
 
   case 337:
-#line 1220 "llgrammar.y"
+
     { (yyval.term) = makeInfixTermNode ((yyvsp[(1) - (3)].term), (yyvsp[(2) - (3)].ltok), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 339:
-#line 1227 "llgrammar.y"
+
     { checkLclPredicate ((yyvsp[(2) - (4)].ltok), (yyvsp[(3) - (4)].lclpredicate)); (yyval.term) = makeQuantifiedTermNode ((yyvsp[(1) - (4)].quantifiers), (yyvsp[(2) - (4)].ltok), (yyvsp[(3) - (4)].lclpredicate)->predicate, (yyvsp[(4) - (4)].ltok));
      symtable_exitScope (g_symtab); 
    ;}
     break;
 
   case 340:
-#line 1231 "llgrammar.y"
+
     { (yyval.term) = makeInfixTermNode ((yyvsp[(1) - (3)].term), (yyvsp[(2) - (3)].ltok), (yyvsp[(3) - (3)].term));;}
     break;
 
   case 341:
-#line 1233 "llgrammar.y"
+
     { (yyval.term) = makeInfixTermNode ((yyvsp[(1) - (3)].term), (yyvsp[(2) - (3)].ltok), (yyvsp[(3) - (3)].term));;}
     break;
 
   case 343:
-#line 1238 "llgrammar.y"
+
     { (yyval.term) = makePostfixTermNode ((yyvsp[(1) - (2)].term), (yyvsp[(2) - (2)].ltokenList)); ;}
     break;
 
   case 344:
-#line 1239 "llgrammar.y"
+
     { (yyval.term) = CollapseInfixTermNode ((yyvsp[(1) - (2)].term), (yyvsp[(2) - (2)].termlist)); ;}
     break;
 
   case 348:
-#line 1249 "llgrammar.y"
+
     { (yyval.term) = makePrefixTermNode ((yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].term)); ;}
     break;
 
   case 349:
-#line 1253 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_singleton ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 350:
-#line 1254 "llgrammar.y"
+
     { (yyval.ltokenList) = ltokenList_push ((yyvsp[(1) - (2)].ltokenList), (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 351:
-#line 1258 "llgrammar.y"
+
     { (yyval.termlist) = pushInfixOpPartNode (termNodeList_new (),  (yyvsp[(1) - (2)].ltok), (yyvsp[(2) - (2)].term)); ;}
     break;
 
   case 352:
-#line 1259 "llgrammar.y"
+
     { (yyval.termlist) = pushInfixOpPartNode ((yyvsp[(1) - (3)].termlist), (yyvsp[(2) - (3)].ltok), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 354:
-#line 1264 "llgrammar.y"
+
     { (yyval.term) = computePossibleSorts ((yyvsp[(1) - (1)].term)); ;}
     break;
 
   case 355:
-#line 1265 "llgrammar.y"
+
     { (yyval.term) = updateMatchedNode ((termNode)0, (yyvsp[(1) - (2)].term), (yyvsp[(2) - (2)].term)); ;}
     break;
 
   case 356:
-#line 1266 "llgrammar.y"
+
     { (yyval.term) = updateMatchedNode ((yyvsp[(1) - (2)].term), (yyvsp[(2) - (2)].term), (termNode)0); ;}
     break;
 
   case 357:
-#line 1267 "llgrammar.y"
+
     { (yyval.term) = updateMatchedNode ((yyvsp[(1) - (3)].term), (yyvsp[(2) - (3)].term), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 358:
-#line 1268 "llgrammar.y"
+
     { (yyval.term) = computePossibleSorts ((yyvsp[(1) - (1)].term)); ;}
     break;
 
   case 359:
-#line 1269 "llgrammar.y"
+
     { (yyval.term) = updateSqBracketedNode ((termNode)0, (yyvsp[(1) - (2)].term), (yyvsp[(2) - (2)].term)); ;}
     break;
 
   case 360:
-#line 1273 "llgrammar.y"
+
     { (yyval.term) = (yyvsp[(1) - (3)].term); (yyval.term)->sort = sort_lookupName (ltoken_getText ((yyvsp[(3) - (3)].ltok))); ;}
     break;
 
   case 362:
-#line 1279 "llgrammar.y"
+
     { (yyval.term) = makeSqBracketedNode ((yyvsp[(1) - (5)].ltok), (yyvsp[(2) - (5)].termlist), (yyvsp[(3) - (5)].ltok)); 
      (yyval.term)->given = sort_lookupName (ltoken_getText ((yyvsp[(5) - (5)].ltok))); ;}
     break;
 
   case 363:
-#line 1282 "llgrammar.y"
+
     { (yyval.term) = makeSqBracketedNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].termlist), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 364:
-#line 1284 "llgrammar.y"
+
     { (yyval.term) = makeSqBracketedNode ((yyvsp[(1) - (4)].ltok), termNodeList_new (),  (yyvsp[(2) - (4)].ltok)); 
      (yyval.term)->given = sort_lookupName (ltoken_getText ((yyvsp[(4) - (4)].ltok))); 
    ;}
     break;
 
   case 365:
-#line 1288 "llgrammar.y"
+
     { (yyval.term) = makeSqBracketedNode ((yyvsp[(1) - (2)].ltok), termNodeList_new (),  (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 366:
-#line 1292 "llgrammar.y"
+
     { (yyval.term) = makeMatchedNode ((yyvsp[(1) - (3)].ltok), (yyvsp[(2) - (3)].termlist), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 367:
-#line 1293 "llgrammar.y"
+
     { (yyval.term) = makeMatchedNode ((yyvsp[(1) - (2)].ltok), termNodeList_new (),  (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 368:
-#line 1297 "llgrammar.y"
+
     { (yyval.termlist) = termNodeList_push (termNodeList_new (),  (yyvsp[(1) - (1)].term)); ;}
     break;
 
   case 369:
-#line 1298 "llgrammar.y"
+
     { (yyval.termlist) = termNodeList_push ((yyvsp[(1) - (3)].termlist), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 370:
-#line 1303 "llgrammar.y"
+
     { (yyval.term) = (yyvsp[(2) - (3)].term); (yyval.term)->wrapped = (yyval.term)->wrapped + 1; ;}
     break;
 
   case 371:
-#line 1305 "llgrammar.y"
+
     { (yyval.term) = makeSimpleTermNode ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 372:
-#line 1307 "llgrammar.y"
+
     { (yyval.term) = makeOpCallTermNode ((yyvsp[(1) - (4)].ltok), (yyvsp[(2) - (4)].ltok), (yyvsp[(3) - (4)].termlist), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 374:
-#line 1310 "llgrammar.y"
+
     { (yyval.term) = makePostfixTermNode2 ((yyvsp[(1) - (2)].term), (yyvsp[(2) - (2)].ltok)); ;}
     break;
 
   case 375:
-#line 1312 "llgrammar.y"
+
     { ltoken_markOwned ((yyvsp[(3) - (3)].ltok)); (yyval.term) = makeSelectTermNode ((yyvsp[(1) - (3)].term), (yyvsp[(2) - (3)].ltok), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 376:
-#line 1314 "llgrammar.y"
+
     { ltoken_markOwned ((yyvsp[(3) - (3)].ltok)); (yyval.term) = makeMapTermNode ((yyvsp[(1) - (3)].term), (yyvsp[(2) - (3)].ltok), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 377:
-#line 1316 "llgrammar.y"
+
     { (yyval.term) = updateSqBracketedNode ((yyvsp[(1) - (3)].term), makeSqBracketedNode ((yyvsp[(2) - (3)].ltok), termNodeList_new (),  (yyvsp[(3) - (3)].ltok)), 
 				(termNode)0); ;}
     break;
 
   case 378:
-#line 1319 "llgrammar.y"
+
     { (yyval.term) = updateSqBracketedNode ((yyvsp[(1) - (4)].term), makeSqBracketedNode ((yyvsp[(2) - (4)].ltok), (yyvsp[(3) - (4)].termlist), (yyvsp[(4) - (4)].ltok)), (termNode)0); ;}
     break;
 
   case 379:
-#line 1321 "llgrammar.y"
+
     { (yyval.term) = (yyvsp[(1) - (3)].term); (yyval.term)->given = sort_lookupName (ltoken_getText ((yyvsp[(3) - (3)].ltok))); ;}
     break;
 
   case 380:
-#line 1325 "llgrammar.y"
+
     { (yyval.termlist) = termNodeList_push (termNodeList_new (),  (yyvsp[(1) - (1)].term)); ;}
     break;
 
   case 381:
-#line 1326 "llgrammar.y"
+
     { (yyval.termlist) = termNodeList_push ((yyvsp[(1) - (3)].termlist), (yyvsp[(3) - (3)].term)); ;}
     break;
 
   case 387:
-#line 1338 "llgrammar.y"
+
     { (yyval.term) = makeSimpleTermNode ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 388:
-#line 1339 "llgrammar.y"
+
     { (yyval.term) = makeOpCallTermNode ((yyvsp[(1) - (4)].ltok), (yyvsp[(2) - (4)].ltok), (yyvsp[(3) - (4)].termlist), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 389:
-#line 1340 "llgrammar.y"
+
     { (yyval.term) = makeUnchangedTermNode1 ((yyvsp[(1) - (4)].ltok), (yyvsp[(3) - (4)].ltok)); ;}
     break;
 
   case 390:
-#line 1341 "llgrammar.y"
+
     { (yyval.term) = makeUnchangedTermNode2 ((yyvsp[(1) - (4)].ltok), (yyvsp[(3) - (4)].storereflist)); ;}
     break;
 
   case 391:
-#line 1343 "llgrammar.y"
+
     { termNodeList x = termNodeList_new (); 
      termNodeList_addh (x, (yyvsp[(3) - (4)].term));
      (yyval.term) = makeOpCallTermNode ((yyvsp[(1) - (4)].ltok), (yyvsp[(2) - (4)].ltok), x, (yyvsp[(4) - (4)].ltok)); 
@@ -4796,7 +4796,7 @@ yyreduce:
     break;
 
   case 392:
-#line 1348 "llgrammar.y"
+
     { termNodeList x = termNodeList_new ();
      termNodeList_addh (x, (yyvsp[(3) - (6)].term));
      termNodeList_addh (x, (yyvsp[(5) - (6)].term));
@@ -4805,75 +4805,75 @@ yyreduce:
     break;
 
   case 393:
-#line 1353 "llgrammar.y"
+
     { (yyval.term) = makeSizeofTermNode ((yyvsp[(1) - (4)].ltok), (yyvsp[(3) - (4)].lcltypespec)); ;}
     break;
 
   case 394:
-#line 1364 "llgrammar.y"
+
     { (yyval.term) = makeLiteralTermNode ((yyvsp[(1) - (1)].ltok), g_sortInt); ;}
     break;
 
   case 395:
-#line 1365 "llgrammar.y"
+
     { (yyval.term) = makeLiteralTermNode ((yyvsp[(1) - (1)].ltok), g_sortCstring); ;}
     break;
 
   case 396:
-#line 1366 "llgrammar.y"
+
     { (yyval.term) = makeLiteralTermNode ((yyvsp[(1) - (1)].ltok), g_sortChar); ;}
     break;
 
   case 397:
-#line 1367 "llgrammar.y"
+
     { (yyval.term) = makeLiteralTermNode ((yyvsp[(1) - (1)].ltok), g_sortDouble); ;}
     break;
 
   case 398:
-#line 1372 "llgrammar.y"
+
     { (yyval.quantifiers) = quantifierNodeList_add (quantifierNodeList_new (),  (yyvsp[(1) - (1)].quantifier)); ;}
     break;
 
   case 399:
-#line 1374 "llgrammar.y"
+
     { (yyval.quantifiers) = quantifierNodeList_add ((yyvsp[(1) - (2)].quantifiers), (yyvsp[(2) - (2)].quantifier)); ;}
     break;
 
   case 400:
-#line 1378 "llgrammar.y"
+
     { scopeInfo si = (scopeInfo) dmalloc (sizeof (*si));
 		   si->kind = SPE_QUANT;
 		   symtable_enterScope (g_symtab, si); ;}
     break;
 
   case 401:
-#line 1382 "llgrammar.y"
+
     { (yyval.quantifier) = makeQuantifierNode ((yyvsp[(3) - (3)].vars), (yyvsp[(1) - (3)].ltok)); ;}
     break;
 
   case 402:
-#line 1386 "llgrammar.y"
+
     { (yyval.vars) = varNodeList_add (varNodeList_new (),  (yyvsp[(1) - (1)].var)); ;}
     break;
 
   case 403:
-#line 1387 "llgrammar.y"
+
     { (yyval.vars) = varNodeList_add ((yyvsp[(1) - (3)].vars), (yyvsp[(3) - (3)].var)); ;}
     break;
 
   case 404:
-#line 1391 "llgrammar.y"
+
     { (yyval.var) = makeVarNode ((yyvsp[(1) - (3)].ltok), FALSE, (yyvsp[(3) - (3)].lcltypespec)); ;}
     break;
 
   case 405:
-#line 1392 "llgrammar.y"
+
     { (yyval.var) = makeVarNode ((yyvsp[(1) - (4)].ltok), TRUE, (yyvsp[(4) - (4)].lcltypespec)); ;}
     break;
 
 
 /* Line 1267 of yacc.c.  */
-#line 4819 "llgrammar.tab.c"
+
       default: break;
     }
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
@@ -5087,7 +5087,7 @@ yyreturn:
 }
 
 
-#line 1409 "llgrammar.y"
+
 
 
 # include "bison.reset"
diff --git a/src/signature.c.der b/src/signature.c.der
index 112260a..58ffcaf 100644
--- a/src/signature.c.der
+++ b/src/signature.c.der
@@ -230,7 +230,7 @@
 
 
 /* Copy the first part of user declarations.  */
-#line 32 "signature.y"
+
 
 
 # include <stdio.h>
@@ -278,7 +278,7 @@ static void yyprint (/*FILE *p_file, int p_type, YYSTYPE p_value */);
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 71 "signature.y"
+
 {
   ltoken ltok;  /* a leaf is also an ltoken */
   unsigned int count;
@@ -291,7 +291,7 @@ typedef union YYSTYPE
   /*@-redef@*/ /*@-matchfields@*/ 
 }
 /* Line 187 of yacc.c.  */
-#line 237 "signature.tab.c"
+
 	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
@@ -304,7 +304,7 @@ typedef union YYSTYPE
 
 
 /* Line 216 of yacc.c.  */
-#line 250 "signature.tab.c"
+
 
 #ifdef short
 # undef short
@@ -1559,12 +1559,12 @@ yyreduce:
   switch (yyn)
     {
         case 2:
-#line 139 "signature.y"
+
     { lslOpList_free ((yyvsp[(1) - (1)].operators)); ;}
     break;
 
   case 3:
-#line 143 "signature.y"
+
     { lslOpList x = lslOpList_new ();
 		g_importedlslOp = (yyvsp[(1) - (1)].operator);
 		lslOpList_add (x, (yyvsp[(1) - (1)].operator));
@@ -1572,186 +1572,186 @@ yyreduce:
     break;
 
   case 4:
-#line 148 "signature.y"
+
     { lslOpList_add ((yyvsp[(1) - (2)].operators), (yyvsp[(2) - (2)].operator));
 		(yyval.operators) = (yyvsp[(1) - (2)].operators); ;}
     break;
 
   case 5:
-#line 153 "signature.y"
+
     { (yyval.operator) = makelslOpNode ((yyvsp[(1) - (3)].name), (yyvsp[(3) - (3)].signature)); ;}
     break;
 
   case 6:
-#line 160 "signature.y"
+
     { (yyval.name) = makeNameNodeId ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 7:
-#line 162 "signature.y"
+
     { (yyval.name) = makeNameNodeForm ((yyvsp[(1) - (1)].opform)); ;}
     break;
 
   case 8:
-#line 167 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (6)].ltok), OPF_IF, opFormUnion_createMiddle (0), ltoken_undefined); ;}
     break;
 
   case 9:
-#line 169 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (1)].ltok), OPF_ANYOP, opFormUnion_createAnyOp ((yyvsp[(1) - (1)].ltok)), ltoken_undefined); ;}
     break;
 
   case 10:
-#line 171 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (2)].ltok), OPF_MANYOP, opFormUnion_createAnyOp ((yyvsp[(2) - (2)].ltok)), ltoken_undefined); ;}
     break;
 
   case 11:
-#line 173 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (2)].ltok), OPF_ANYOPM, opFormUnion_createAnyOp ((yyvsp[(1) - (2)].ltok)), ltoken_undefined); ;}
     break;
 
   case 12:
-#line 175 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MANYOPM, opFormUnion_createAnyOp ((yyvsp[(2) - (3)].ltok)), ltoken_undefined); ;}
     break;
 
   case 13:
-#line 177 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MIDDLE, opFormUnion_createMiddle ((yyvsp[(2) - (3)].count)), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 14:
-#line 179 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(2) - (4)].ltok), OPF_MMIDDLE, opFormUnion_createMiddle ((yyvsp[(3) - (4)].count)), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 15:
-#line 181 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (4)].ltok), OPF_MIDDLEM, opFormUnion_createMiddle ((yyvsp[(2) - (4)].count)), (yyvsp[(3) - (4)].ltok)); ;}
     break;
 
   case 16:
-#line 183 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(2) - (5)].ltok), OPF_MMIDDLEM, 
 			      opFormUnion_createMiddle ((yyvsp[(3) - (5)].count)), (yyvsp[(4) - (5)].ltok)); ;}
     break;
 
   case 17:
-#line 186 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_BMIDDLE, 
 			      opFormUnion_createMiddle ((yyvsp[(2) - (3)].count)), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 18:
-#line 189 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(2) - (4)].ltok), OPF_BMMIDDLE, 
 			      opFormUnion_createMiddle ((yyvsp[(3) - (4)].count)), (yyvsp[(4) - (4)].ltok)); ;}
     break;
 
   case 19:
-#line 192 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (4)].ltok), OPF_BMIDDLEM, 
 			    opFormUnion_createMiddle ((yyvsp[(2) - (4)].count)), (yyvsp[(3) - (4)].ltok)); ;}
     break;
 
   case 20:
-#line 195 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(2) - (5)].ltok), OPF_BMMIDDLEM, 
 			    opFormUnion_createMiddle ((yyvsp[(3) - (5)].count)), (yyvsp[(4) - (5)].ltok)); ;}
     break;
 
   case 21:
-#line 198 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (2)].ltok), OPF_SELECT, 
 			    opFormUnion_createAnyOp ((yyvsp[(2) - (2)].ltok)), ltoken_undefined); ;}
     break;
 
   case 22:
-#line 201 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MSELECT, 
 			    opFormUnion_createAnyOp ((yyvsp[(3) - (3)].ltok)), ltoken_undefined); ;}
     break;
 
   case 23:
-#line 206 "signature.y"
+
     { (yyval.opform) = makeOpFormNode ((yyvsp[(1) - (3)].ltok), OPF_MMAP, 
 			    opFormUnion_createAnyOp ((yyvsp[(3) - (3)].ltok)), ltoken_undefined); ;}
     break;
 
   case 24:
-#line 211 "signature.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ;}
     break;
 
   case 25:
-#line 213 "signature.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ;}
     break;
 
   case 26:
-#line 215 "signature.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ;}
     break;
 
   case 27:
-#line 219 "signature.y"
+
     { (yyval.count) = 0; ;}
     break;
 
   case 28:
-#line 221 "signature.y"
+
     { (yyval.count) = (yyvsp[(1) - (1)].count); ;}
     break;
 
   case 29:
-#line 225 "signature.y"
+
     { (yyval.count) = 1; ;}
     break;
 
   case 30:
-#line 227 "signature.y"
+
     { (yyval.count) = (yyvsp[(1) - (3)].count) + 1; ;}
     break;
 
   case 31:
-#line 231 "signature.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ;}
     break;
 
   case 32:
-#line 233 "signature.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ;}
     break;
 
   case 33:
-#line 237 "signature.y"
+
     { (yyval.signature) = makesigNode ((yyvsp[(2) - (3)].ltok), (yyvsp[(1) - (3)].ltokenList), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 34:
-#line 241 "signature.y"
+
     { (yyval.ltokenList) = ltokenList_new (); ;}
     break;
 
   case 35:
-#line 243 "signature.y"
+
     { (yyval.ltokenList) = (yyvsp[(1) - (1)].ltokenList); ;}
     break;
 
   case 36:
-#line 247 "signature.y"
+
     { (yyval.ltokenList) = ltokenList_singleton ((yyvsp[(1) - (1)].ltok)); ;}
     break;
 
   case 37:
-#line 249 "signature.y"
+
     { (yyval.ltokenList) = ltokenList_push ((yyvsp[(1) - (3)].ltokenList), (yyvsp[(3) - (3)].ltok)); ;}
     break;
 
   case 38:
-#line 253 "signature.y"
+
     { 
 	  (yyval.ltok) = (yyvsp[(1) - (1)].ltok); 
 	  ltoken_setText ((yyval.ltok), processTraitSortId (ltoken_getText ((yyvsp[(1) - (1)].ltok)))); 
@@ -1759,13 +1759,13 @@ yyreduce:
     break;
 
   case 39:
-#line 260 "signature.y"
+
     { (yyval.ltok) = (yyvsp[(1) - (1)].ltok); ;}
     break;
 
 
 /* Line 1267 of yacc.c.  */
-#line 1711 "signature.tab.c"
+
       default: break;
     }
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
@@ -1979,7 +1979,7 @@ yyreturn:
 }
 
 
-#line 263 "signature.y"
+
 
 
 # include "bison.reset"
